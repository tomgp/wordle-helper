{"version":3,"file":"bundle.js","sources":["../node_modules/svelte/internal/index.mjs","../src/shortWordList.js","../src/constraintManager.js","../src/Guess.svelte","../src/GuessRecord.svelte","../src/longWordList.js","../src/App.svelte","../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.45.0' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","module.exports = [\n  \"cigar\",\"rebut\",\"sissy\",\"humph\",\"awake\",\"blush\",\"focal\",\"evade\",\"naval\",\"serve\",\"heath\",\"dwarf\",\"model\",\"karma\",\"stink\",\"grade\",\"quiet\",\"bench\",\"abate\",\"feign\",\"major\",\"death\",\"fresh\",\"crust\",\"stool\",\"colon\",\"abase\",\"marry\",\"react\",\"batty\",\"pride\",\"floss\",\"helix\",\"croak\",\"staff\",\"paper\",\"unfed\",\"whelp\",\"trawl\",\"outdo\",\"adobe\",\"crazy\",\"sower\",\"repay\",\"digit\",\"crate\",\"cluck\",\"spike\",\"mimic\",\"pound\",\"maxim\",\"linen\",\"unmet\",\"flesh\",\"booby\",\"forth\",\"first\",\"stand\",\"belly\",\"ivory\",\"seedy\",\"print\",\"yearn\",\"drain\",\"bribe\",\"stout\",\"panel\",\"crass\",\"flume\",\"offal\",\"agree\",\"error\",\"swirl\",\"argue\",\"bleed\",\"delta\",\"flick\",\"totem\",\"wooer\",\"front\",\"shrub\",\"parry\",\"biome\",\"lapel\",\"start\",\"greet\",\"goner\",\"golem\",\"lusty\",\"loopy\",\"round\",\"audit\",\"lying\",\"gamma\",\"labor\",\"islet\",\"civic\",\"forge\",\"corny\",\"moult\",\"basic\",\"salad\",\"agate\",\"spicy\",\"spray\",\"essay\",\"fjord\",\"spend\",\"kebab\",\"guild\",\"aback\",\"motor\",\"alone\",\"hatch\",\"hyper\",\"thumb\",\"dowry\",\"ought\",\"belch\",\"dutch\",\"pilot\",\"tweed\",\"comet\",\"jaunt\",\"enema\",\"steed\",\"abyss\",\"growl\",\"fling\",\"dozen\",\"boozy\",\"erode\",\"world\",\"gouge\",\"click\",\"briar\",\"great\",\"altar\",\"pulpy\",\"blurt\",\"coast\",\"duchy\",\"groin\",\"fixer\",\"group\",\"rogue\",\"badly\",\"smart\",\"pithy\",\"gaudy\",\"chill\",\"heron\",\"vodka\",\"finer\",\"surer\",\"radio\",\"rouge\",\"perch\",\"retch\",\"wrote\",\"clock\",\"tilde\",\"store\",\"prove\",\"bring\",\"solve\",\"cheat\",\"grime\",\"exult\",\"usher\",\"epoch\",\"triad\",\"break\",\"rhino\",\"viral\",\"conic\",\"masse\",\"sonic\",\"vital\",\"trace\",\"using\",\"peach\",\"champ\",\"baton\",\"brake\",\"pluck\",\"craze\",\"gripe\",\"weary\",\"picky\",\"acute\",\"ferry\",\"aside\",\"tapir\",\"troll\",\"unify\",\"rebus\",\"boost\",\"truss\",\"siege\",\"tiger\",\"banal\",\"slump\",\"crank\",\"gorge\",\"query\",\"drink\",\"favor\",\"abbey\",\"tangy\",\"panic\",\"solar\",\"shire\",\"proxy\",\"point\",\"robot\",\"prick\",\"wince\",\"crimp\",\"knoll\",\"sugar\",\"whack\",\"mount\",\"perky\",\"could\",\"wrung\",\"light\",\"those\",\"moist\",\"shard\",\"pleat\",\"aloft\",\"skill\",\"elder\",\"frame\",\"humor\",\"pause\",\"ulcer\",\"ultra\",\"robin\",\"cynic\",\"agora\",\"aroma\",\"caulk\",\"shake\",\"pupal\",\"dodge\",\"swill\",\"tacit\",\"other\",\"thorn\",\"trove\",\"bloke\",\"vivid\",\"spill\",\"chant\",\"choke\",\"rupee\",\"nasty\",\"mourn\",\"ahead\",\"brine\",\"cloth\",\"hoard\",\"sweet\",\"month\",\"lapse\",\"watch\",\"today\",\"focus\",\"smelt\",\"tease\",\"cater\",\"movie\",\"lynch\",\"saute\",\"allow\",\"renew\",\"their\",\"slosh\",\"purge\",\"chest\",\"depot\",\"epoxy\",\"nymph\",\"found\",\"shall\",\"harry\",\"stove\",\"lowly\",\"snout\",\"trope\",\"fewer\",\"shawl\",\"natal\",\"fibre\",\"comma\",\"foray\",\"scare\",\"stair\",\"black\",\"squad\",\"royal\",\"chunk\",\"mince\",\"slave\",\"shame\",\"cheek\",\"ample\",\"flair\",\"foyer\",\"cargo\",\"oxide\",\"plant\",\"olive\",\"inert\",\"askew\",\"heist\",\"shown\",\"zesty\",\"hasty\",\"trash\",\"fella\",\"larva\",\"forgo\",\"story\",\"hairy\",\"train\",\"homer\",\"badge\",\"midst\",\"canny\",\"fetus\",\"butch\",\"farce\",\"slung\",\"tipsy\",\"metal\",\"yield\",\"delve\",\"being\",\"scour\",\"glass\",\"gamer\",\"scrap\",\"money\",\"hinge\",\"album\",\"vouch\",\"asset\",\"tiara\",\"crept\",\"bayou\",\"atoll\",\"manor\",\"creak\",\"showy\",\"phase\",\"froth\",\"depth\",\"gloom\",\"flood\",\"trait\",\"girth\",\"piety\",\"payer\",\"goose\",\"float\",\"donor\",\"atone\",\"primo\",\"apron\",\"blown\",\"cacao\",\"loser\",\"input\",\"gloat\",\"awful\",\"brink\",\"smite\",\"beady\",\"rusty\",\"retro\",\"droll\",\"gawky\",\"hutch\",\"pinto\",\"gaily\",\"egret\",\"lilac\",\"sever\",\"field\",\"fluff\",\"hydro\",\"flack\",\"agape\",\"wench\",\"voice\",\"stead\",\"stalk\",\"berth\",\"madam\",\"night\",\"bland\",\"liver\",\"wedge\",\"augur\",\"roomy\",\"wacky\",\"flock\",\"angry\",\"bobby\",\"trite\",\"aphid\",\"tryst\",\"midge\",\"power\",\"elope\",\"cinch\",\"motto\",\"stomp\",\"upset\",\"bluff\",\"cramp\",\"quart\",\"coyly\",\"youth\",\"rhyme\",\"buggy\",\"alien\",\"smear\",\"unfit\",\"patty\",\"cling\",\"glean\",\"label\",\"hunky\",\"khaki\",\"poker\",\"gruel\",\"twice\",\"twang\",\"shrug\",\"treat\",\"unlit\",\"waste\",\"merit\",\"woven\",\"octal\",\"needy\",\"clown\",\"widow\",\"irony\",\"ruder\",\"gauze\",\"chief\",\"onset\",\"prize\",\"fungi\",\"charm\",\"gully\",\"inter\",\"whoop\",\"taunt\",\"leery\",\"class\",\"theme\",\"lofty\",\"tibia\",\"booze\",\"alpha\",\"thyme\",\"eclat\",\"doubt\",\"parer\",\"chute\",\"stick\",\"trice\",\"alike\",\"sooth\",\"recap\",\"saint\",\"liege\",\"glory\",\"grate\",\"admit\",\"brisk\",\"soggy\",\"usurp\",\"scald\",\"scorn\",\"leave\",\"twine\",\"sting\",\"bough\",\"marsh\",\"sloth\",\"dandy\",\"vigor\",\"howdy\",\"enjoy\",\"valid\",\"ionic\",\"equal\",\"unset\",\"floor\",\"catch\",\"spade\",\"stein\",\"exist\",\"quirk\",\"denim\",\"grove\",\"spiel\",\"mummy\",\"fault\",\"foggy\",\"flout\",\"carry\",\"sneak\",\"libel\",\"waltz\",\"aptly\",\"piney\",\"inept\",\"aloud\",\"photo\",\"dream\",\"stale\",\"vomit\",\"ombre\",\"fanny\",\"unite\",\"snarl\",\"baker\",\"there\",\"glyph\",\"pooch\",\"hippy\",\"spell\",\"folly\",\"louse\",\"gulch\",\"vault\",\"godly\",\"threw\",\"fleet\",\"grave\",\"inane\",\"shock\",\"crave\",\"spite\",\"valve\",\"skimp\",\"claim\",\"rainy\",\"musty\",\"pique\",\"daddy\",\"quasi\",\"arise\",\"aging\",\"valet\",\"opium\",\"avert\",\"stuck\",\"recut\",\"mulch\",\"genre\",\"plume\",\"rifle\",\"count\",\"incur\",\"total\",\"wrest\",\"mocha\",\"deter\",\"study\",\"lover\",\"safer\",\"rivet\",\"funny\",\"smoke\",\"mound\",\"undue\",\"sedan\",\"pagan\",\"swine\",\"guile\",\"gusty\",\"equip\",\"tough\",\"canoe\",\"chaos\",\"covet\",\"human\",\"udder\",\"lunch\",\"blast\",\"stray\",\"manga\",\"melee\",\"lefty\",\"quick\",\"paste\",\"given\",\"octet\",\"risen\",\"groan\",\"leaky\",\"grind\",\"carve\",\"loose\",\"sadly\",\"spilt\",\"apple\",\"slack\",\"honey\",\"final\",\"sheen\",\"eerie\",\"minty\",\"slick\",\"derby\",\"wharf\",\"spelt\",\"coach\",\"erupt\",\"singe\",\"price\",\"spawn\",\"fairy\",\"jiffy\",\"filmy\",\"stack\",\"chose\",\"sleep\",\"ardor\",\"nanny\",\"niece\",\"woozy\",\"handy\",\"grace\",\"ditto\",\"stank\",\"cream\",\"usual\",\"diode\",\"valor\",\"angle\",\"ninja\",\"muddy\",\"chase\",\"reply\",\"prone\",\"spoil\",\"heart\",\"shade\",\"diner\",\"arson\",\"onion\",\"sleet\",\"dowel\",\"couch\",\"palsy\",\"bowel\",\"smile\",\"evoke\",\"creek\",\"lance\",\"eagle\",\"idiot\",\"siren\",\"built\",\"embed\",\"award\",\"dross\",\"annul\",\"goody\",\"frown\",\"patio\",\"laden\",\"humid\",\"elite\",\"lymph\",\"edify\",\"might\",\"reset\",\"visit\",\"gusto\",\"purse\",\"vapor\",\"crock\",\"write\",\"sunny\",\"loath\",\"chaff\",\"slide\",\"queer\",\"venom\",\"stamp\",\"sorry\",\"still\",\"acorn\",\"aping\",\"pushy\",\"tamer\",\"hater\",\"mania\",\"awoke\",\"brawn\",\"swift\",\"exile\",\"birch\",\"lucky\",\"freer\",\"risky\",\"ghost\",\"plier\",\"lunar\",\"winch\",\"snare\",\"nurse\",\"house\",\"borax\",\"nicer\",\"lurch\",\"exalt\",\"about\",\"savvy\",\"toxin\",\"tunic\",\"pried\",\"inlay\",\"chump\",\"lanky\",\"cress\",\"eater\",\"elude\",\"cycle\",\"kitty\",\"boule\",\"moron\",\"tenet\",\"place\",\"lobby\",\"plush\",\"vigil\",\"index\",\"blink\",\"clung\",\"qualm\",\"croup\",\"clink\",\"juicy\",\"stage\",\"decay\",\"nerve\",\"flier\",\"shaft\",\"crook\",\"clean\",\"china\",\"ridge\",\"vowel\",\"gnome\",\"snuck\",\"icing\",\"spiny\",\"rigor\",\"snail\",\"flown\",\"rabid\",\"prose\",\"thank\",\"poppy\",\"budge\",\"fiber\",\"moldy\",\"dowdy\",\"kneel\",\"track\",\"caddy\",\"quell\",\"dumpy\",\"paler\",\"swore\",\"rebar\",\"scuba\",\"splat\",\"flyer\",\"horny\",\"mason\",\"doing\",\"ozone\",\"amply\",\"molar\",\"ovary\",\"beset\",\"queue\",\"cliff\",\"magic\",\"truce\",\"sport\",\"fritz\",\"edict\",\"twirl\",\"verse\",\"llama\",\"eaten\",\"range\",\"whisk\",\"hovel\",\"rehab\",\"macaw\",\"sigma\",\"spout\",\"verve\",\"sushi\",\"dying\",\"fetid\",\"brain\",\"buddy\",\"thump\",\"scion\",\"candy\",\"chord\",\"basin\",\"march\",\"crowd\",\"arbor\",\"gayly\",\"musky\",\"stain\",\"dally\",\"bless\",\"bravo\",\"stung\",\"title\",\"ruler\",\"kiosk\",\"blond\",\"ennui\",\"layer\",\"fluid\",\"tatty\",\"score\",\"cutie\",\"zebra\",\"barge\",\"matey\",\"bluer\",\"aider\",\"shook\",\"river\",\"privy\",\"betel\",\"frisk\",\"bongo\",\"begun\",\"azure\",\"weave\",\"genie\",\"sound\",\"glove\",\"braid\",\"scope\",\"wryly\",\"rover\",\"assay\",\"ocean\",\"bloom\",\"irate\",\"later\",\"woken\",\"silky\",\"wreck\",\"dwelt\",\"slate\",\"smack\",\"solid\",\"amaze\",\"hazel\",\"wrist\",\"jolly\",\"globe\",\"flint\",\"rouse\",\"civil\",\"vista\",\"relax\",\"cover\",\"alive\",\"beech\",\"jetty\",\"bliss\",\"vocal\",\"often\",\"dolly\",\"eight\",\"joker\",\"since\",\"event\",\"ensue\",\"shunt\",\"diver\",\"poser\",\"worst\",\"sweep\",\"alley\",\"creed\",\"anime\",\"leafy\",\"bosom\",\"dunce\",\"stare\",\"pudgy\",\"waive\",\"choir\",\"stood\",\"spoke\",\"outgo\",\"delay\",\"bilge\",\"ideal\",\"clasp\",\"seize\",\"hotly\",\"laugh\",\"sieve\",\"block\",\"meant\",\"grape\",\"noose\",\"hardy\",\"shied\",\"drawl\",\"daisy\",\"putty\",\"strut\",\"burnt\",\"tulip\",\"crick\",\"idyll\",\"vixen\",\"furor\",\"geeky\",\"cough\",\"naive\",\"shoal\",\"stork\",\"bathe\",\"aunty\",\"check\",\"prime\",\"brass\",\"outer\",\"furry\",\"razor\",\"elect\",\"evict\",\"imply\",\"demur\",\"quota\",\"haven\",\"cavil\",\"swear\",\"crump\",\"dough\",\"gavel\",\"wagon\",\"salon\",\"nudge\",\"harem\",\"pitch\",\"sworn\",\"pupil\",\"excel\",\"stony\",\"cabin\",\"unzip\",\"queen\",\"trout\",\"polyp\",\"earth\",\"storm\",\"until\",\"taper\",\"enter\",\"child\",\"adopt\",\"minor\",\"fatty\",\"husky\",\"brave\",\"filet\",\"slime\",\"glint\",\"tread\",\"steal\",\"regal\",\"guest\",\"every\",\"murky\",\"share\",\"spore\",\"hoist\",\"buxom\",\"inner\",\"otter\",\"dimly\",\"level\",\"sumac\",\"donut\",\"stilt\",\"arena\",\"sheet\",\"scrub\",\"fancy\",\"slimy\",\"pearl\",\"silly\",\"porch\",\"dingo\",\"sepia\",\"amble\",\"shady\",\"bread\",\"friar\",\"reign\",\"dairy\",\"quill\",\"cross\",\"brood\",\"tuber\",\"shear\",\"posit\",\"blank\",\"villa\",\"shank\",\"piggy\",\"freak\",\"which\",\"among\",\"fecal\",\"shell\",\"would\",\"algae\",\"large\",\"rabbi\",\"agony\",\"amuse\",\"bushy\",\"copse\",\"swoon\",\"knife\",\"pouch\",\"ascot\",\"plane\",\"crown\",\"urban\",\"snide\",\"relay\",\"abide\",\"viola\",\"rajah\",\"straw\",\"dilly\",\"crash\",\"amass\",\"third\",\"trick\",\"tutor\",\"woody\",\"blurb\",\"grief\",\"disco\",\"where\",\"sassy\",\"beach\",\"sauna\",\"comic\",\"clued\",\"creep\",\"caste\",\"graze\",\"snuff\",\"frock\",\"gonad\",\"drunk\",\"prong\",\"lurid\",\"steel\",\"halve\",\"buyer\",\"vinyl\",\"utile\",\"smell\",\"adage\",\"worry\",\"tasty\",\"local\",\"trade\",\"finch\",\"ashen\",\"modal\",\"gaunt\",\"clove\",\"enact\",\"adorn\",\"roast\",\"speck\",\"sheik\",\"missy\",\"grunt\",\"snoop\",\"party\",\"touch\",\"mafia\",\"emcee\",\"array\",\"south\",\"vapid\",\"jelly\",\"skulk\",\"angst\",\"tubal\",\"lower\",\"crest\",\"sweat\",\"cyber\",\"adore\",\"tardy\",\"swami\",\"notch\",\"groom\",\"roach\",\"hitch\",\"young\",\"align\",\"ready\",\"frond\",\"strap\",\"puree\",\"realm\",\"venue\",\"swarm\",\"offer\",\"seven\",\"dryer\",\"diary\",\"dryly\",\"drank\",\"acrid\",\"heady\",\"theta\",\"junto\",\"pixie\",\"quoth\",\"bonus\",\"shalt\",\"penne\",\"amend\",\"datum\",\"build\",\"piano\",\"shelf\",\"lodge\",\"suing\",\"rearm\",\"coral\",\"ramen\",\"worth\",\"psalm\",\"infer\",\"overt\",\"mayor\",\"ovoid\",\"glide\",\"usage\",\"poise\",\"randy\",\"chuck\",\"prank\",\"fishy\",\"tooth\",\"ether\",\"drove\",\"idler\",\"swath\",\"stint\",\"while\",\"begat\",\"apply\",\"slang\",\"tarot\",\"radar\",\"credo\",\"aware\",\"canon\",\"shift\",\"timer\",\"bylaw\",\"serum\",\"three\",\"steak\",\"iliac\",\"shirk\",\"blunt\",\"puppy\",\"penal\",\"joist\",\"bunny\",\"shape\",\"beget\",\"wheel\",\"adept\",\"stunt\",\"stole\",\"topaz\",\"chore\",\"fluke\",\"afoot\",\"bloat\",\"bully\",\"dense\",\"caper\",\"sneer\",\"boxer\",\"jumbo\",\"lunge\",\"space\",\"avail\",\"short\",\"slurp\",\"loyal\",\"flirt\",\"pizza\",\"conch\",\"tempo\",\"droop\",\"plate\",\"bible\",\"plunk\",\"afoul\",\"savoy\",\"steep\",\"agile\",\"stake\",\"dwell\",\"knave\",\"beard\",\"arose\",\"motif\",\"smash\",\"broil\",\"glare\",\"shove\",\"baggy\",\"mammy\",\"swamp\",\"along\",\"rugby\",\"wager\",\"quack\",\"squat\",\"snaky\",\"debit\",\"mange\",\"skate\",\"ninth\",\"joust\",\"tramp\",\"spurn\",\"medal\",\"micro\",\"rebel\",\"flank\",\"learn\",\"nadir\",\"maple\",\"comfy\",\"remit\",\"gruff\",\"ester\",\"least\",\"mogul\",\"fetch\",\"cause\",\"oaken\",\"aglow\",\"meaty\",\"gaffe\",\"shyly\",\"racer\",\"prowl\",\"thief\",\"stern\",\"poesy\",\"rocky\",\"tweet\",\"waist\",\"spire\",\"grope\",\"havoc\",\"patsy\",\"truly\",\"forty\",\"deity\",\"uncle\",\"swish\",\"giver\",\"preen\",\"bevel\",\"lemur\",\"draft\",\"slope\",\"annoy\",\"lingo\",\"bleak\",\"ditty\",\"curly\",\"cedar\",\"dirge\",\"grown\",\"horde\",\"drool\",\"shuck\",\"crypt\",\"cumin\",\"stock\",\"gravy\",\"locus\",\"wider\",\"breed\",\"quite\",\"chafe\",\"cache\",\"blimp\",\"deign\",\"fiend\",\"logic\",\"cheap\",\"elide\",\"rigid\",\"false\",\"renal\",\"pence\",\"rowdy\",\"shoot\",\"blaze\",\"envoy\",\"posse\",\"brief\",\"never\",\"abort\",\"mouse\",\"mucky\",\"sulky\",\"fiery\",\"media\",\"trunk\",\"yeast\",\"clear\",\"skunk\",\"scalp\",\"bitty\",\"cider\",\"koala\",\"duvet\",\"segue\",\"creme\",\"super\",\"grill\",\"after\",\"owner\",\"ember\",\"reach\",\"nobly\",\"empty\",\"speed\",\"gipsy\",\"recur\",\"smock\",\"dread\",\"merge\",\"burst\",\"kappa\",\"amity\",\"shaky\",\"hover\",\"carol\",\"snort\",\"synod\",\"faint\",\"haunt\",\"flour\",\"chair\",\"detox\",\"shrew\",\"tense\",\"plied\",\"quark\",\"burly\",\"novel\",\"waxen\",\"stoic\",\"jerky\",\"blitz\",\"beefy\",\"lyric\",\"hussy\",\"towel\",\"quilt\",\"below\",\"bingo\",\"wispy\",\"brash\",\"scone\",\"toast\",\"easel\",\"saucy\",\"value\",\"spice\",\"honor\",\"route\",\"sharp\",\"bawdy\",\"radii\",\"skull\",\"phony\",\"issue\",\"lager\",\"swell\",\"urine\",\"gassy\",\"trial\",\"flora\",\"upper\",\"latch\",\"wight\",\"brick\",\"retry\",\"holly\",\"decal\",\"grass\",\"shack\",\"dogma\",\"mover\",\"defer\",\"sober\",\"optic\",\"crier\",\"vying\",\"nomad\",\"flute\",\"hippo\",\"shark\",\"drier\",\"obese\",\"bugle\",\"tawny\",\"chalk\",\"feast\",\"ruddy\",\"pedal\",\"scarf\",\"cruel\",\"bleat\",\"tidal\",\"slush\",\"semen\",\"windy\",\"dusty\",\"sally\",\"igloo\",\"nerdy\",\"jewel\",\"shone\",\"whale\",\"hymen\",\"abuse\",\"fugue\",\"elbow\",\"crumb\",\"pansy\",\"welsh\",\"syrup\",\"terse\",\"suave\",\"gamut\",\"swung\",\"drake\",\"freed\",\"afire\",\"shirt\",\"grout\",\"oddly\",\"tithe\",\"plaid\",\"dummy\",\"broom\",\"blind\",\"torch\",\"enemy\",\"again\",\"tying\",\"pesky\",\"alter\",\"gazer\",\"noble\",\"ethos\",\"bride\",\"extol\",\"decor\",\"hobby\",\"beast\",\"idiom\",\"utter\",\"these\",\"sixth\",\"alarm\",\"erase\",\"elegy\",\"spunk\",\"piper\",\"scaly\",\"scold\",\"hefty\",\"chick\",\"sooty\",\"canal\",\"whiny\",\"slash\",\"quake\",\"joint\",\"swept\",\"prude\",\"heavy\",\"wield\",\"femme\",\"lasso\",\"maize\",\"shale\",\"screw\",\"spree\",\"smoky\",\"whiff\",\"scent\",\"glade\",\"spent\",\"prism\",\"stoke\",\"riper\",\"orbit\",\"cocoa\",\"guilt\",\"humus\",\"shush\",\"table\",\"smirk\",\"wrong\",\"noisy\",\"alert\",\"shiny\",\"elate\",\"resin\",\"whole\",\"hunch\",\"pixel\",\"polar\",\"hotel\",\"sword\",\"cleat\",\"mango\",\"rumba\",\"puffy\",\"filly\",\"billy\",\"leash\",\"clout\",\"dance\",\"ovate\",\"facet\",\"chili\",\"paint\",\"liner\",\"curio\",\"salty\",\"audio\",\"snake\",\"fable\",\"cloak\",\"navel\",\"spurt\",\"pesto\",\"balmy\",\"flash\",\"unwed\",\"early\",\"churn\",\"weedy\",\"stump\",\"lease\",\"witty\",\"wimpy\",\"spoof\",\"saner\",\"blend\",\"salsa\",\"thick\",\"warty\",\"manic\",\"blare\",\"squib\",\"spoon\",\"probe\",\"crepe\",\"knack\",\"force\",\"debut\",\"order\",\"haste\",\"teeth\",\"agent\",\"widen\",\"icily\",\"slice\",\"ingot\",\"clash\",\"juror\",\"blood\",\"abode\",\"throw\",\"unity\",\"pivot\",\"slept\",\"troop\",\"spare\",\"sewer\",\"parse\",\"morph\",\"cacti\",\"tacky\",\"spool\",\"demon\",\"moody\",\"annex\",\"begin\",\"fuzzy\",\"patch\",\"water\",\"lumpy\",\"admin\",\"omega\",\"limit\",\"tabby\",\"macho\",\"aisle\",\"skiff\",\"basis\",\"plank\",\"verge\",\"botch\",\"crawl\",\"lousy\",\"slain\",\"cubic\",\"raise\",\"wrack\",\"guide\",\"foist\",\"cameo\",\"under\",\"actor\",\"revue\",\"fraud\",\"harpy\",\"scoop\",\"climb\",\"refer\",\"olden\",\"clerk\",\"debar\",\"tally\",\"ethic\",\"cairn\",\"tulle\",\"ghoul\",\"hilly\",\"crude\",\"apart\",\"scale\",\"older\",\"plain\",\"sperm\",\"briny\",\"abbot\",\"rerun\",\"quest\",\"crisp\",\"bound\",\"befit\",\"drawn\",\"suite\",\"itchy\",\"cheer\",\"bagel\",\"guess\",\"broad\",\"axiom\",\"chard\",\"caput\",\"leant\",\"harsh\",\"curse\",\"proud\",\"swing\",\"opine\",\"taste\",\"lupus\",\"gumbo\",\"miner\",\"green\",\"chasm\",\"lipid\",\"topic\",\"armor\",\"brush\",\"crane\",\"mural\",\"abled\",\"habit\",\"bossy\",\"maker\",\"dusky\",\"dizzy\",\"lithe\",\"brook\",\"jazzy\",\"fifty\",\"sense\",\"giant\",\"surly\",\"legal\",\"fatal\",\"flunk\",\"began\",\"prune\",\"small\",\"slant\",\"scoff\",\"torus\",\"ninny\",\"covey\",\"viper\",\"taken\",\"moral\",\"vogue\",\"owing\",\"token\",\"entry\",\"booth\",\"voter\",\"chide\",\"elfin\",\"ebony\",\"neigh\",\"minim\",\"melon\",\"kneed\",\"decoy\",\"voila\",\"ankle\",\"arrow\",\"mushy\",\"tribe\",\"cease\",\"eager\",\"birth\",\"graph\",\"odder\",\"terra\",\"weird\",\"tried\",\"clack\",\"color\",\"rough\",\"weigh\",\"uncut\",\"ladle\",\"strip\",\"craft\",\"minus\",\"dicey\",\"titan\",\"lucid\",\"vicar\",\"dress\",\"ditch\",\"gypsy\",\"pasta\",\"taffy\",\"flame\",\"swoop\",\"aloof\",\"sight\",\"broke\",\"teary\",\"chart\",\"sixty\",\"wordy\",\"sheer\",\"leper\",\"nosey\",\"bulge\",\"savor\",\"clamp\",\"funky\",\"foamy\",\"toxic\",\"brand\",\"plumb\",\"dingy\",\"butte\",\"drill\",\"tripe\",\"bicep\",\"tenor\",\"krill\",\"worse\",\"drama\",\"hyena\",\"think\",\"ratio\",\"cobra\",\"basil\",\"scrum\",\"bused\",\"phone\",\"court\",\"camel\",\"proof\",\"heard\",\"angel\",\"petal\",\"pouty\",\"throb\",\"maybe\",\"fetal\",\"sprig\",\"spine\",\"shout\",\"cadet\",\"macro\",\"dodgy\",\"satyr\",\"rarer\",\"binge\",\"trend\",\"nutty\",\"leapt\",\"amiss\",\"split\",\"myrrh\",\"width\",\"sonar\",\"tower\",\"baron\",\"fever\",\"waver\",\"spark\",\"belie\",\"sloop\",\"expel\",\"smote\",\"baler\",\"above\",\"north\",\"wafer\",\"scant\",\"frill\",\"awash\",\"snack\",\"scowl\",\"frail\",\"drift\",\"limbo\",\"fence\",\"motel\",\"ounce\",\"wreak\",\"revel\",\"talon\",\"prior\",\"knelt\",\"cello\",\"flake\",\"debug\",\"anode\",\"crime\",\"salve\",\"scout\",\"imbue\",\"pinky\",\"stave\",\"vague\",\"chock\",\"fight\",\"video\",\"stone\",\"teach\",\"cleft\",\"frost\",\"prawn\",\"booty\",\"twist\",\"apnea\",\"stiff\",\"plaza\",\"ledge\",\"tweak\",\"board\",\"grant\",\"medic\",\"bacon\",\"cable\",\"brawl\",\"slunk\",\"raspy\",\"forum\",\"drone\",\"women\",\"mucus\",\"boast\",\"toddy\",\"coven\",\"tumor\",\"truer\",\"wrath\",\"stall\",\"steam\",\"axial\",\"purer\",\"daily\",\"trail\",\"niche\",\"mealy\",\"juice\",\"nylon\",\"plump\",\"merry\",\"flail\",\"papal\",\"wheat\",\"berry\",\"cower\",\"erect\",\"brute\",\"leggy\",\"snipe\",\"sinew\",\"skier\",\"penny\",\"jumpy\",\"rally\",\"umbra\",\"scary\",\"modem\",\"gross\",\"avian\",\"greed\",\"satin\",\"tonic\",\"parka\",\"sniff\",\"livid\",\"stark\",\"trump\",\"giddy\",\"reuse\",\"taboo\",\"avoid\",\"quote\",\"devil\",\"liken\",\"gloss\",\"gayer\",\"beret\",\"noise\",\"gland\",\"dealt\",\"sling\",\"rumor\",\"opera\",\"thigh\",\"tonga\",\"flare\",\"wound\",\"white\",\"bulky\",\"etude\",\"horse\",\"circa\",\"paddy\",\"inbox\",\"fizzy\",\"grain\",\"exert\",\"surge\",\"gleam\",\"belle\",\"salvo\",\"crush\",\"fruit\",\"sappy\",\"taker\",\"tract\",\"ovine\",\"spiky\",\"frank\",\"reedy\",\"filth\",\"spasm\",\"heave\",\"mambo\",\"right\",\"clank\",\"trust\",\"lumen\",\"borne\",\"spook\",\"sauce\",\"amber\",\"lathe\",\"carat\",\"corer\",\"dirty\",\"slyly\",\"affix\",\"alloy\",\"taint\",\"sheep\",\"kinky\",\"wooly\",\"mauve\",\"flung\",\"yacht\",\"fried\",\"quail\",\"brunt\",\"grimy\",\"curvy\",\"cagey\",\"rinse\",\"deuce\",\"state\",\"grasp\",\"milky\",\"bison\",\"graft\",\"sandy\",\"baste\",\"flask\",\"hedge\",\"girly\",\"swash\",\"boney\",\"coupe\",\"endow\",\"abhor\",\"welch\",\"blade\",\"tight\",\"geese\",\"miser\",\"mirth\",\"cloud\",\"cabal\",\"leech\",\"close\",\"tenth\",\"pecan\",\"droit\",\"grail\",\"clone\",\"guise\",\"ralph\",\"tango\",\"biddy\",\"smith\",\"mower\",\"payee\",\"serif\",\"drape\",\"fifth\",\"spank\",\"glaze\",\"allot\",\"truck\",\"kayak\",\"virus\",\"testy\",\"tepee\",\"fully\",\"zonal\",\"metro\",\"curry\",\"grand\",\"banjo\",\"axion\",\"bezel\",\"occur\",\"chain\",\"nasal\",\"gooey\",\"filer\",\"brace\",\"allay\",\"pubic\",\"raven\",\"plead\",\"gnash\",\"flaky\",\"munch\",\"dully\",\"eking\",\"thing\",\"slink\",\"hurry\",\"theft\",\"shorn\",\"pygmy\",\"ranch\",\"wring\",\"lemon\",\"shore\",\"mamma\",\"froze\",\"newer\",\"style\",\"moose\",\"antic\",\"drown\",\"vegan\",\"chess\",\"guppy\",\"union\",\"lever\",\"lorry\",\"image\",\"cabby\",\"druid\",\"exact\",\"truth\",\"dopey\",\"spear\",\"cried\",\"chime\",\"crony\",\"stunk\",\"timid\",\"batch\",\"gauge\",\"rotor\",\"crack\",\"curve\",\"latte\",\"witch\",\"bunch\",\"repel\",\"anvil\",\"soapy\",\"meter\",\"broth\",\"madly\",\"dried\",\"scene\",\"known\",\"magma\",\"roost\",\"woman\",\"thong\",\"punch\",\"pasty\",\"downy\",\"knead\",\"whirl\",\"rapid\",\"clang\",\"anger\",\"drive\",\"goofy\",\"email\",\"music\",\"stuff\",\"bleep\",\"rider\",\"mecca\",\"folio\",\"setup\",\"verso\",\"quash\",\"fauna\",\"gummy\",\"happy\",\"newly\",\"fussy\",\"relic\",\"guava\",\"ratty\",\"fudge\",\"femur\",\"chirp\",\"forte\",\"alibi\",\"whine\",\"petty\",\"golly\",\"plait\",\"fleck\",\"felon\",\"gourd\",\"brown\",\"thrum\",\"ficus\",\"stash\",\"decry\",\"wiser\",\"junta\",\"visor\",\"daunt\",\"scree\",\"impel\",\"await\",\"press\",\"whose\",\"turbo\",\"stoop\",\"speak\",\"mangy\",\"eying\",\"inlet\",\"crone\",\"pulse\",\"mossy\",\"staid\",\"hence\",\"pinch\",\"teddy\",\"sully\",\"snore\",\"ripen\",\"snowy\",\"attic\",\"going\",\"leach\",\"mouth\",\"hound\",\"clump\",\"tonal\",\"bigot\",\"peril\",\"piece\",\"blame\",\"haute\",\"spied\",\"undid\",\"intro\",\"basal\",\"shine\",\"gecko\",\"rodeo\",\"guard\",\"steer\",\"loamy\",\"scamp\",\"scram\",\"manly\",\"hello\",\"vaunt\",\"organ\",\"feral\",\"knock\",\"extra\",\"condo\",\"adapt\",\"willy\",\"polka\",\"rayon\",\"skirt\",\"faith\",\"torso\",\"match\",\"mercy\",\"tepid\",\"sleek\",\"riser\",\"twixt\",\"peace\",\"flush\",\"catty\",\"login\",\"eject\",\"roger\",\"rival\",\"untie\",\"refit\",\"aorta\",\"adult\",\"judge\",\"rower\",\"artsy\",\"rural\",\"shave\"\n]","const fullList = require ('./shortWordList.js');\n\nconst letters = \"abdcefghijklmnopqrstuvwxyz\";\n\nfunction manager(list = fullList){\n  const m = {};\n  let constraint = [ [...letters],[...letters],[...letters],[...letters],[...letters] ];\n  const knownLetters = [];\n  const checkedLetters = [];\n\n  function getLetterFrequency(subList, unique=true){\n    console.log(`checking letter frequency for ${subList.length} words`);\n    return subList.reduce((letters, word)=>{\n      let newLetters;\n      newLetters = unique ? [...new Set(word.split(''))] : word.split(''); \n      newLetters.forEach(l => {\n        if(!letters[l]){ letters[l]=0 }\n        letters[l] ++\n      });\n      return letters;\n    }, {});\n  }\n\n  function getWordValues(subList, unique=true){ \n    const frequencies = getLetterFrequency(subList);\n    console.log(`assigning values to ${subList.length} words`);\n    return subList.map(word=>{\n      const letters = unique ? [...new Set(word.split(''))] : word.split(''); //unique letters\n      const value = letters\n        .reduce((acc, letter)=>{\n          acc += frequencies[letter];\n          return acc;\n        }, 0);\n      return { word, value }\n    })\n    .sort((a,b)=>{\n      return b.value-a.value;\n    });\n  }\n\n  m.excludeLetter = function(letterToRemove){\n    constraint = constraint.map(possibleLetters=>{\n      return possibleLetters.filter(possibleLetter => possibleLetter != letterToRemove);\n    })\n  }\n\n  m.excludeLetterAtPosition = function(letterToRemove, position){\n    constraint[position] = constraint[position].filter(possibleLetter => possibleLetter != letterToRemove);\n  }\n\n  m.exclusiveAtPosition = function(letter, position){\n    constraint[position] = [letter];\n  }\n\n  m.setWordleResult = function(result){     /* result example = [\n    {letter:\"a\", value:\"grey\"}, //exclude from all positions\n    {letter:\"b\", value:\"green\"}, // exclude everythign else at this position\n    {letter:\"c\", value:\"yellow\"}, etc. ] // exclude from this position */\n    checkedLetters.push()\n    result.forEach((position,i)=>{\n      const p = [];\n      p[i] = position.letter;\n      checkedLetters.push(position.letter);\n      switch(position.value){\n        case \"green\":\n          m.exclusiveAtPosition(position.letter, i);\n          knownLetters.push(position.letter);\n          break;\n        case \"yellow\":\n          m.excludeLetterAtPosition(position.letter, i);\n          knownLetters.push(position.letter); //TODO: deal with double letters\n          break;\n        case \"grey\":\n          m.excludeLetter(position.letter);\n          break;\n      }\n    });\n\n    return m;\n  }\n\n  m.constraint = function(){\n    return constraint;\n  }\n\n  m.rankedList = function(){\n    // filter the list by contraint\n    const filteredList = list.filter(word=>{\n      // for each letter in the word does it satisfy the constraint for that positions\n      for(let i=0; i<word.length; i++){\n        if(constraint[i].indexOf(word[i]) < 0){\n          return false;\n        }\n      }\n      return true;\n    }).filter(word=>{ // remove anythin that doesn't conatain all knownLetters\n      return knownLetters.reduce((acc, letter)=>{\n        return word.indexOf(letter)>-1 && acc;\n      },true);\n    })\n    // TODO: rank it by letter frequency\n    return getWordValues(filteredList);\n  };\n\n  m.disjunct = function(){\n    const a = new Set(fullList);\n    const b = new Set(m.rankedList().map(d=>d.word));\n    const difference = [...new Set([...a].filter(x => !b.has(x)))];\n    const unchecked = difference.filter(word=>{\n      return [...word].reduce((acc, letter)=>{\n        return !(checkedLetters.indexOf(letter)>-1) && acc\n      },true);\n    })\n    return getWordValues(unchecked);\n  }\n  \n  return m;\n}\n\nmodule.exports = manager;\n\n\n\n\n/*\nconst myManager = manager();\n\n// solving a wordle puzzle by straightforward winnowing of the posibility space\nmyManager.setWordleResult([\n  { letter:'a', value:'yellow' },\n  { letter:'r', value:'yellow' },\n  { letter:'o', value:'yellow' },\n  { letter:'s', value:'grey' },\n  { letter:'e', value:'grey' }\n]).setWordleResult([\n  { letter:'m', value:'grey' },\n  { letter:'o', value:'yellow' },\n  { letter:'l', value:'grey' },\n  { letter:'a', value:'yellow' },\n  { letter:'r', value:'green'}\n]).setWordleResult([\n  { letter:'g', value:'grey' },\n  { letter:'a', value:'green' },\n  { letter:'t', value:'grey' },\n  { letter:'o', value:'green' },\n  { letter:'r', value:'green' }\n]).setWordleResult([\n  { letter:'v', value:'yellow' },\n  { letter:'a', value:'green' },\n  { letter:'p', value:'grey' },\n  { letter:'o', value:'green' },\n  { letter:'r', value:'green' }\n]);\n\n// however, it might be more efficient to broaden the search early on to capture mor information about letters,\n// yu can do that like this...\nconsole.log('DISJUNCT ', myManager.disjunct().length, myManager.disjunct());\nconsole.log('POSSIBLES',myManager.rankedList().length, myManager.rankedList());\n\n*/","<script>\nimport { createEventDispatcher } from 'svelte';\nexport let word ='';\n\nconst dispatch = createEventDispatcher();\n// const letterStates = [\"green\", \"yellow\", \"grey\"];\n$: letters = [...word];\n$: valid = false;\nlet wordleResult = [{},{},{},{},{}];\n/* eg\n  [{ letter:'a', value:'yellow' },\n  { letter:'r', value:'yellow' },\n  { letter:'o', value:'yellow' },\n  { letter:'s', value:'grey' },\n  { letter:'e', value:'grey' }]\n*/\n\n\nfunction cycleLetterState(letter, i){\n  let states = [\"grey\",\"yellow\",\"green\"];\n  console.log('cycle', letter, i);\n  if(!wordleResult[i].letter){ \n    wordleResult[i] = { \n      letter,\n      value: 'grey'\n    }\n  }\n  let nextState = (states.findIndex(s=>s==wordleResult[i].value)+1)%states.length;\n  wordleResult[i].value = states[nextState]; \n  valid = wordleResult.reduce((acc, d)=>{\n    console.log(d);\n    return d.letter != undefined && acc\n  }, true);\n}\n\nfunction submit(){\n  dispatch('submit', wordleResult);\n  wordleResult = [{},{},{},{},{}];\n  word = '';\n  valid = false;\n}\n\n</script>\n<p>\n  {#each letters as letter, i }\n  <div class=\"letter {wordleResult[i] ? wordleResult[i].value:'not'}\" on:click={()=>cycleLetterState(String(letter).toLocaleLowerCase(), i)}>{letter}</div>\n  {/each}\n  {#if valid}\n  <button on:click={submit}>Refine suggestions</button>\n  {/if}\n  {#if letters.length > 0 }\n    <p class=\"instructions\">Click the letters to cycle through the colours</p>\n    <ul class=\"key\">\n      <li class=\"yellow swatch\">Yellow: right letter, wrong place</li>\n      <li class=\"green swatch\">Green: right letter, right place</li>\n      <li class=\"grey swatch\">Grey: wrong letter</li>\n    </ul>\n  {/if}\n</p>\n<style>\n  .letter{\n    border:1px solid black;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width:2rem;\n    height:2rem;\n    font-size: 1.6rem;\n    text-transform: uppercase;\n    font-weight: bold;\n    cursor: pointer;\n    user-select: none;\n  }\n  .instructions{\n    margin-bottom:0.1rem;\n  }\n  .swatch{\n    list-style: none;\n    padding-left:0px;\n  }\n  .key{ \n    margin-top: 0.1rem;\n    font-size: 0.7rem; \n    padding-left:0px;\n  }\n  .yellow{\n    background-color: yellow;\n  }\n  .grey{\n    background-color: grey;\n    color:white;\n  }\n  .green{\n    background-color: greenyellow;\n  }\n</style>","<script>\n  export let guess = [{}, {}, {}, {}, {}];\n</script>\n<div>\n  {#each guess as letter}\n    <span class={`letter ${letter.value}`}>{letter.letter}</span>\n  {/each}\n</div>\n<style>\n  .letter{\n    border:1px solid black;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width:2rem;\n    height:2rem;\n    font-size: 1.6rem;\n    text-transform: uppercase;\n    font-weight: bold;\n  }\n  .yellow{\n    background-color: yellow;\n  }\n  .grey{\n    background-color: grey;\n  }\n  .green{\n    background-color: greenyellow;\n  }\n</style>","module.exports = [\n  \"aahed\",\"aalii\",\"aargh\",\"aarti\",\"abaca\",\"abaci\",\"aback\",\"abacs\",\"abaft\",\"abaka\",\"abamp\",\"aband\",\"abase\",\"abash\",\"abask\",\"abate\",\"abaya\",\"abbas\",\"abbed\",\"abbes\",\"abbey\",\"abbot\",\"abcee\",\"abeam\",\"abear\",\"abele\",\"abers\",\"abets\",\"abhor\",\"abide\",\"abies\",\"abled\",\"abler\",\"ables\",\"ablet\",\"ablow\",\"abmho\",\"abode\",\"abohm\",\"aboil\",\"aboma\",\"aboon\",\"abord\",\"abore\",\"abort\",\"about\",\"above\",\"abram\",\"abray\",\"abrim\",\"abrin\",\"abris\",\"absey\",\"absit\",\"abuna\",\"abune\",\"abuse\",\"abuts\",\"abuzz\",\"abyes\",\"abysm\",\"abyss\",\"acais\",\"acari\",\"accas\",\"accoy\",\"acerb\",\"acers\",\"aceta\",\"achar\",\"ached\",\"aches\",\"achoo\",\"acids\",\"acidy\",\"acing\",\"acini\",\"ackee\",\"acker\",\"acmes\",\"acmic\",\"acned\",\"acnes\",\"acock\",\"acold\",\"acorn\",\"acred\",\"acres\",\"acrid\",\"acros\",\"acted\",\"actin\",\"acton\",\"actor\",\"acute\",\"acyls\",\"adage\",\"adapt\",\"adaws\",\"adays\",\"adbot\",\"addax\",\"added\",\"adder\",\"addio\",\"addle\",\"adeem\",\"adept\",\"adhan\",\"adieu\",\"adios\",\"adits\",\"adman\",\"admen\",\"admin\",\"admit\",\"admix\",\"adobe\",\"adobo\",\"adopt\",\"adore\",\"adorn\",\"adown\",\"adoze\",\"adrad\",\"adred\",\"adsum\",\"aduki\",\"adult\",\"adunc\",\"adust\",\"advew\",\"adyta\",\"adzed\",\"adzes\",\"aecia\",\"aedes\",\"aegis\",\"aeons\",\"aerie\",\"aeros\",\"aesir\",\"afald\",\"afara\",\"afars\",\"afear\",\"affix\",\"afire\",\"aflaj\",\"afoot\",\"afore\",\"afoul\",\"afrit\",\"afros\",\"after\",\"again\",\"agama\",\"agami\",\"agape\",\"agars\",\"agast\",\"agate\",\"agave\",\"agaze\",\"agene\",\"agent\",\"agers\",\"agger\",\"aggie\",\"aggri\",\"aggro\",\"aggry\",\"aghas\",\"agila\",\"agile\",\"aging\",\"agios\",\"agism\",\"agist\",\"agita\",\"aglee\",\"aglet\",\"agley\",\"agloo\",\"aglow\",\"aglus\",\"agmas\",\"agoge\",\"agone\",\"agons\",\"agony\",\"agood\",\"agora\",\"agree\",\"agria\",\"agrin\",\"agros\",\"agued\",\"agues\",\"aguna\",\"aguti\",\"ahead\",\"aheap\",\"ahent\",\"ahigh\",\"ahind\",\"ahing\",\"ahint\",\"ahold\",\"ahull\",\"ahuru\",\"aidas\",\"aided\",\"aider\",\"aides\",\"aidoi\",\"aidos\",\"aiery\",\"aigas\",\"aight\",\"ailed\",\"aimed\",\"aimer\",\"ainee\",\"ainga\",\"aioli\",\"aired\",\"airer\",\"airns\",\"airth\",\"airts\",\"aisle\",\"aitch\",\"aitus\",\"aiver\",\"aiyee\",\"aizle\",\"ajies\",\"ajiva\",\"ajuga\",\"ajwan\",\"akees\",\"akela\",\"akene\",\"aking\",\"akita\",\"akkas\",\"alaap\",\"alack\",\"alamo\",\"aland\",\"alane\",\"alang\",\"alans\",\"alant\",\"alapa\",\"alaps\",\"alarm\",\"alary\",\"alate\",\"alays\",\"albas\",\"albee\",\"album\",\"alcid\",\"alcos\",\"aldea\",\"alder\",\"aldol\",\"aleck\",\"alecs\",\"alefs\",\"aleft\",\"aleph\",\"alert\",\"alews\",\"aleye\",\"alfas\",\"algae\",\"algal\",\"algas\",\"algid\",\"algin\",\"algor\",\"algum\",\"alias\",\"alibi\",\"alien\",\"alifs\",\"align\",\"alike\",\"aline\",\"alist\",\"alive\",\"aliya\",\"alkie\",\"alkos\",\"alkyd\",\"alkyl\",\"allay\",\"allee\",\"allel\",\"alley\",\"allis\",\"allod\",\"allot\",\"allow\",\"alloy\",\"allyl\",\"almah\",\"almas\",\"almeh\",\"almes\",\"almud\",\"almug\",\"alods\",\"aloed\",\"aloes\",\"aloft\",\"aloha\",\"aloin\",\"alone\",\"along\",\"aloof\",\"aloos\",\"aloud\",\"alowe\",\"alpha\",\"altar\",\"alter\",\"altho\",\"altos\",\"alula\",\"alums\",\"alure\",\"alvar\",\"alway\",\"amahs\",\"amain\",\"amass\",\"amate\",\"amaut\",\"amaze\",\"amban\",\"amber\",\"ambit\",\"amble\",\"ambos\",\"ambry\",\"ameba\",\"ameer\",\"amend\",\"amene\",\"amens\",\"ament\",\"amias\",\"amice\",\"amici\",\"amide\",\"amido\",\"amids\",\"amies\",\"amiga\",\"amigo\",\"amine\",\"amino\",\"amins\",\"amirs\",\"amiss\",\"amity\",\"amlas\",\"amman\",\"ammon\",\"ammos\",\"amnia\",\"amnic\",\"amnio\",\"amoks\",\"amole\",\"among\",\"amort\",\"amour\",\"amove\",\"amowt\",\"amped\",\"ample\",\"amply\",\"ampul\",\"amrit\",\"amuck\",\"amuse\",\"amyls\",\"anana\",\"anata\",\"ancho\",\"ancle\",\"ancon\",\"andro\",\"anear\",\"anele\",\"anent\",\"angas\",\"angel\",\"anger\",\"angle\",\"anglo\",\"angry\",\"angst\",\"anigh\",\"anile\",\"anils\",\"anima\",\"anime\",\"animi\",\"anion\",\"anise\",\"anker\",\"ankhs\",\"ankle\",\"ankus\",\"anlas\",\"annal\",\"annas\",\"annat\",\"annex\",\"annoy\",\"annul\",\"anoas\",\"anode\",\"anole\",\"anomy\",\"ansae\",\"antae\",\"antar\",\"antas\",\"anted\",\"antes\",\"antic\",\"antis\",\"antra\",\"antre\",\"antsy\",\"anura\",\"anvil\",\"anyon\",\"aorta\",\"apace\",\"apage\",\"apaid\",\"apart\",\"apayd\",\"apays\",\"apeak\",\"apeek\",\"apers\",\"apert\",\"apery\",\"apgar\",\"aphid\",\"aphis\",\"apian\",\"aping\",\"apiol\",\"apish\",\"apism\",\"apnea\",\"apode\",\"apods\",\"apoop\",\"aport\",\"appal\",\"appay\",\"appel\",\"apple\",\"apply\",\"appro\",\"appui\",\"appuy\",\"apres\",\"apron\",\"apses\",\"apsis\",\"apsos\",\"apted\",\"apter\",\"aptly\",\"aquae\",\"aquas\",\"araba\",\"araks\",\"arame\",\"arars\",\"arbas\",\"arbor\",\"arced\",\"archi\",\"arcos\",\"arcus\",\"ardeb\",\"ardor\",\"ardri\",\"aread\",\"areae\",\"areal\",\"arear\",\"areas\",\"areca\",\"aredd\",\"arede\",\"arefy\",\"areic\",\"arena\",\"arene\",\"arepa\",\"arere\",\"arete\",\"arets\",\"arett\",\"argal\",\"argan\",\"argil\",\"argle\",\"argol\",\"argon\",\"argot\",\"argue\",\"argus\",\"arhat\",\"arias\",\"ariel\",\"ariki\",\"arils\",\"ariot\",\"arise\",\"arish\",\"arked\",\"arled\",\"arles\",\"armed\",\"armer\",\"armet\",\"armil\",\"armor\",\"arnas\",\"arnut\",\"aroba\",\"aroha\",\"aroid\",\"aroma\",\"arose\",\"arpas\",\"arpen\",\"arrah\",\"arras\",\"array\",\"arret\",\"arris\",\"arrow\",\"arroz\",\"arsed\",\"arses\",\"arsey\",\"arsis\",\"arson\",\"artal\",\"artel\",\"artic\",\"artis\",\"artsy\",\"aruhe\",\"arums\",\"arval\",\"arvee\",\"arvos\",\"aryls\",\"asana\",\"ascon\",\"ascot\",\"ascus\",\"asdic\",\"ashed\",\"ashen\",\"ashes\",\"ashet\",\"aside\",\"asked\",\"asker\",\"askew\",\"askoi\",\"askos\",\"aspen\",\"asper\",\"aspic\",\"aspie\",\"aspis\",\"aspro\",\"assai\",\"assam\",\"assay\",\"asses\",\"asset\",\"assez\",\"assot\",\"aster\",\"astir\",\"astun\",\"asura\",\"asway\",\"aswim\",\"asyla\",\"ataps\",\"ataxy\",\"atigi\",\"atilt\",\"atimy\",\"atlas\",\"atman\",\"atmas\",\"atmos\",\"atocs\",\"atoke\",\"atoks\",\"atoll\",\"atoms\",\"atomy\",\"atone\",\"atony\",\"atopy\",\"atria\",\"atrip\",\"attap\",\"attar\",\"attic\",\"atuas\",\"audad\",\"audio\",\"audit\",\"auger\",\"aught\",\"augur\",\"aulas\",\"aulic\",\"auloi\",\"aulos\",\"aumil\",\"aunes\",\"aunts\",\"aunty\",\"aurae\",\"aural\",\"aurar\",\"auras\",\"aurei\",\"aures\",\"auric\",\"auris\",\"aurum\",\"autos\",\"auxin\",\"avail\",\"avale\",\"avant\",\"avast\",\"avels\",\"avens\",\"avers\",\"avert\",\"avgas\",\"avian\",\"avine\",\"avion\",\"avise\",\"aviso\",\"avize\",\"avoid\",\"avows\",\"avyze\",\"await\",\"awake\",\"award\",\"aware\",\"awarn\",\"awash\",\"awato\",\"awave\",\"aways\",\"awdls\",\"aweel\",\"aweto\",\"awful\",\"awing\",\"awmry\",\"awned\",\"awner\",\"awoke\",\"awols\",\"awork\",\"axels\",\"axial\",\"axile\",\"axils\",\"axing\",\"axiom\",\"axion\",\"axite\",\"axled\",\"axles\",\"axman\",\"axmen\",\"axoid\",\"axone\",\"axons\",\"ayahs\",\"ayaya\",\"ayelp\",\"aygre\",\"ayins\",\"ayont\",\"ayres\",\"ayrie\",\"azans\",\"azide\",\"azido\",\"azine\",\"azlon\",\"azoic\",\"azole\",\"azons\",\"azote\",\"azoth\",\"azuki\",\"azure\",\"azurn\",\"azury\",\"azygy\",\"azyme\",\"azyms\",\"baaed\",\"baals\",\"babas\",\"babel\",\"babes\",\"babka\",\"baboo\",\"babul\",\"babus\",\"bacca\",\"bacco\",\"baccy\",\"bacha\",\"bachs\",\"backs\",\"bacon\",\"baddy\",\"badge\",\"badly\",\"baels\",\"baffs\",\"baffy\",\"bafts\",\"bagel\",\"baggy\",\"baghs\",\"bagie\",\"bahts\",\"bahus\",\"bahut\",\"bails\",\"bairn\",\"baisa\",\"baith\",\"baits\",\"baiza\",\"baize\",\"bajan\",\"bajra\",\"bajri\",\"bajus\",\"baked\",\"baken\",\"baker\",\"bakes\",\"bakra\",\"balas\",\"balds\",\"baldy\",\"baled\",\"baler\",\"bales\",\"balks\",\"balky\",\"balls\",\"bally\",\"balms\",\"balmy\",\"baloo\",\"balsa\",\"balti\",\"balun\",\"balus\",\"bambi\",\"banak\",\"banal\",\"banco\",\"bancs\",\"banda\",\"bandh\",\"bands\",\"bandy\",\"baned\",\"banes\",\"bangs\",\"bania\",\"banjo\",\"banks\",\"banns\",\"bants\",\"bantu\",\"banty\",\"banya\",\"bapus\",\"barbe\",\"barbs\",\"barby\",\"barca\",\"barde\",\"bardo\",\"bards\",\"bardy\",\"bared\",\"barer\",\"bares\",\"barfi\",\"barfs\",\"barge\",\"baric\",\"barks\",\"barky\",\"barms\",\"barmy\",\"barns\",\"barny\",\"baron\",\"barps\",\"barra\",\"barre\",\"barro\",\"barry\",\"barye\",\"basal\",\"basan\",\"based\",\"basen\",\"baser\",\"bases\",\"basho\",\"basic\",\"basij\",\"basil\",\"basin\",\"basis\",\"basks\",\"bason\",\"basse\",\"bassi\",\"basso\",\"bassy\",\"basta\",\"baste\",\"basti\",\"basto\",\"basts\",\"batch\",\"bated\",\"bates\",\"bathe\",\"baths\",\"batik\",\"baton\",\"batta\",\"batts\",\"battu\",\"batty\",\"bauds\",\"bauks\",\"baulk\",\"baurs\",\"bavin\",\"bawds\",\"bawdy\",\"bawks\",\"bawls\",\"bawns\",\"bawrs\",\"bawty\",\"bayed\",\"bayer\",\"bayes\",\"bayle\",\"bayou\",\"bayts\",\"bazar\",\"bazoo\",\"beach\",\"beads\",\"beady\",\"beaks\",\"beaky\",\"beals\",\"beams\",\"beamy\",\"beano\",\"beans\",\"beany\",\"beard\",\"beare\",\"bears\",\"beast\",\"beath\",\"beats\",\"beaty\",\"beaus\",\"beaut\",\"beaux\",\"bebop\",\"becap\",\"becke\",\"becks\",\"bedad\",\"bedel\",\"bedes\",\"bedew\",\"bedim\",\"bedye\",\"beech\",\"beedi\",\"beefs\",\"beefy\",\"beeps\",\"beers\",\"beery\",\"beets\",\"befit\",\"befog\",\"begad\",\"began\",\"begar\",\"begat\",\"begem\",\"beget\",\"begin\",\"begot\",\"begum\",\"begun\",\"beige\",\"beigy\",\"being\",\"beins\",\"bekah\",\"belah\",\"belar\",\"belay\",\"belch\",\"belee\",\"belga\",\"belie\",\"belle\",\"bells\",\"belly\",\"belon\",\"below\",\"belts\",\"bemad\",\"bemas\",\"bemix\",\"bemud\",\"bench\",\"bends\",\"bendy\",\"benes\",\"benet\",\"benga\",\"benis\",\"benne\",\"benni\",\"benny\",\"bento\",\"bents\",\"benty\",\"bepat\",\"beray\",\"beres\",\"beret\",\"bergs\",\"berko\",\"berks\",\"berme\",\"berms\",\"berob\",\"berry\",\"berth\",\"beryl\",\"besat\",\"besaw\",\"besee\",\"beses\",\"beset\",\"besit\",\"besom\",\"besot\",\"besti\",\"bests\",\"betas\",\"beted\",\"betel\",\"betes\",\"beths\",\"betid\",\"beton\",\"betta\",\"betty\",\"bevel\",\"bever\",\"bevor\",\"bevue\",\"bevvy\",\"bewet\",\"bewig\",\"bezel\",\"bezes\",\"bezil\",\"bezzy\",\"bhais\",\"bhaji\",\"bhang\",\"bhats\",\"bhels\",\"bhoot\",\"bhuna\",\"bhuts\",\"biach\",\"biali\",\"bialy\",\"bibbs\",\"bibes\",\"bible\",\"biccy\",\"bicep\",\"bices\",\"biddy\",\"bided\",\"bider\",\"bides\",\"bidet\",\"bidis\",\"bidon\",\"bield\",\"biers\",\"biffo\",\"biffs\",\"biffy\",\"bifid\",\"bigae\",\"biggs\",\"biggy\",\"bigha\",\"bight\",\"bigly\",\"bigos\",\"bigot\",\"bijou\",\"biked\",\"biker\",\"bikes\",\"bikie\",\"bilbo\",\"bilby\",\"biled\",\"biles\",\"bilge\",\"bilgy\",\"bilks\",\"bills\",\"billy\",\"bimah\",\"bimas\",\"bimbo\",\"binal\",\"bindi\",\"binds\",\"biner\",\"bines\",\"binge\",\"bingo\",\"bings\",\"bingy\",\"binit\",\"binks\",\"bints\",\"biogs\",\"biome\",\"biont\",\"biota\",\"biped\",\"bipod\",\"birch\",\"birds\",\"birks\",\"birle\",\"birls\",\"biros\",\"birrs\",\"birse\",\"birsy\",\"birth\",\"bises\",\"bisks\",\"bisom\",\"bison\",\"bitch\",\"biter\",\"bites\",\"bitos\",\"bitou\",\"bitsy\",\"bitte\",\"bitts\",\"bitty\",\"bivia\",\"bivvy\",\"bizes\",\"bizzo\",\"bizzy\",\"blabs\",\"black\",\"blade\",\"blads\",\"blady\",\"blaer\",\"blaes\",\"blaff\",\"blags\",\"blahs\",\"blain\",\"blame\",\"blams\",\"bland\",\"blank\",\"blare\",\"blart\",\"blase\",\"blash\",\"blast\",\"blate\",\"blats\",\"blatt\",\"blaud\",\"blawn\",\"blaws\",\"blays\",\"blaze\",\"bleak\",\"blear\",\"bleat\",\"blebs\",\"blech\",\"bleed\",\"bleep\",\"blees\",\"blend\",\"blent\",\"blert\",\"bless\",\"blest\",\"blets\",\"bleys\",\"blimp\",\"blimy\",\"blind\",\"bling\",\"blini\",\"blink\",\"blins\",\"bliny\",\"blips\",\"bliss\",\"blist\",\"blite\",\"blits\",\"blitz\",\"blive\",\"bloat\",\"blobs\",\"block\",\"blocs\",\"blogs\",\"bloke\",\"blond\",\"blood\",\"blook\",\"bloom\",\"bloop\",\"blore\",\"blots\",\"blown\",\"blows\",\"blowy\",\"blubs\",\"blude\",\"bluds\",\"bludy\",\"blued\",\"bluer\",\"blues\",\"bluet\",\"bluey\",\"bluff\",\"bluid\",\"blume\",\"blunk\",\"blunt\",\"blurb\",\"blurs\",\"blurt\",\"blush\",\"blype\",\"boabs\",\"boaks\",\"board\",\"boars\",\"boart\",\"boast\",\"boats\",\"bobac\",\"bobak\",\"bobas\",\"bobby\",\"bobol\",\"bobos\",\"bocca\",\"bocce\",\"bocci\",\"boche\",\"bocks\",\"boded\",\"bodes\",\"bodge\",\"bodhi\",\"bodle\",\"boeps\",\"boets\",\"boeuf\",\"boffo\",\"boffs\",\"bogan\",\"bogey\",\"boggy\",\"bogie\",\"bogle\",\"bogue\",\"bogus\",\"bohea\",\"bohos\",\"boils\",\"boing\",\"boink\",\"boite\",\"boked\",\"bokeh\",\"bokes\",\"bokos\",\"bolar\",\"bolas\",\"bolds\",\"boles\",\"bolix\",\"bolls\",\"bolos\",\"bolts\",\"bolus\",\"bomas\",\"bombe\",\"bombo\",\"bombs\",\"bonce\",\"bonds\",\"boned\",\"boner\",\"bones\",\"boney\",\"bongo\",\"bongs\",\"bonie\",\"bonks\",\"bonne\",\"bonny\",\"bonus\",\"bonza\",\"bonze\",\"booai\",\"booay\",\"boobs\",\"booby\",\"boody\",\"booed\",\"boofy\",\"boogy\",\"boohs\",\"books\",\"booky\",\"bools\",\"booms\",\"boomy\",\"boong\",\"boons\",\"boord\",\"boors\",\"boose\",\"boost\",\"booth\",\"boots\",\"booty\",\"booze\",\"boozy\",\"boppy\",\"borak\",\"boral\",\"boras\",\"borax\",\"borde\",\"bords\",\"bored\",\"boree\",\"borel\",\"borer\",\"bores\",\"borgo\",\"boric\",\"borks\",\"borms\",\"borna\",\"borne\",\"boron\",\"borts\",\"borty\",\"bortz\",\"bosie\",\"bosks\",\"bosky\",\"bosom\",\"boson\",\"bossy\",\"bosun\",\"botas\",\"botch\",\"botel\",\"botes\",\"bothy\",\"botte\",\"botts\",\"botty\",\"bouge\",\"bough\",\"bouks\",\"boule\",\"boult\",\"bound\",\"bouns\",\"bourd\",\"bourg\",\"bourn\",\"bouse\",\"bousy\",\"bouts\",\"bovid\",\"bowat\",\"bowed\",\"bowel\",\"bower\",\"bowes\",\"bowet\",\"bowie\",\"bowls\",\"bowne\",\"bowrs\",\"bowse\",\"boxed\",\"boxen\",\"boxer\",\"boxes\",\"boxla\",\"boxty\",\"boyar\",\"boyau\",\"boyed\",\"boyfs\",\"boygs\",\"boyla\",\"boyos\",\"boysy\",\"bozos\",\"braai\",\"brace\",\"brach\",\"brack\",\"bract\",\"brads\",\"braes\",\"brags\",\"braid\",\"brail\",\"brain\",\"brake\",\"braks\",\"braky\",\"brame\",\"brand\",\"brane\",\"brank\",\"brans\",\"brant\",\"brash\",\"brass\",\"brast\",\"brats\",\"brava\",\"brave\",\"bravi\",\"bravo\",\"brawl\",\"brawn\",\"braws\",\"braxy\",\"brays\",\"braza\",\"braze\",\"bread\",\"break\",\"bream\",\"brede\",\"breds\",\"breed\",\"breem\",\"breer\",\"brees\",\"breid\",\"breis\",\"breme\",\"brens\",\"brent\",\"brere\",\"brers\",\"breve\",\"brews\",\"breys\",\"briar\",\"bribe\",\"brick\",\"bride\",\"brief\",\"brier\",\"bries\",\"brigs\",\"briki\",\"briks\",\"brill\",\"brims\",\"brine\",\"bring\",\"brink\",\"brins\",\"briny\",\"brios\",\"brise\",\"brisk\",\"briss\",\"brith\",\"brits\",\"britt\",\"brize\",\"broad\",\"broch\",\"brock\",\"brods\",\"brogh\",\"brogs\",\"broil\",\"broke\",\"brome\",\"bromo\",\"bronc\",\"brond\",\"brood\",\"brook\",\"brool\",\"broom\",\"broos\",\"brose\",\"brosy\",\"broth\",\"brown\",\"brows\",\"brugh\",\"bruin\",\"bruit\",\"brule\",\"brume\",\"brung\",\"brunt\",\"brush\",\"brusk\",\"brust\",\"brute\",\"bruts\",\"buats\",\"buaze\",\"bubal\",\"bubas\",\"bubba\",\"bubbe\",\"bubby\",\"bubus\",\"buchu\",\"bucko\",\"bucks\",\"bucku\",\"budas\",\"buddy\",\"budge\",\"budis\",\"budos\",\"buffa\",\"buffe\",\"buffi\",\"buffo\",\"buffs\",\"buffy\",\"bufos\",\"bufty\",\"buggy\",\"bugle\",\"buhls\",\"buhrs\",\"buiks\",\"build\",\"built\",\"buist\",\"bukes\",\"bulbs\",\"bulge\",\"bulgy\",\"bulks\",\"bulky\",\"bulla\",\"bulls\",\"bully\",\"bulse\",\"bumbo\",\"bumfs\",\"bumph\",\"bumps\",\"bumpy\",\"bunas\",\"bunce\",\"bunch\",\"bunco\",\"bunde\",\"bundh\",\"bunds\",\"bundt\",\"bundu\",\"bundy\",\"bungs\",\"bungy\",\"bunia\",\"bunje\",\"bunjy\",\"bunko\",\"bunks\",\"bunns\",\"bunny\",\"bunts\",\"bunty\",\"bunya\",\"buoys\",\"buppy\",\"buran\",\"buras\",\"burbs\",\"burds\",\"buret\",\"burfi\",\"burgh\",\"burgs\",\"burin\",\"burka\",\"burke\",\"burks\",\"burls\",\"burly\",\"burns\",\"burnt\",\"buroo\",\"burps\",\"burqa\",\"burro\",\"burrs\",\"burry\",\"bursa\",\"burse\",\"burst\",\"busby\",\"bused\",\"buses\",\"bushy\",\"busks\",\"busky\",\"bussu\",\"busti\",\"busts\",\"busty\",\"butch\",\"buteo\",\"butes\",\"butle\",\"butoh\",\"butte\",\"butts\",\"butty\",\"butut\",\"butyl\",\"buxom\",\"buyer\",\"buzzy\",\"bwana\",\"bwazi\",\"byded\",\"bydes\",\"byked\",\"bykes\",\"bylaw\",\"byres\",\"byrls\",\"byssi\",\"bytes\",\"byway\",\"caaed\",\"cabal\",\"cabas\",\"cabby\",\"caber\",\"cabin\",\"cable\",\"cabob\",\"caboc\",\"cabre\",\"cacao\",\"cacas\",\"cache\",\"cacks\",\"cacky\",\"cacti\",\"caddy\",\"cadee\",\"cades\",\"cadet\",\"cadge\",\"cadgy\",\"cadie\",\"cadis\",\"cadre\",\"caeca\",\"caese\",\"cafes\",\"caffs\",\"caged\",\"cager\",\"cages\",\"cagey\",\"cagot\",\"cahow\",\"caids\",\"cains\",\"caird\",\"cairn\",\"cajon\",\"cajun\",\"caked\",\"cakes\",\"cakey\",\"calfs\",\"calid\",\"calif\",\"calix\",\"calks\",\"calla\",\"calls\",\"calms\",\"calmy\",\"calos\",\"calpa\",\"calps\",\"calve\",\"calyx\",\"caman\",\"camas\",\"camel\",\"cameo\",\"cames\",\"camis\",\"camos\",\"campi\",\"campo\",\"camps\",\"campy\",\"camus\",\"canal\",\"candy\",\"caned\",\"caneh\",\"caner\",\"canes\",\"cangs\",\"canid\",\"canna\",\"canns\",\"canny\",\"canoe\",\"canon\",\"canso\",\"canst\",\"canto\",\"cants\",\"canty\",\"capas\",\"caped\",\"caper\",\"capes\",\"capex\",\"caphs\",\"capiz\",\"caple\",\"capon\",\"capos\",\"capot\",\"capri\",\"capul\",\"caput\",\"carap\",\"carat\",\"carbo\",\"carbs\",\"carby\",\"cardi\",\"cards\",\"cardy\",\"cared\",\"carer\",\"cares\",\"caret\",\"carex\",\"cargo\",\"carks\",\"carle\",\"carls\",\"carns\",\"carny\",\"carob\",\"carol\",\"carom\",\"caron\",\"carpi\",\"carps\",\"carrs\",\"carry\",\"carse\",\"carta\",\"carte\",\"carts\",\"carve\",\"carvy\",\"casas\",\"casco\",\"cased\",\"cases\",\"casks\",\"casky\",\"caste\",\"casts\",\"casus\",\"catch\",\"cater\",\"cates\",\"catty\",\"cauda\",\"cauks\",\"cauld\",\"caulk\",\"cauls\",\"caums\",\"caups\",\"cauri\",\"causa\",\"cause\",\"cavas\",\"caved\",\"cavel\",\"caver\",\"caves\",\"cavie\",\"cavil\",\"cawed\",\"cawks\",\"caxon\",\"cease\",\"ceaze\",\"cebid\",\"cecal\",\"cecum\",\"cedar\",\"ceded\",\"ceder\",\"cedes\",\"cedis\",\"ceiba\",\"ceili\",\"ceils\",\"celeb\",\"cella\",\"celli\",\"cello\",\"cells\",\"celom\",\"celts\",\"cense\",\"cento\",\"cents\",\"centu\",\"ceorl\",\"cepes\",\"cerci\",\"cered\",\"ceres\",\"cerge\",\"ceria\",\"ceric\",\"cerne\",\"ceroc\",\"ceros\",\"certs\",\"certy\",\"cesse\",\"cesta\",\"cesti\",\"cetes\",\"cetyl\",\"cezve\",\"chace\",\"chack\",\"chaco\",\"chado\",\"chads\",\"chafe\",\"chaff\",\"chaft\",\"chain\",\"chair\",\"chais\",\"chalk\",\"chals\",\"champ\",\"chams\",\"chana\",\"chang\",\"chank\",\"chant\",\"chaos\",\"chape\",\"chaps\",\"chapt\",\"chara\",\"chard\",\"chare\",\"chark\",\"charm\",\"charr\",\"chars\",\"chart\",\"chary\",\"chase\",\"chasm\",\"chats\",\"chave\",\"chavs\",\"chawk\",\"chaws\",\"chaya\",\"chays\",\"cheap\",\"cheat\",\"check\",\"cheek\",\"cheep\",\"cheer\",\"chefs\",\"cheka\",\"chela\",\"chelp\",\"chemo\",\"chems\",\"chere\",\"chert\",\"chess\",\"chest\",\"cheth\",\"chevy\",\"chews\",\"chewy\",\"chiao\",\"chias\",\"chibs\",\"chica\",\"chich\",\"chick\",\"chico\",\"chics\",\"chide\",\"chief\",\"chiel\",\"chiks\",\"child\",\"chile\",\"chili\",\"chill\",\"chimb\",\"chime\",\"chimo\",\"chimp\",\"china\",\"chine\",\"ching\",\"chink\",\"chino\",\"chins\",\"chips\",\"chirk\",\"chirl\",\"chirm\",\"chiro\",\"chirp\",\"chirr\",\"chirt\",\"chiru\",\"chits\",\"chive\",\"chivs\",\"chivy\",\"chizz\",\"chock\",\"choco\",\"chocs\",\"chode\",\"chogs\",\"choil\",\"choir\",\"choke\",\"choko\",\"choky\",\"chola\",\"choli\",\"cholo\",\"chomp\",\"chons\",\"choof\",\"chook\",\"choom\",\"choon\",\"chops\",\"chord\",\"chore\",\"chose\",\"chota\",\"chott\",\"chout\",\"choux\",\"chowk\",\"chows\",\"chubs\",\"chuck\",\"chufa\",\"chuff\",\"chugs\",\"chump\",\"chums\",\"chunk\",\"churl\",\"churn\",\"churr\",\"chuse\",\"chute\",\"chuts\",\"chyle\",\"chyme\",\"chynd\",\"cibol\",\"cided\",\"cider\",\"cides\",\"ciels\",\"cigar\",\"ciggy\",\"cilia\",\"cills\",\"cimar\",\"cimex\",\"cinch\",\"cinct\",\"cines\",\"cinqs\",\"cions\",\"cippi\",\"circa\",\"circs\",\"cires\",\"cirls\",\"cirri\",\"cisco\",\"cissy\",\"cists\",\"cital\",\"cited\",\"citer\",\"cites\",\"cives\",\"civet\",\"civic\",\"civie\",\"civil\",\"civvy\",\"clach\",\"clack\",\"clade\",\"clads\",\"claes\",\"clags\",\"claim\",\"clame\",\"clamp\",\"clams\",\"clang\",\"clank\",\"clans\",\"claps\",\"clapt\",\"claro\",\"clart\",\"clary\",\"clash\",\"clasp\",\"class\",\"clast\",\"clats\",\"claut\",\"clave\",\"clavi\",\"claws\",\"clays\",\"clean\",\"clear\",\"cleat\",\"cleck\",\"cleek\",\"cleep\",\"clefs\",\"cleft\",\"clegs\",\"cleik\",\"clems\",\"clepe\",\"clept\",\"clerk\",\"cleve\",\"clews\",\"click\",\"clied\",\"clies\",\"cliff\",\"clift\",\"climb\",\"clime\",\"cline\",\"cling\",\"clink\",\"clint\",\"clipe\",\"clips\",\"clipt\",\"clits\",\"cloak\",\"cloam\",\"clock\",\"clods\",\"cloff\",\"clogs\",\"cloke\",\"clomb\",\"clomp\",\"clone\",\"clonk\",\"clons\",\"cloop\",\"cloot\",\"clops\",\"close\",\"clote\",\"cloth\",\"clots\",\"cloud\",\"clour\",\"clous\",\"clout\",\"clove\",\"clown\",\"clows\",\"cloye\",\"cloys\",\"cloze\",\"clubs\",\"cluck\",\"clued\",\"clues\",\"cluey\",\"clump\",\"clung\",\"clunk\",\"clype\",\"cnida\",\"coach\",\"coact\",\"coady\",\"coala\",\"coals\",\"coaly\",\"coapt\",\"coarb\",\"coast\",\"coate\",\"coati\",\"coats\",\"cobbs\",\"cobby\",\"cobia\",\"coble\",\"cobra\",\"cobza\",\"cocas\",\"cocci\",\"cocco\",\"cocks\",\"cocky\",\"cocoa\",\"cocos\",\"codas\",\"codec\",\"coded\",\"coden\",\"coder\",\"codes\",\"codex\",\"codon\",\"coeds\",\"coffs\",\"cogie\",\"cogon\",\"cogue\",\"cohab\",\"cohen\",\"cohoe\",\"cohog\",\"cohos\",\"coifs\",\"coign\",\"coils\",\"coins\",\"coirs\",\"coits\",\"coked\",\"cokes\",\"colas\",\"colby\",\"colds\",\"coled\",\"coles\",\"coley\",\"colic\",\"colin\",\"colls\",\"colly\",\"colog\",\"colon\",\"color\",\"colts\",\"colza\",\"comae\",\"comal\",\"comas\",\"combe\",\"combi\",\"combo\",\"combs\",\"comby\",\"comer\",\"comes\",\"comet\",\"comfy\",\"comic\",\"comix\",\"comma\",\"commo\",\"comms\",\"commy\",\"compo\",\"comps\",\"compt\",\"comte\",\"comus\",\"conch\",\"condo\",\"coned\",\"cones\",\"coney\",\"confs\",\"conga\",\"conge\",\"congo\",\"conia\",\"conic\",\"conin\",\"conks\",\"conky\",\"conne\",\"conns\",\"conte\",\"conto\",\"conus\",\"convo\",\"cooch\",\"cooed\",\"cooee\",\"cooer\",\"cooey\",\"coofs\",\"cooks\",\"cooky\",\"cools\",\"cooly\",\"coomb\",\"cooms\",\"coomy\",\"coons\",\"coops\",\"coopt\",\"coost\",\"coots\",\"cooze\",\"copal\",\"copay\",\"coped\",\"copen\",\"coper\",\"copes\",\"coppy\",\"copra\",\"copse\",\"copsy\",\"coqui\",\"coral\",\"coram\",\"corbe\",\"corby\",\"cords\",\"cored\",\"corer\",\"cores\",\"corey\",\"corgi\",\"coria\",\"corks\",\"corky\",\"corms\",\"corni\",\"corno\",\"corns\",\"cornu\",\"corny\",\"corps\",\"corse\",\"corso\",\"cosec\",\"cosed\",\"coses\",\"coset\",\"cosey\",\"cosie\",\"costa\",\"coste\",\"costs\",\"cotan\",\"coted\",\"cotes\",\"coths\",\"cotta\",\"cotts\",\"couch\",\"coude\",\"cough\",\"could\",\"count\",\"coupe\",\"coups\",\"courb\",\"courd\",\"coure\",\"cours\",\"court\",\"couta\",\"couth\",\"coved\",\"coven\",\"cover\",\"coves\",\"covet\",\"covey\",\"covin\",\"cowal\",\"cowan\",\"cowed\",\"cower\",\"cowks\",\"cowls\",\"cowps\",\"cowry\",\"coxae\",\"coxal\",\"coxed\",\"coxes\",\"coxib\",\"coyau\",\"coyed\",\"coyer\",\"coyly\",\"coypu\",\"cozed\",\"cozen\",\"cozes\",\"cozey\",\"cozie\",\"craal\",\"crabs\",\"crack\",\"craft\",\"crags\",\"craic\",\"craig\",\"crake\",\"crame\",\"cramp\",\"crams\",\"crane\",\"crank\",\"crans\",\"crape\",\"craps\",\"crapy\",\"crare\",\"crash\",\"crass\",\"crate\",\"crave\",\"crawl\",\"craws\",\"crays\",\"craze\",\"crazy\",\"creak\",\"cream\",\"credo\",\"creds\",\"creed\",\"creek\",\"creel\",\"creep\",\"crees\",\"creme\",\"crems\",\"crena\",\"crepe\",\"creps\",\"crept\",\"crepy\",\"cress\",\"crest\",\"crewe\",\"crews\",\"crias\",\"cribs\",\"crick\",\"cried\",\"crier\",\"cries\",\"crime\",\"crimp\",\"crims\",\"crine\",\"crios\",\"cripe\",\"crips\",\"crise\",\"crisp\",\"crith\",\"crits\",\"croak\",\"croci\",\"crock\",\"crocs\",\"croft\",\"crogs\",\"cromb\",\"crome\",\"crone\",\"cronk\",\"crons\",\"crony\",\"crook\",\"crool\",\"croon\",\"crops\",\"crore\",\"cross\",\"crost\",\"croup\",\"crout\",\"crowd\",\"crown\",\"crows\",\"croze\",\"cruck\",\"crude\",\"crudo\",\"cruds\",\"crudy\",\"cruel\",\"crues\",\"cruet\",\"cruft\",\"crumb\",\"crump\",\"crunk\",\"cruor\",\"crura\",\"cruse\",\"crush\",\"crust\",\"crusy\",\"cruve\",\"crwth\",\"cryer\",\"crypt\",\"ctene\",\"cubby\",\"cubeb\",\"cubed\",\"cuber\",\"cubes\",\"cubic\",\"cubit\",\"cuddy\",\"cuffo\",\"cuffs\",\"cuifs\",\"cuing\",\"cuish\",\"cuits\",\"cukes\",\"culch\",\"culet\",\"culex\",\"culls\",\"cully\",\"culms\",\"culpa\",\"culti\",\"cults\",\"culty\",\"cumec\",\"cumin\",\"cundy\",\"cunei\",\"cunit\",\"cunts\",\"cupel\",\"cupid\",\"cuppa\",\"cuppy\",\"curat\",\"curbs\",\"curch\",\"curds\",\"curdy\",\"cured\",\"curer\",\"cures\",\"curet\",\"curfs\",\"curia\",\"curie\",\"curio\",\"curli\",\"curls\",\"curly\",\"curns\",\"curny\",\"currs\",\"curry\",\"curse\",\"cursi\",\"curst\",\"curve\",\"curvy\",\"cusec\",\"cushy\",\"cusks\",\"cusps\",\"cuspy\",\"cusso\",\"cusum\",\"cutch\",\"cuter\",\"cutes\",\"cutey\",\"cutie\",\"cutin\",\"cutis\",\"cutto\",\"cutty\",\"cutup\",\"cuvee\",\"cuzes\",\"cwtch\",\"cyano\",\"cyans\",\"cyber\",\"cycad\",\"cycas\",\"cycle\",\"cyclo\",\"cyder\",\"cylix\",\"cymae\",\"cymar\",\"cymas\",\"cymes\",\"cymol\",\"cynic\",\"cysts\",\"cytes\",\"cyton\",\"czars\",\"daals\",\"dabba\",\"daces\",\"dacha\",\"dacks\",\"dadah\",\"dadas\",\"daddy\",\"dados\",\"daffs\",\"daffy\",\"dagga\",\"daggy\",\"dagos\",\"dahls\",\"daiko\",\"daily\",\"daine\",\"daint\",\"dairy\",\"daisy\",\"daker\",\"daled\",\"dales\",\"dalis\",\"dalle\",\"dally\",\"dalts\",\"daman\",\"damar\",\"dames\",\"damme\",\"damns\",\"damps\",\"dampy\",\"dance\",\"dancy\",\"dandy\",\"dangs\",\"danio\",\"danks\",\"danny\",\"dants\",\"daraf\",\"darbs\",\"darcy\",\"dared\",\"darer\",\"dares\",\"darga\",\"dargs\",\"daric\",\"daris\",\"darks\",\"darky\",\"darns\",\"darre\",\"darts\",\"darzi\",\"dashi\",\"dashy\",\"datal\",\"dated\",\"dater\",\"dates\",\"datos\",\"datto\",\"datum\",\"daube\",\"daubs\",\"dauby\",\"dauds\",\"dault\",\"daunt\",\"daurs\",\"dauts\",\"daven\",\"davit\",\"dawah\",\"dawds\",\"dawed\",\"dawen\",\"dawks\",\"dawns\",\"dawts\",\"dayan\",\"daych\",\"daynt\",\"dazed\",\"dazer\",\"dazes\",\"deads\",\"deair\",\"deals\",\"dealt\",\"deans\",\"deare\",\"dearn\",\"dears\",\"deary\",\"deash\",\"death\",\"deave\",\"deaws\",\"deawy\",\"debag\",\"debar\",\"debby\",\"debel\",\"debes\",\"debit\",\"debts\",\"debud\",\"debug\",\"debur\",\"debus\",\"debut\",\"debye\",\"decad\",\"decaf\",\"decal\",\"decan\",\"decay\",\"decko\",\"decks\",\"decor\",\"decos\",\"decoy\",\"decry\",\"dedal\",\"deeds\",\"deedy\",\"deely\",\"deems\",\"deens\",\"deeps\",\"deere\",\"deers\",\"deets\",\"deeve\",\"deevs\",\"defat\",\"defer\",\"deffo\",\"defis\",\"defog\",\"degas\",\"degum\",\"degus\",\"deice\",\"deids\",\"deify\",\"deign\",\"deils\",\"deism\",\"deist\",\"deity\",\"deked\",\"dekes\",\"dekko\",\"delay\",\"deled\",\"deles\",\"delfs\",\"delft\",\"delis\",\"dells\",\"delly\",\"delos\",\"delph\",\"delta\",\"delts\",\"delve\",\"deman\",\"demes\",\"demic\",\"demit\",\"demob\",\"demoi\",\"demon\",\"demos\",\"dempt\",\"demur\",\"denar\",\"denay\",\"dench\",\"denes\",\"denet\",\"denim\",\"denis\",\"dense\",\"dents\",\"deoxy\",\"depot\",\"depth\",\"derat\",\"deray\",\"derby\",\"dered\",\"deres\",\"derig\",\"derma\",\"derms\",\"derns\",\"derny\",\"deros\",\"derro\",\"derry\",\"derth\",\"dervs\",\"desex\",\"deshi\",\"desis\",\"desks\",\"desse\",\"deter\",\"detox\",\"deuce\",\"devas\",\"devel\",\"devil\",\"devis\",\"devon\",\"devos\",\"devot\",\"dewan\",\"dewar\",\"dewax\",\"dewed\",\"dexes\",\"dexie\",\"dhaba\",\"dhaks\",\"dhals\",\"dhikr\",\"dhobi\",\"dhole\",\"dholl\",\"dhols\",\"dhoti\",\"dhows\",\"dhuti\",\"diact\",\"dials\",\"diane\",\"diary\",\"diazo\",\"dibbs\",\"diced\",\"dicer\",\"dices\",\"dicey\",\"dicht\",\"dicks\",\"dicky\",\"dicot\",\"dicta\",\"dicts\",\"dicty\",\"diddy\",\"didie\",\"didos\",\"didst\",\"diebs\",\"diels\",\"diene\",\"diets\",\"diffs\",\"dight\",\"digit\",\"dikas\",\"diked\",\"diker\",\"dikes\",\"dikey\",\"dildo\",\"dilli\",\"dills\",\"dilly\",\"dimbo\",\"dimer\",\"dimes\",\"dimly\",\"dimps\",\"dinar\",\"dined\",\"diner\",\"dines\",\"dinge\",\"dingo\",\"dings\",\"dingy\",\"dinic\",\"dinks\",\"dinky\",\"dinna\",\"dinos\",\"dints\",\"diode\",\"diols\",\"diota\",\"dippy\",\"dipso\",\"diram\",\"direr\",\"dirge\",\"dirke\",\"dirks\",\"dirls\",\"dirts\",\"dirty\",\"disas\",\"disci\",\"disco\",\"discs\",\"dishy\",\"disks\",\"disme\",\"dital\",\"ditas\",\"ditch\",\"dited\",\"dites\",\"ditsy\",\"ditto\",\"ditts\",\"ditty\",\"ditzy\",\"divan\",\"divas\",\"dived\",\"diver\",\"dives\",\"divis\",\"divna\",\"divos\",\"divot\",\"divvy\",\"diwan\",\"dixie\",\"dixit\",\"diyas\",\"dizen\",\"dizzy\",\"djinn\",\"djins\",\"doabs\",\"doats\",\"dobby\",\"dobes\",\"dobie\",\"dobla\",\"dobra\",\"dobro\",\"docht\",\"docks\",\"docos\",\"docus\",\"doddy\",\"dodge\",\"dodgy\",\"dodos\",\"doeks\",\"doers\",\"doest\",\"doeth\",\"doffs\",\"dogan\",\"doges\",\"dogey\",\"doggo\",\"doggy\",\"dogie\",\"dogma\",\"dohyo\",\"doilt\",\"doily\",\"doing\",\"doits\",\"dojos\",\"dolce\",\"dolci\",\"doled\",\"doles\",\"dolia\",\"dolls\",\"dolly\",\"dolma\",\"dolor\",\"dolos\",\"dolts\",\"domal\",\"domed\",\"domes\",\"domic\",\"donah\",\"donas\",\"donee\",\"doner\",\"donga\",\"dongs\",\"donko\",\"donna\",\"donne\",\"donny\",\"donor\",\"donsy\",\"donut\",\"doobs\",\"dooce\",\"doody\",\"dooks\",\"doole\",\"dools\",\"dooly\",\"dooms\",\"doomy\",\"doona\",\"doorn\",\"doors\",\"doozy\",\"dopas\",\"doped\",\"doper\",\"dopes\",\"dopey\",\"dorad\",\"dorba\",\"dorbs\",\"doree\",\"dores\",\"doric\",\"doris\",\"dorks\",\"dorky\",\"dorms\",\"dormy\",\"dorps\",\"dorrs\",\"dorsa\",\"dorse\",\"dorts\",\"dorty\",\"dosai\",\"dosas\",\"dosed\",\"doseh\",\"doser\",\"doses\",\"dosha\",\"dotal\",\"doted\",\"doter\",\"dotes\",\"dotty\",\"douar\",\"doubt\",\"douce\",\"doucs\",\"dough\",\"douks\",\"doula\",\"douma\",\"doums\",\"doups\",\"doura\",\"douse\",\"douts\",\"doved\",\"doven\",\"dover\",\"doves\",\"dovie\",\"dowar\",\"dowds\",\"dowdy\",\"dowed\",\"dowel\",\"dower\",\"dowie\",\"dowle\",\"dowls\",\"dowly\",\"downa\",\"downs\",\"downy\",\"dowps\",\"dowry\",\"dowse\",\"dowts\",\"doxed\",\"doxes\",\"doxie\",\"doyen\",\"doyly\",\"dozed\",\"dozen\",\"dozer\",\"dozes\",\"drabs\",\"drack\",\"draco\",\"draff\",\"draft\",\"drags\",\"drail\",\"drain\",\"drake\",\"drama\",\"drams\",\"drank\",\"drant\",\"drape\",\"draps\",\"drats\",\"drave\",\"drawl\",\"drawn\",\"draws\",\"drays\",\"dread\",\"dream\",\"drear\",\"dreck\",\"dreed\",\"dreer\",\"drees\",\"dregs\",\"dreks\",\"drent\",\"drere\",\"dress\",\"drest\",\"dreys\",\"dribs\",\"drice\",\"dried\",\"drier\",\"dries\",\"drift\",\"drill\",\"drily\",\"drink\",\"drips\",\"dript\",\"drive\",\"droid\",\"droil\",\"droit\",\"droke\",\"drole\",\"droll\",\"drome\",\"drone\",\"drony\",\"droob\",\"droog\",\"drook\",\"drool\",\"droop\",\"drops\",\"dropt\",\"dross\",\"drouk\",\"drove\",\"drown\",\"drows\",\"drubs\",\"drugs\",\"druid\",\"drums\",\"drunk\",\"drupe\",\"druse\",\"drusy\",\"druxy\",\"dryad\",\"dryas\",\"dryer\",\"dryly\",\"dsobo\",\"dsomo\",\"duads\",\"duals\",\"duans\",\"duars\",\"dubbo\",\"ducal\",\"ducat\",\"duces\",\"duchy\",\"ducks\",\"ducky\",\"ducts\",\"duddy\",\"duded\",\"dudes\",\"duels\",\"duets\",\"duett\",\"duffs\",\"dufus\",\"duing\",\"duits\",\"dukas\",\"duked\",\"dukes\",\"dukka\",\"dulce\",\"dules\",\"dulia\",\"dulls\",\"dully\",\"dulse\",\"dumas\",\"dumbo\",\"dumbs\",\"dumka\",\"dumky\",\"dummy\",\"dumps\",\"dumpy\",\"dunam\",\"dunce\",\"dunch\",\"dunes\",\"dungs\",\"dungy\",\"dunks\",\"dunno\",\"dunny\",\"dunsh\",\"dunts\",\"duomi\",\"duomo\",\"duped\",\"duper\",\"dupes\",\"duple\",\"duply\",\"duppy\",\"dural\",\"duras\",\"dured\",\"dures\",\"durgy\",\"durns\",\"duroc\",\"duros\",\"duroy\",\"durra\",\"durrs\",\"durry\",\"durst\",\"durum\",\"durzi\",\"dusks\",\"dusky\",\"dusts\",\"dusty\",\"dutch\",\"duvet\",\"duxes\",\"dwaal\",\"dwale\",\"dwalm\",\"dwams\",\"dwang\",\"dwarf\",\"dwaum\",\"dweeb\",\"dwell\",\"dwelt\",\"dwile\",\"dwine\",\"dyads\",\"dyers\",\"dying\",\"dyked\",\"dykes\",\"dykey\",\"dykon\",\"dynel\",\"dynes\",\"dzhos\",\"eager\",\"eagle\",\"eagre\",\"ealed\",\"eales\",\"eaned\",\"eards\",\"eared\",\"earls\",\"early\",\"earns\",\"earnt\",\"earst\",\"earth\",\"eased\",\"easel\",\"easer\",\"eases\",\"easle\",\"easts\",\"eaten\",\"eater\",\"eathe\",\"eaved\",\"eaves\",\"ebbed\",\"ebbet\",\"ebons\",\"ebony\",\"ebook\",\"ecads\",\"eched\",\"eches\",\"echos\",\"eclat\",\"ecrus\",\"edema\",\"edged\",\"edger\",\"edges\",\"edict\",\"edify\",\"edile\",\"edits\",\"educe\",\"educt\",\"eejit\",\"eensy\",\"eerie\",\"eeven\",\"eevns\",\"effed\",\"egads\",\"egers\",\"egest\",\"eggar\",\"egged\",\"egger\",\"egmas\",\"egret\",\"ehing\",\"eider\",\"eidos\",\"eight\",\"eigne\",\"eiked\",\"eikon\",\"eilds\",\"eisel\",\"eject\",\"ejido\",\"eking\",\"ekkas\",\"elain\",\"eland\",\"elans\",\"elate\",\"elbow\",\"elchi\",\"elder\",\"eldin\",\"elect\",\"elegy\",\"elemi\",\"elfed\",\"elfin\",\"eliad\",\"elide\",\"elint\",\"elite\",\"elmen\",\"eloge\",\"elogy\",\"eloin\",\"elope\",\"elops\",\"elpee\",\"elsin\",\"elude\",\"elute\",\"elvan\",\"elven\",\"elver\",\"elves\",\"emacs\",\"email\",\"embar\",\"embay\",\"embed\",\"ember\",\"embog\",\"embow\",\"embox\",\"embus\",\"emcee\",\"emeer\",\"emend\",\"emerg\",\"emery\",\"emeus\",\"emics\",\"emirs\",\"emits\",\"emmas\",\"emmer\",\"emmet\",\"emmew\",\"emmys\",\"emoji\",\"emong\",\"emote\",\"emove\",\"empts\",\"empty\",\"emule\",\"emure\",\"emyde\",\"emyds\",\"enact\",\"enarm\",\"enate\",\"ended\",\"ender\",\"endew\",\"endow\",\"endue\",\"enema\",\"enemy\",\"enews\",\"enfix\",\"eniac\",\"enjoy\",\"enlit\",\"enmew\",\"ennog\",\"ennui\",\"enoki\",\"enols\",\"enorm\",\"enows\",\"enrol\",\"ensew\",\"ensky\",\"ensue\",\"enter\",\"entia\",\"entry\",\"enure\",\"enurn\",\"envoi\",\"envoy\",\"enzym\",\"eorls\",\"eosin\",\"epact\",\"epees\",\"ephah\",\"ephas\",\"ephod\",\"ephor\",\"epics\",\"epoch\",\"epode\",\"epopt\",\"epoxy\",\"epris\",\"equal\",\"eques\",\"equid\",\"equip\",\"erase\",\"erbia\",\"erect\",\"erevs\",\"ergon\",\"ergos\",\"ergot\",\"erhus\",\"erica\",\"erick\",\"erics\",\"ering\",\"erned\",\"ernes\",\"erode\",\"erose\",\"erred\",\"error\",\"erses\",\"eruct\",\"erugo\",\"erupt\",\"eruvs\",\"erven\",\"ervil\",\"escar\",\"escot\",\"esile\",\"eskar\",\"esker\",\"esnes\",\"essay\",\"esses\",\"ester\",\"estoc\",\"estop\",\"estro\",\"etage\",\"etape\",\"etats\",\"etens\",\"ethal\",\"ether\",\"ethic\",\"ethne\",\"ethos\",\"ethyl\",\"etics\",\"etnas\",\"ettin\",\"ettle\",\"etude\",\"etuis\",\"etwee\",\"etyma\",\"eughs\",\"euked\",\"eupad\",\"euros\",\"eusol\",\"evade\",\"evens\",\"event\",\"evert\",\"every\",\"evets\",\"evhoe\",\"evict\",\"evils\",\"evite\",\"evohe\",\"evoke\",\"ewers\",\"ewest\",\"ewhow\",\"ewked\",\"exact\",\"exalt\",\"exams\",\"excel\",\"exeat\",\"execs\",\"exeem\",\"exeme\",\"exert\",\"exfil\",\"exies\",\"exile\",\"exine\",\"exing\",\"exist\",\"exits\",\"exode\",\"exome\",\"exons\",\"expat\",\"expel\",\"expos\",\"extol\",\"extra\",\"exude\",\"exuls\",\"exult\",\"exurb\",\"eyass\",\"eyers\",\"eying\",\"eyots\",\"eyras\",\"eyres\",\"eyrie\",\"eyrir\",\"ezine\",\"fabby\",\"fable\",\"faced\",\"facer\",\"faces\",\"facet\",\"facia\",\"facta\",\"facts\",\"faddy\",\"faded\",\"fader\",\"fades\",\"fadge\",\"fados\",\"faena\",\"faery\",\"faffs\",\"faffy\",\"faggy\",\"fagin\",\"fagot\",\"faiks\",\"fails\",\"faine\",\"fains\",\"faint\",\"fairs\",\"fairy\",\"faith\",\"faked\",\"faker\",\"fakes\",\"fakey\",\"fakie\",\"fakir\",\"falaj\",\"falls\",\"false\",\"famed\",\"fames\",\"fanal\",\"fancy\",\"fands\",\"fanes\",\"fanga\",\"fango\",\"fangs\",\"fanks\",\"fanny\",\"fanon\",\"fanos\",\"fanum\",\"faqir\",\"farad\",\"farce\",\"farci\",\"farcy\",\"fards\",\"fared\",\"farer\",\"fares\",\"farle\",\"farls\",\"farms\",\"faros\",\"farro\",\"farse\",\"farts\",\"fasci\",\"fasti\",\"fasts\",\"fatal\",\"fated\",\"fates\",\"fatly\",\"fatso\",\"fatty\",\"fatwa\",\"faugh\",\"fauld\",\"fault\",\"fauna\",\"fauns\",\"faurd\",\"fauts\",\"fauve\",\"favas\",\"favel\",\"faver\",\"faves\",\"favor\",\"favus\",\"fawns\",\"fawny\",\"faxed\",\"faxes\",\"fayed\",\"fayer\",\"fayne\",\"fayre\",\"fazed\",\"fazes\",\"feals\",\"feare\",\"fears\",\"feart\",\"fease\",\"feast\",\"feats\",\"feaze\",\"fecal\",\"feces\",\"fecht\",\"fecit\",\"fecks\",\"fedex\",\"feebs\",\"feeds\",\"feels\",\"feens\",\"feers\",\"feese\",\"feeze\",\"fehme\",\"feign\",\"feint\",\"feist\",\"felch\",\"felid\",\"fella\",\"fells\",\"felly\",\"felon\",\"felts\",\"felty\",\"femal\",\"femes\",\"femme\",\"femmy\",\"femur\",\"fence\",\"fends\",\"fendy\",\"fenis\",\"fenks\",\"fenny\",\"fents\",\"feods\",\"feoff\",\"feral\",\"ferer\",\"feres\",\"feria\",\"ferly\",\"fermi\",\"ferms\",\"ferns\",\"ferny\",\"ferry\",\"fesse\",\"festa\",\"fests\",\"festy\",\"fetal\",\"fetas\",\"fetch\",\"feted\",\"fetes\",\"fetid\",\"fetor\",\"fetta\",\"fetts\",\"fetus\",\"fetwa\",\"feuar\",\"feuds\",\"feued\",\"fever\",\"fewer\",\"feyed\",\"feyer\",\"feyly\",\"fezes\",\"fezzy\",\"fiars\",\"fiats\",\"fiber\",\"fibre\",\"fibro\",\"fices\",\"fiche\",\"fichu\",\"ficin\",\"ficos\",\"ficus\",\"fides\",\"fidge\",\"fidos\",\"fiefs\",\"field\",\"fiend\",\"fient\",\"fiere\",\"fiers\",\"fiery\",\"fiest\",\"fifed\",\"fifer\",\"fifes\",\"fifis\",\"fifth\",\"fifty\",\"figgy\",\"fight\",\"figos\",\"fiked\",\"fikes\",\"filar\",\"filch\",\"filed\",\"filer\",\"files\",\"filet\",\"filii\",\"filks\",\"fille\",\"fillo\",\"fills\",\"filly\",\"filmi\",\"films\",\"filmy\",\"filos\",\"filth\",\"filum\",\"final\",\"finca\",\"finch\",\"finds\",\"fined\",\"finer\",\"fines\",\"finis\",\"finks\",\"finny\",\"finos\",\"fiord\",\"fiqhs\",\"fique\",\"fired\",\"firer\",\"fires\",\"firie\",\"firks\",\"firms\",\"firns\",\"firry\",\"first\",\"firth\",\"fiscs\",\"fishy\",\"fisks\",\"fists\",\"fisty\",\"fitch\",\"fitly\",\"fitna\",\"fitte\",\"fitts\",\"fiver\",\"fives\",\"fixed\",\"fixer\",\"fixes\",\"fixit\",\"fizzy\",\"fjeld\",\"fjord\",\"flabs\",\"flack\",\"flaff\",\"flags\",\"flail\",\"flair\",\"flake\",\"flaks\",\"flaky\",\"flame\",\"flamm\",\"flams\",\"flamy\",\"flane\",\"flank\",\"flans\",\"flaps\",\"flare\",\"flary\",\"flash\",\"flask\",\"flats\",\"flava\",\"flawn\",\"flaws\",\"flawy\",\"flaxy\",\"flays\",\"fleam\",\"fleas\",\"fleck\",\"fleek\",\"fleer\",\"flees\",\"fleet\",\"flegs\",\"fleme\",\"flesh\",\"fleur\",\"flews\",\"flexi\",\"flexo\",\"fleys\",\"flick\",\"flics\",\"flied\",\"flier\",\"flies\",\"flimp\",\"flims\",\"fling\",\"flint\",\"flips\",\"flirs\",\"flirt\",\"flisk\",\"flite\",\"flits\",\"flitt\",\"float\",\"flobs\",\"flock\",\"flocs\",\"floes\",\"flogs\",\"flong\",\"flood\",\"floor\",\"flops\",\"flora\",\"flors\",\"flory\",\"flosh\",\"floss\",\"flota\",\"flote\",\"flour\",\"flout\",\"flown\",\"flows\",\"flubs\",\"flued\",\"flues\",\"fluey\",\"fluff\",\"fluid\",\"fluke\",\"fluky\",\"flume\",\"flump\",\"flung\",\"flunk\",\"fluor\",\"flurr\",\"flush\",\"flute\",\"fluty\",\"fluyt\",\"flyby\",\"flyer\",\"flype\",\"flyte\",\"foals\",\"foams\",\"foamy\",\"focal\",\"focus\",\"foehn\",\"fogey\",\"foggy\",\"fogie\",\"fogle\",\"fogou\",\"fohns\",\"foids\",\"foils\",\"foins\",\"foist\",\"folds\",\"foley\",\"folia\",\"folic\",\"folie\",\"folio\",\"folks\",\"folky\",\"folly\",\"fomes\",\"fonda\",\"fonds\",\"fondu\",\"fones\",\"fonly\",\"fonts\",\"foods\",\"foody\",\"fools\",\"foots\",\"footy\",\"foram\",\"foray\",\"forbs\",\"forby\",\"force\",\"fordo\",\"fords\",\"forel\",\"fores\",\"forex\",\"forge\",\"forgo\",\"forks\",\"forky\",\"forme\",\"forms\",\"forte\",\"forth\",\"forts\",\"forty\",\"forum\",\"forza\",\"forze\",\"fossa\",\"fosse\",\"fouat\",\"fouds\",\"fouer\",\"fouet\",\"foule\",\"fouls\",\"found\",\"fount\",\"fours\",\"fouth\",\"fovea\",\"fowls\",\"fowth\",\"foxed\",\"foxes\",\"foxie\",\"foyer\",\"foyle\",\"foyne\",\"frabs\",\"frack\",\"fract\",\"frags\",\"frail\",\"fraim\",\"frame\",\"franc\",\"frank\",\"frape\",\"fraps\",\"frass\",\"frate\",\"frati\",\"frats\",\"fraud\",\"fraus\",\"frays\",\"freak\",\"freed\",\"freer\",\"frees\",\"freet\",\"freit\",\"fremd\",\"frena\",\"freon\",\"frere\",\"fresh\",\"frets\",\"friar\",\"fribs\",\"fried\",\"frier\",\"fries\",\"frigs\",\"frill\",\"frise\",\"frisk\",\"frist\",\"frith\",\"frits\",\"fritt\",\"fritz\",\"frize\",\"frizz\",\"frock\",\"froes\",\"frogs\",\"frond\",\"frons\",\"front\",\"frore\",\"frorn\",\"frory\",\"frosh\",\"frost\",\"froth\",\"frown\",\"frows\",\"frowy\",\"froze\",\"frugs\",\"fruit\",\"frump\",\"frush\",\"frust\",\"fryer\",\"fubar\",\"fubby\",\"fubsy\",\"fucks\",\"fucus\",\"fuddy\",\"fudge\",\"fudgy\",\"fuels\",\"fuero\",\"fuffs\",\"fuffy\",\"fugal\",\"fuggy\",\"fugie\",\"fugio\",\"fugle\",\"fugly\",\"fugue\",\"fugus\",\"fujis\",\"fulls\",\"fully\",\"fumed\",\"fumer\",\"fumes\",\"fumet\",\"fundi\",\"funds\",\"fundy\",\"fungi\",\"fungo\",\"fungs\",\"funks\",\"funky\",\"funny\",\"fural\",\"furan\",\"furca\",\"furls\",\"furol\",\"furor\",\"furrs\",\"furry\",\"furth\",\"furze\",\"furzy\",\"fused\",\"fusee\",\"fusel\",\"fuses\",\"fusil\",\"fusks\",\"fussy\",\"fusts\",\"fusty\",\"futon\",\"fuzed\",\"fuzee\",\"fuzes\",\"fuzil\",\"fuzzy\",\"fyces\",\"fyked\",\"fykes\",\"fyles\",\"fyrds\",\"fytte\",\"gabba\",\"gabby\",\"gable\",\"gaddi\",\"gades\",\"gadge\",\"gadid\",\"gadis\",\"gadje\",\"gadjo\",\"gadso\",\"gaffe\",\"gaffs\",\"gaged\",\"gager\",\"gages\",\"gaids\",\"gaily\",\"gains\",\"gairs\",\"gaita\",\"gaits\",\"gaitt\",\"gajos\",\"galah\",\"galas\",\"galax\",\"galea\",\"galed\",\"gales\",\"galls\",\"gally\",\"galop\",\"galut\",\"galvo\",\"gamas\",\"gamay\",\"gamba\",\"gambe\",\"gambo\",\"gambs\",\"gamed\",\"gamer\",\"games\",\"gamey\",\"gamic\",\"gamin\",\"gamma\",\"gamme\",\"gammy\",\"gamps\",\"gamut\",\"ganch\",\"gandy\",\"ganef\",\"ganev\",\"gangs\",\"ganja\",\"ganof\",\"gants\",\"gaols\",\"gaped\",\"gaper\",\"gapes\",\"gapos\",\"gappy\",\"garbe\",\"garbo\",\"garbs\",\"garda\",\"gares\",\"garis\",\"garms\",\"garni\",\"garre\",\"garth\",\"garum\",\"gases\",\"gasps\",\"gaspy\",\"gassy\",\"gasts\",\"gatch\",\"gated\",\"gater\",\"gates\",\"gaths\",\"gator\",\"gauch\",\"gaucy\",\"gauds\",\"gaudy\",\"gauge\",\"gauje\",\"gault\",\"gaums\",\"gaumy\",\"gaunt\",\"gaups\",\"gaurs\",\"gauss\",\"gauze\",\"gauzy\",\"gavel\",\"gavot\",\"gawcy\",\"gawds\",\"gawks\",\"gawky\",\"gawps\",\"gawsy\",\"gayal\",\"gayer\",\"gayly\",\"gazal\",\"gazar\",\"gazed\",\"gazer\",\"gazes\",\"gazon\",\"gazoo\",\"geals\",\"geans\",\"geare\",\"gears\",\"geats\",\"gebur\",\"gecko\",\"gecks\",\"geeks\",\"geeky\",\"geeps\",\"geese\",\"geest\",\"geist\",\"geits\",\"gelds\",\"gelee\",\"gelid\",\"gelly\",\"gelts\",\"gemel\",\"gemma\",\"gemmy\",\"gemot\",\"genal\",\"genas\",\"genes\",\"genet\",\"genic\",\"genie\",\"genii\",\"genip\",\"genny\",\"genoa\",\"genom\",\"genre\",\"genro\",\"gents\",\"genty\",\"genua\",\"genus\",\"geode\",\"geoid\",\"gerah\",\"gerbe\",\"geres\",\"gerle\",\"germs\",\"germy\",\"gerne\",\"gesse\",\"gesso\",\"geste\",\"gests\",\"getas\",\"getup\",\"geums\",\"geyan\",\"geyer\",\"ghast\",\"ghats\",\"ghaut\",\"ghazi\",\"ghees\",\"ghest\",\"ghost\",\"ghoul\",\"ghyll\",\"giant\",\"gibed\",\"gibel\",\"giber\",\"gibes\",\"gibli\",\"gibus\",\"giddy\",\"gifts\",\"gigas\",\"gighe\",\"gigot\",\"gigue\",\"gilas\",\"gilds\",\"gilet\",\"gills\",\"gilly\",\"gilpy\",\"gilts\",\"gimel\",\"gimme\",\"gimps\",\"gimpy\",\"ginch\",\"ginge\",\"gings\",\"ginks\",\"ginny\",\"ginzo\",\"gipon\",\"gippo\",\"gippy\",\"gipsy\",\"girds\",\"girls\",\"girly\",\"girns\",\"giron\",\"giros\",\"girrs\",\"girsh\",\"girth\",\"girts\",\"gismo\",\"gisms\",\"gists\",\"gitch\",\"gites\",\"giust\",\"gived\",\"given\",\"giver\",\"gives\",\"gizmo\",\"glace\",\"glade\",\"glads\",\"glady\",\"glaik\",\"glair\",\"glams\",\"gland\",\"glans\",\"glare\",\"glary\",\"glass\",\"glaum\",\"glaur\",\"glaze\",\"glazy\",\"gleam\",\"glean\",\"gleba\",\"glebe\",\"gleby\",\"glede\",\"gleds\",\"gleed\",\"gleek\",\"glees\",\"gleet\",\"gleis\",\"glens\",\"glent\",\"gleys\",\"glial\",\"glias\",\"glibs\",\"glide\",\"gliff\",\"glift\",\"glike\",\"glime\",\"glims\",\"glint\",\"glisk\",\"glits\",\"glitz\",\"gloam\",\"gloat\",\"globe\",\"globi\",\"globs\",\"globy\",\"glode\",\"glogg\",\"gloms\",\"gloom\",\"gloop\",\"glops\",\"glory\",\"gloss\",\"glost\",\"glout\",\"glove\",\"glows\",\"gloze\",\"glued\",\"gluer\",\"glues\",\"gluey\",\"glugs\",\"glume\",\"glums\",\"gluon\",\"glute\",\"gluts\",\"glyph\",\"gnarl\",\"gnarr\",\"gnars\",\"gnash\",\"gnats\",\"gnawn\",\"gnaws\",\"gnome\",\"gnows\",\"goads\",\"goafs\",\"goals\",\"goary\",\"goats\",\"goaty\",\"goban\",\"gobar\",\"gobbi\",\"gobbo\",\"gobby\",\"gobis\",\"gobos\",\"godet\",\"godly\",\"godso\",\"goels\",\"goers\",\"goest\",\"goeth\",\"goety\",\"gofer\",\"goffs\",\"gogga\",\"gogos\",\"goier\",\"going\",\"gojis\",\"golds\",\"goldy\",\"golem\",\"goles\",\"golfs\",\"golly\",\"golpe\",\"golps\",\"gombo\",\"gomer\",\"gompa\",\"gonad\",\"gonch\",\"gonef\",\"goner\",\"gongs\",\"gonia\",\"gonif\",\"gonks\",\"gonna\",\"gonof\",\"gonys\",\"gonzo\",\"gooby\",\"goods\",\"goody\",\"gooey\",\"goofs\",\"goofy\",\"googs\",\"gooks\",\"gooky\",\"goold\",\"gools\",\"gooly\",\"goons\",\"goony\",\"goops\",\"goopy\",\"goors\",\"goory\",\"goose\",\"goosy\",\"gopak\",\"gopik\",\"goral\",\"goras\",\"gored\",\"gores\",\"gorge\",\"goris\",\"gorms\",\"gormy\",\"gorps\",\"gorse\",\"gorsy\",\"gosht\",\"gosse\",\"gotch\",\"goths\",\"gothy\",\"gotta\",\"gouch\",\"gouge\",\"gouks\",\"goura\",\"gourd\",\"gouts\",\"gouty\",\"gowan\",\"gowds\",\"gowfs\",\"gowks\",\"gowls\",\"gowns\",\"goxes\",\"goyim\",\"goyle\",\"graal\",\"grabs\",\"grace\",\"grade\",\"grads\",\"graff\",\"graft\",\"grail\",\"grain\",\"graip\",\"grama\",\"grame\",\"gramp\",\"grams\",\"grana\",\"grand\",\"grans\",\"grant\",\"grape\",\"graph\",\"grapy\",\"grasp\",\"grass\",\"grate\",\"grave\",\"gravs\",\"gravy\",\"grays\",\"graze\",\"great\",\"grebe\",\"grebo\",\"grece\",\"greed\",\"greek\",\"green\",\"grees\",\"greet\",\"grege\",\"grego\",\"grein\",\"grens\",\"grese\",\"greve\",\"grews\",\"greys\",\"grice\",\"gride\",\"grids\",\"grief\",\"griff\",\"grift\",\"grigs\",\"grike\",\"grill\",\"grime\",\"grimy\",\"grind\",\"grins\",\"griot\",\"gripe\",\"grips\",\"gript\",\"gripy\",\"grise\",\"grist\",\"grisy\",\"grith\",\"grits\",\"grize\",\"groan\",\"groat\",\"grody\",\"grogs\",\"groin\",\"groks\",\"groma\",\"grone\",\"groof\",\"groom\",\"grope\",\"gross\",\"grosz\",\"grots\",\"grouf\",\"group\",\"grout\",\"grove\",\"grovy\",\"growl\",\"grown\",\"grows\",\"grrls\",\"grrrl\",\"grubs\",\"grued\",\"gruel\",\"grues\",\"grufe\",\"gruff\",\"grume\",\"grump\",\"grund\",\"grunt\",\"gryce\",\"gryde\",\"gryke\",\"grype\",\"grypt\",\"guaco\",\"guana\",\"guano\",\"guans\",\"guard\",\"guars\",\"guava\",\"gucks\",\"gucky\",\"gudes\",\"guess\",\"guest\",\"guffs\",\"gugas\",\"guide\",\"guids\",\"guild\",\"guile\",\"guilt\",\"guimp\",\"guiro\",\"guise\",\"gulag\",\"gular\",\"gulas\",\"gulch\",\"gules\",\"gulet\",\"gulfs\",\"gulfy\",\"gulls\",\"gully\",\"gulph\",\"gulps\",\"gulpy\",\"gumbo\",\"gumma\",\"gummi\",\"gummy\",\"gumps\",\"gundy\",\"gunge\",\"gungy\",\"gunks\",\"gunky\",\"gunny\",\"guppy\",\"guqin\",\"gurdy\",\"gurge\",\"gurls\",\"gurly\",\"gurns\",\"gurry\",\"gursh\",\"gurus\",\"gushy\",\"gusla\",\"gusle\",\"gusli\",\"gussy\",\"gusto\",\"gusts\",\"gusty\",\"gutsy\",\"gutta\",\"gutty\",\"guyed\",\"guyle\",\"guyot\",\"guyse\",\"gwine\",\"gyals\",\"gyans\",\"gybed\",\"gybes\",\"gyeld\",\"gymps\",\"gynae\",\"gynie\",\"gynny\",\"gynos\",\"gyoza\",\"gypos\",\"gyppo\",\"gyppy\",\"gypsy\",\"gyral\",\"gyred\",\"gyres\",\"gyron\",\"gyros\",\"gyrus\",\"gytes\",\"gyved\",\"gyves\",\"haafs\",\"haars\",\"habit\",\"hable\",\"habus\",\"hacek\",\"hacks\",\"hadal\",\"haded\",\"hades\",\"hadji\",\"hadst\",\"haems\",\"haets\",\"haffs\",\"hafiz\",\"hafts\",\"haggs\",\"hahas\",\"haick\",\"haika\",\"haiks\",\"haiku\",\"hails\",\"haily\",\"hains\",\"haint\",\"hairs\",\"hairy\",\"haith\",\"hajes\",\"hajis\",\"hajji\",\"hakam\",\"hakas\",\"hakea\",\"hakes\",\"hakim\",\"hakus\",\"halal\",\"haled\",\"haler\",\"hales\",\"halfa\",\"halfs\",\"halid\",\"hallo\",\"halls\",\"halma\",\"halms\",\"halon\",\"halos\",\"halse\",\"halts\",\"halva\",\"halve\",\"halwa\",\"hamal\",\"hamba\",\"hamed\",\"hames\",\"hammy\",\"hamza\",\"hanap\",\"hance\",\"hanch\",\"hands\",\"handy\",\"hangi\",\"hangs\",\"hanks\",\"hanky\",\"hansa\",\"hanse\",\"hants\",\"haole\",\"haoma\",\"hapax\",\"haply\",\"happi\",\"happy\",\"hapus\",\"haram\",\"hards\",\"hardy\",\"hared\",\"harem\",\"hares\",\"harim\",\"harks\",\"harls\",\"harms\",\"harns\",\"haros\",\"harps\",\"harpy\",\"harry\",\"harsh\",\"harts\",\"hashy\",\"hasks\",\"hasps\",\"hasta\",\"haste\",\"hasty\",\"hatch\",\"hated\",\"hater\",\"hates\",\"hatha\",\"hauds\",\"haufs\",\"haugh\",\"hauld\",\"haulm\",\"hauls\",\"hault\",\"hauns\",\"haunt\",\"hause\",\"haute\",\"haven\",\"haver\",\"haves\",\"havoc\",\"hawed\",\"hawks\",\"hawms\",\"hawse\",\"hayed\",\"hayer\",\"hayey\",\"hayle\",\"hazan\",\"hazed\",\"hazel\",\"hazer\",\"hazes\",\"heads\",\"heady\",\"heald\",\"heals\",\"heame\",\"heaps\",\"heapy\",\"heard\",\"heare\",\"hears\",\"heart\",\"heast\",\"heath\",\"heats\",\"heave\",\"heavy\",\"heben\",\"hebes\",\"hecht\",\"hecks\",\"heder\",\"hedge\",\"hedgy\",\"heeds\",\"heedy\",\"heels\",\"heeze\",\"hefte\",\"hefts\",\"hefty\",\"heids\",\"heigh\",\"heils\",\"heirs\",\"heist\",\"hejab\",\"hejra\",\"heled\",\"heles\",\"helio\",\"helix\",\"hello\",\"hells\",\"helms\",\"helos\",\"helot\",\"helps\",\"helve\",\"hemal\",\"hemes\",\"hemic\",\"hemin\",\"hemps\",\"hempy\",\"hence\",\"hench\",\"hends\",\"henge\",\"henna\",\"henny\",\"henry\",\"hents\",\"hepar\",\"herbs\",\"herby\",\"herds\",\"heres\",\"herls\",\"herma\",\"herms\",\"herns\",\"heron\",\"heros\",\"herry\",\"herse\",\"hertz\",\"herye\",\"hesps\",\"hests\",\"hetes\",\"heths\",\"heuch\",\"heugh\",\"hevea\",\"hewed\",\"hewer\",\"hewgh\",\"hexad\",\"hexed\",\"hexer\",\"hexes\",\"hexyl\",\"heyed\",\"hiant\",\"hicks\",\"hided\",\"hider\",\"hides\",\"hiems\",\"highs\",\"hight\",\"hijab\",\"hijra\",\"hiked\",\"hiker\",\"hikes\",\"hikoi\",\"hilar\",\"hilch\",\"hillo\",\"hills\",\"hilly\",\"hilts\",\"hilum\",\"hilus\",\"himbo\",\"hinau\",\"hinds\",\"hinge\",\"hings\",\"hinky\",\"hinny\",\"hints\",\"hiois\",\"hiply\",\"hippo\",\"hippy\",\"hired\",\"hiree\",\"hirer\",\"hires\",\"hissy\",\"hists\",\"hitch\",\"hithe\",\"hived\",\"hiver\",\"hives\",\"hizen\",\"hoaed\",\"hoagy\",\"hoard\",\"hoars\",\"hoary\",\"hoast\",\"hobby\",\"hobos\",\"hocks\",\"hocus\",\"hodad\",\"hodja\",\"hoers\",\"hogan\",\"hogen\",\"hoggs\",\"hoghs\",\"hohed\",\"hoick\",\"hoied\",\"hoiks\",\"hoing\",\"hoise\",\"hoist\",\"hokas\",\"hoked\",\"hokes\",\"hokey\",\"hokis\",\"hokku\",\"hokum\",\"holds\",\"holed\",\"holes\",\"holey\",\"holks\",\"holla\",\"hollo\",\"holly\",\"holme\",\"holms\",\"holon\",\"holos\",\"holts\",\"homas\",\"homed\",\"homer\",\"homes\",\"homey\",\"homie\",\"homme\",\"homos\",\"honan\",\"honda\",\"honds\",\"honed\",\"honer\",\"hones\",\"honey\",\"hongi\",\"hongs\",\"honks\",\"honky\",\"honor\",\"hooch\",\"hoods\",\"hoody\",\"hooey\",\"hoofs\",\"hooka\",\"hooks\",\"hooky\",\"hooly\",\"hoons\",\"hoops\",\"hoord\",\"hoors\",\"hoosh\",\"hoots\",\"hooty\",\"hoove\",\"hopak\",\"hoped\",\"hoper\",\"hopes\",\"hoppy\",\"horah\",\"horal\",\"horas\",\"horde\",\"horis\",\"horks\",\"horme\",\"horns\",\"horny\",\"horse\",\"horst\",\"horsy\",\"hosed\",\"hosel\",\"hosen\",\"hoser\",\"hoses\",\"hosey\",\"hosta\",\"hosts\",\"hotch\",\"hotel\",\"hoten\",\"hotly\",\"hotty\",\"houff\",\"houfs\",\"hough\",\"hound\",\"houri\",\"hours\",\"house\",\"houts\",\"hovea\",\"hoved\",\"hovel\",\"hoven\",\"hover\",\"hoves\",\"howbe\",\"howdy\",\"howes\",\"howff\",\"howfs\",\"howks\",\"howls\",\"howre\",\"howso\",\"hoxed\",\"hoxes\",\"hoyas\",\"hoyed\",\"hoyle\",\"hubby\",\"hucks\",\"hudna\",\"hudud\",\"huers\",\"huffs\",\"huffy\",\"huger\",\"huggy\",\"huhus\",\"huias\",\"hulas\",\"hules\",\"hulks\",\"hulky\",\"hullo\",\"hulls\",\"hully\",\"human\",\"humas\",\"humfs\",\"humic\",\"humid\",\"humor\",\"humph\",\"humps\",\"humpy\",\"humus\",\"hunch\",\"hunks\",\"hunky\",\"hunts\",\"hurds\",\"hurls\",\"hurly\",\"hurra\",\"hurry\",\"hurst\",\"hurts\",\"hushy\",\"husks\",\"husky\",\"husos\",\"hussy\",\"hutch\",\"hutia\",\"huzza\",\"huzzy\",\"hwyls\",\"hydra\",\"hydro\",\"hyena\",\"hyens\",\"hygge\",\"hying\",\"hykes\",\"hylas\",\"hyleg\",\"hyles\",\"hylic\",\"hymen\",\"hymns\",\"hynde\",\"hyoid\",\"hyped\",\"hyper\",\"hypes\",\"hypha\",\"hyphy\",\"hypos\",\"hyrax\",\"hyson\",\"hythe\",\"iambi\",\"iambs\",\"ibrik\",\"icers\",\"iched\",\"iches\",\"ichor\",\"icier\",\"icily\",\"icing\",\"icker\",\"ickle\",\"icons\",\"ictal\",\"ictic\",\"ictus\",\"idant\",\"ideal\",\"ideas\",\"idees\",\"ident\",\"idiom\",\"idiot\",\"idled\",\"idler\",\"idles\",\"idola\",\"idols\",\"idyll\",\"idyls\",\"iftar\",\"igapo\",\"igged\",\"igloo\",\"iglus\",\"ihram\",\"ikans\",\"ikats\",\"ikons\",\"ileac\",\"ileal\",\"ileum\",\"ileus\",\"iliac\",\"iliad\",\"ilial\",\"ilium\",\"iller\",\"illth\",\"image\",\"imago\",\"imams\",\"imari\",\"imaum\",\"imbar\",\"imbed\",\"imbue\",\"imide\",\"imido\",\"imids\",\"imine\",\"imino\",\"immew\",\"immit\",\"immix\",\"imped\",\"impel\",\"impis\",\"imply\",\"impot\",\"impro\",\"imshi\",\"imshy\",\"inane\",\"inapt\",\"inarm\",\"inbox\",\"inbye\",\"incel\",\"incle\",\"incog\",\"incur\",\"incus\",\"incut\",\"indew\",\"index\",\"india\",\"indie\",\"indol\",\"indow\",\"indri\",\"indue\",\"inept\",\"inerm\",\"inert\",\"infer\",\"infix\",\"infos\",\"infra\",\"ingan\",\"ingle\",\"ingot\",\"inion\",\"inked\",\"inker\",\"inkle\",\"inlay\",\"inlet\",\"inned\",\"inner\",\"innit\",\"inorb\",\"input\",\"inrun\",\"inset\",\"inspo\",\"intel\",\"inter\",\"intil\",\"intis\",\"intra\",\"intro\",\"inula\",\"inure\",\"inurn\",\"inust\",\"invar\",\"inwit\",\"iodic\",\"iodid\",\"iodin\",\"ionic\",\"iotas\",\"ippon\",\"irade\",\"irate\",\"irids\",\"iring\",\"irked\",\"iroko\",\"irone\",\"irons\",\"irony\",\"isbas\",\"ishes\",\"isled\",\"isles\",\"islet\",\"isnae\",\"issei\",\"issue\",\"istle\",\"itchy\",\"items\",\"ither\",\"ivied\",\"ivies\",\"ivory\",\"ixias\",\"ixnay\",\"ixora\",\"ixtle\",\"izard\",\"izars\",\"izzat\",\"jaaps\",\"jabot\",\"jacal\",\"jacks\",\"jacky\",\"jaded\",\"jades\",\"jafas\",\"jaffa\",\"jagas\",\"jager\",\"jaggs\",\"jaggy\",\"jagir\",\"jagra\",\"jails\",\"jaker\",\"jakes\",\"jakey\",\"jalap\",\"jalop\",\"jambe\",\"jambo\",\"jambs\",\"jambu\",\"james\",\"jammy\",\"jamon\",\"janes\",\"janns\",\"janny\",\"janty\",\"japan\",\"japed\",\"japer\",\"japes\",\"jarks\",\"jarls\",\"jarps\",\"jarta\",\"jarul\",\"jasey\",\"jaspe\",\"jasps\",\"jatos\",\"jauks\",\"jaunt\",\"jaups\",\"javas\",\"javel\",\"jawan\",\"jawed\",\"jaxie\",\"jazzy\",\"jeans\",\"jeats\",\"jebel\",\"jedis\",\"jeels\",\"jeely\",\"jeeps\",\"jeers\",\"jeeze\",\"jefes\",\"jeffs\",\"jehad\",\"jehus\",\"jelab\",\"jello\",\"jells\",\"jelly\",\"jembe\",\"jemmy\",\"jenny\",\"jeons\",\"jerid\",\"jerks\",\"jerky\",\"jerry\",\"jesse\",\"jests\",\"jesus\",\"jetes\",\"jeton\",\"jetty\",\"jeune\",\"jewed\",\"jewel\",\"jewie\",\"jhala\",\"jiaos\",\"jibba\",\"jibbs\",\"jibed\",\"jiber\",\"jibes\",\"jiffs\",\"jiffy\",\"jiggy\",\"jigot\",\"jihad\",\"jills\",\"jilts\",\"jimmy\",\"jimpy\",\"jingo\",\"jinks\",\"jinne\",\"jinni\",\"jinns\",\"jirds\",\"jirga\",\"jirre\",\"jisms\",\"jived\",\"jiver\",\"jives\",\"jivey\",\"jnana\",\"jobed\",\"jobes\",\"jocko\",\"jocks\",\"jocky\",\"jocos\",\"jodel\",\"joeys\",\"johns\",\"joins\",\"joint\",\"joist\",\"joked\",\"joker\",\"jokes\",\"jokey\",\"jokol\",\"joled\",\"joles\",\"jolls\",\"jolly\",\"jolts\",\"jolty\",\"jomon\",\"jomos\",\"jones\",\"jongs\",\"jonty\",\"jooks\",\"joram\",\"jorum\",\"jotas\",\"jotty\",\"jotun\",\"joual\",\"jougs\",\"jouks\",\"joule\",\"jours\",\"joust\",\"jowar\",\"jowed\",\"jowls\",\"jowly\",\"joyed\",\"jubas\",\"jubes\",\"jucos\",\"judas\",\"judge\",\"judgy\",\"judos\",\"jugal\",\"jugum\",\"juice\",\"juicy\",\"jujus\",\"juked\",\"jukes\",\"jukus\",\"julep\",\"jumar\",\"jumbo\",\"jumby\",\"jumps\",\"jumpy\",\"junco\",\"junks\",\"junky\",\"junta\",\"junto\",\"jupes\",\"jupon\",\"jural\",\"jurat\",\"jurel\",\"jures\",\"juror\",\"justs\",\"jutes\",\"jutty\",\"juves\",\"juvie\",\"kaama\",\"kabab\",\"kabar\",\"kabob\",\"kacha\",\"kacks\",\"kadai\",\"kades\",\"kadis\",\"kafir\",\"kagos\",\"kagus\",\"kahal\",\"kaiak\",\"kaids\",\"kaies\",\"kaifs\",\"kaika\",\"kaiks\",\"kails\",\"kaims\",\"kaing\",\"kains\",\"kakas\",\"kakis\",\"kalam\",\"kales\",\"kalif\",\"kalis\",\"kalpa\",\"kamas\",\"kames\",\"kamik\",\"kamis\",\"kamme\",\"kanae\",\"kanas\",\"kandy\",\"kaneh\",\"kanes\",\"kanga\",\"kangs\",\"kanji\",\"kants\",\"kanzu\",\"kaons\",\"kapas\",\"kaphs\",\"kapok\",\"kapow\",\"kappa\",\"kapus\",\"kaput\",\"karas\",\"karat\",\"karks\",\"karma\",\"karns\",\"karoo\",\"karos\",\"karri\",\"karst\",\"karsy\",\"karts\",\"karzy\",\"kasha\",\"kasme\",\"katal\",\"katas\",\"katis\",\"katti\",\"kaugh\",\"kauri\",\"kauru\",\"kaury\",\"kaval\",\"kavas\",\"kawas\",\"kawau\",\"kawed\",\"kayak\",\"kayle\",\"kayos\",\"kazis\",\"kazoo\",\"kbars\",\"kebab\",\"kebar\",\"kebob\",\"kecks\",\"kedge\",\"kedgy\",\"keech\",\"keefs\",\"keeks\",\"keels\",\"keema\",\"keeno\",\"keens\",\"keeps\",\"keets\",\"keeve\",\"kefir\",\"kehua\",\"keirs\",\"kelep\",\"kelim\",\"kells\",\"kelly\",\"kelps\",\"kelpy\",\"kelts\",\"kelty\",\"kembo\",\"kembs\",\"kemps\",\"kempt\",\"kempy\",\"kenaf\",\"kench\",\"kendo\",\"kenos\",\"kente\",\"kents\",\"kepis\",\"kerbs\",\"kerel\",\"kerfs\",\"kerky\",\"kerma\",\"kerne\",\"kerns\",\"keros\",\"kerry\",\"kerve\",\"kesar\",\"kests\",\"ketas\",\"ketch\",\"ketes\",\"ketol\",\"kevel\",\"kevil\",\"kexes\",\"keyed\",\"keyer\",\"khadi\",\"khafs\",\"khaki\",\"khans\",\"khaph\",\"khats\",\"khaya\",\"khazi\",\"kheda\",\"kheth\",\"khets\",\"khoja\",\"khors\",\"khoum\",\"khuds\",\"kiaat\",\"kiack\",\"kiang\",\"kibbe\",\"kibbi\",\"kibei\",\"kibes\",\"kibla\",\"kicks\",\"kicky\",\"kiddo\",\"kiddy\",\"kidel\",\"kidge\",\"kiefs\",\"kiers\",\"kieve\",\"kievs\",\"kight\",\"kikes\",\"kikoi\",\"kiley\",\"kilim\",\"kills\",\"kilns\",\"kilos\",\"kilps\",\"kilts\",\"kilty\",\"kimbo\",\"kinas\",\"kinda\",\"kinds\",\"kindy\",\"kines\",\"kings\",\"kinin\",\"kinks\",\"kinky\",\"kinos\",\"kiore\",\"kiosk\",\"kipes\",\"kippa\",\"kipps\",\"kirby\",\"kirks\",\"kirns\",\"kirri\",\"kisan\",\"kissy\",\"kists\",\"kited\",\"kiter\",\"kites\",\"kithe\",\"kiths\",\"kitty\",\"kitul\",\"kivas\",\"kiwis\",\"klang\",\"klaps\",\"klett\",\"klick\",\"klieg\",\"kliks\",\"klong\",\"kloof\",\"kluge\",\"klutz\",\"knack\",\"knags\",\"knaps\",\"knarl\",\"knars\",\"knaur\",\"knave\",\"knawe\",\"knead\",\"kneed\",\"kneel\",\"knees\",\"knell\",\"knelt\",\"knife\",\"knish\",\"knits\",\"knive\",\"knobs\",\"knock\",\"knoll\",\"knops\",\"knosp\",\"knots\",\"knout\",\"knowe\",\"known\",\"knows\",\"knubs\",\"knurl\",\"knurr\",\"knurs\",\"knuts\",\"koala\",\"koans\",\"koaps\",\"koban\",\"kobos\",\"koels\",\"koffs\",\"kofta\",\"kogal\",\"kohas\",\"kohen\",\"kohls\",\"koine\",\"kojis\",\"kokam\",\"kokas\",\"koker\",\"kokra\",\"kokum\",\"kolas\",\"kolos\",\"kombu\",\"konbu\",\"kondo\",\"konks\",\"kooks\",\"kooky\",\"koori\",\"kopek\",\"kophs\",\"kopje\",\"koppa\",\"korai\",\"koras\",\"korat\",\"kores\",\"korma\",\"koros\",\"korun\",\"korus\",\"koses\",\"kotch\",\"kotos\",\"kotow\",\"koura\",\"kraal\",\"krabs\",\"kraft\",\"krais\",\"krait\",\"krang\",\"krans\",\"kranz\",\"kraut\",\"krays\",\"kreep\",\"kreng\",\"krewe\",\"krill\",\"krona\",\"krone\",\"kroon\",\"krubi\",\"krunk\",\"ksars\",\"kubie\",\"kudos\",\"kudus\",\"kudzu\",\"kufis\",\"kugel\",\"kuias\",\"kukri\",\"kukus\",\"kulak\",\"kulan\",\"kulas\",\"kulfi\",\"kumis\",\"kumys\",\"kuris\",\"kurre\",\"kurta\",\"kurus\",\"kusso\",\"kutas\",\"kutch\",\"kutis\",\"kutus\",\"kuzus\",\"kvass\",\"kvell\",\"kwela\",\"kyack\",\"kyaks\",\"kyang\",\"kyars\",\"kyats\",\"kybos\",\"kydst\",\"kyles\",\"kylie\",\"kylin\",\"kylix\",\"kyloe\",\"kynde\",\"kynds\",\"kypes\",\"kyrie\",\"kytes\",\"kythe\",\"laari\",\"labda\",\"label\",\"labia\",\"labis\",\"labor\",\"labra\",\"laced\",\"lacer\",\"laces\",\"lacet\",\"lacey\",\"lacks\",\"laddy\",\"laded\",\"laden\",\"lader\",\"lades\",\"ladle\",\"laers\",\"laevo\",\"lagan\",\"lager\",\"lahal\",\"lahar\",\"laich\",\"laics\",\"laids\",\"laigh\",\"laika\",\"laiks\",\"laird\",\"lairs\",\"lairy\",\"laith\",\"laity\",\"laked\",\"laker\",\"lakes\",\"lakhs\",\"lakin\",\"laksa\",\"laldy\",\"lalls\",\"lamas\",\"lambs\",\"lamby\",\"lamed\",\"lamer\",\"lames\",\"lamia\",\"lammy\",\"lamps\",\"lanai\",\"lanas\",\"lance\",\"lanch\",\"lande\",\"lands\",\"lanes\",\"lanks\",\"lanky\",\"lants\",\"lapel\",\"lapin\",\"lapis\",\"lapje\",\"lapse\",\"larch\",\"lards\",\"lardy\",\"laree\",\"lares\",\"large\",\"largo\",\"laris\",\"larks\",\"larky\",\"larns\",\"larnt\",\"larum\",\"larva\",\"lased\",\"laser\",\"lases\",\"lassi\",\"lasso\",\"lassu\",\"lassy\",\"lasts\",\"latah\",\"latch\",\"lated\",\"laten\",\"later\",\"latex\",\"lathe\",\"lathi\",\"laths\",\"lathy\",\"latke\",\"latte\",\"latus\",\"lauan\",\"lauch\",\"lauds\",\"laufs\",\"laugh\",\"laund\",\"laura\",\"laval\",\"lavas\",\"laved\",\"laver\",\"laves\",\"lavra\",\"lavvy\",\"lawed\",\"lawer\",\"lawin\",\"lawks\",\"lawns\",\"lawny\",\"laxed\",\"laxer\",\"laxes\",\"laxly\",\"layed\",\"layer\",\"layin\",\"layup\",\"lazar\",\"lazed\",\"lazes\",\"lazos\",\"lazzi\",\"lazzo\",\"leach\",\"leads\",\"leady\",\"leafs\",\"leafy\",\"leaks\",\"leaky\",\"leams\",\"leans\",\"leant\",\"leany\",\"leaps\",\"leapt\",\"leare\",\"learn\",\"lears\",\"leary\",\"lease\",\"leash\",\"least\",\"leats\",\"leave\",\"leavy\",\"leaze\",\"leben\",\"leccy\",\"ledes\",\"ledge\",\"ledgy\",\"ledum\",\"leear\",\"leech\",\"leeks\",\"leeps\",\"leers\",\"leery\",\"leese\",\"leets\",\"leeze\",\"lefte\",\"lefts\",\"lefty\",\"legal\",\"leger\",\"leges\",\"legge\",\"leggo\",\"leggy\",\"legit\",\"lehrs\",\"lehua\",\"leirs\",\"leish\",\"leman\",\"lemed\",\"lemel\",\"lemes\",\"lemma\",\"lemme\",\"lemon\",\"lemur\",\"lends\",\"lenes\",\"lengs\",\"lenis\",\"lenos\",\"lense\",\"lenti\",\"lento\",\"leone\",\"leper\",\"lepid\",\"lepra\",\"lepta\",\"lered\",\"leres\",\"lerps\",\"lesbo\",\"leses\",\"lests\",\"letch\",\"lethe\",\"letup\",\"leuch\",\"leuco\",\"leuds\",\"leugh\",\"levas\",\"levee\",\"level\",\"lever\",\"leves\",\"levin\",\"levis\",\"lewis\",\"lexes\",\"lexis\",\"lezes\",\"lezza\",\"lezzy\",\"liana\",\"liane\",\"liang\",\"liard\",\"liars\",\"liart\",\"libel\",\"liber\",\"libra\",\"libri\",\"lichi\",\"licht\",\"licit\",\"licks\",\"lidar\",\"lidos\",\"liefs\",\"liege\",\"liens\",\"liers\",\"lieus\",\"lieve\",\"lifer\",\"lifes\",\"lifts\",\"ligan\",\"liger\",\"ligge\",\"light\",\"ligne\",\"liked\",\"liken\",\"liker\",\"likes\",\"likin\",\"lilac\",\"lills\",\"lilos\",\"lilts\",\"liman\",\"limas\",\"limax\",\"limba\",\"limbi\",\"limbo\",\"limbs\",\"limby\",\"limed\",\"limen\",\"limes\",\"limey\",\"limit\",\"limma\",\"limns\",\"limos\",\"limpa\",\"limps\",\"linac\",\"linch\",\"linds\",\"lindy\",\"lined\",\"linen\",\"liner\",\"lines\",\"liney\",\"linga\",\"lingo\",\"lings\",\"lingy\",\"linin\",\"links\",\"linky\",\"linns\",\"linny\",\"linos\",\"lints\",\"linty\",\"linum\",\"linux\",\"lions\",\"lipas\",\"lipes\",\"lipid\",\"lipin\",\"lipos\",\"lippy\",\"liras\",\"lirks\",\"lirot\",\"lisks\",\"lisle\",\"lisps\",\"lists\",\"litai\",\"litas\",\"lited\",\"liter\",\"lites\",\"lithe\",\"litho\",\"liths\",\"litre\",\"lived\",\"liven\",\"liver\",\"lives\",\"livid\",\"livor\",\"livre\",\"llama\",\"llano\",\"loach\",\"loads\",\"loafs\",\"loams\",\"loamy\",\"loans\",\"loast\",\"loath\",\"loave\",\"lobar\",\"lobby\",\"lobed\",\"lobes\",\"lobos\",\"lobus\",\"local\",\"loche\",\"lochs\",\"locie\",\"locis\",\"locks\",\"locos\",\"locum\",\"locus\",\"loden\",\"lodes\",\"lodge\",\"loess\",\"lofts\",\"lofty\",\"logan\",\"loges\",\"loggy\",\"logia\",\"logic\",\"logie\",\"login\",\"logoi\",\"logon\",\"logos\",\"lohan\",\"loids\",\"loins\",\"loipe\",\"loirs\",\"lokes\",\"lolls\",\"lolly\",\"lolog\",\"lomas\",\"lomed\",\"lomes\",\"loner\",\"longa\",\"longe\",\"longs\",\"looby\",\"looed\",\"looey\",\"loofa\",\"loofs\",\"looie\",\"looks\",\"looky\",\"looms\",\"loons\",\"loony\",\"loops\",\"loopy\",\"loord\",\"loose\",\"loots\",\"loped\",\"loper\",\"lopes\",\"loppy\",\"loral\",\"loran\",\"lords\",\"lordy\",\"lorel\",\"lores\",\"loric\",\"loris\",\"lorry\",\"losed\",\"losel\",\"losen\",\"loser\",\"loses\",\"lossy\",\"lotah\",\"lotas\",\"lotes\",\"lotic\",\"lotos\",\"lotsa\",\"lotta\",\"lotte\",\"lotto\",\"lotus\",\"loued\",\"lough\",\"louie\",\"louis\",\"louma\",\"lound\",\"louns\",\"loupe\",\"loups\",\"loure\",\"lours\",\"loury\",\"louse\",\"lousy\",\"louts\",\"lovat\",\"loved\",\"lover\",\"loves\",\"lovey\",\"lovie\",\"lowan\",\"lowed\",\"lower\",\"lowes\",\"lowly\",\"lownd\",\"lowne\",\"lowns\",\"lowps\",\"lowry\",\"lowse\",\"lowts\",\"loxed\",\"loxes\",\"loyal\",\"lozen\",\"luach\",\"luaus\",\"lubed\",\"lubes\",\"lubra\",\"luces\",\"lucid\",\"lucks\",\"lucky\",\"lucre\",\"ludes\",\"ludic\",\"ludos\",\"luffa\",\"luffs\",\"luged\",\"luger\",\"luges\",\"lulls\",\"lulus\",\"lumas\",\"lumbi\",\"lumen\",\"lumme\",\"lummy\",\"lumps\",\"lumpy\",\"lunar\",\"lunas\",\"lunch\",\"lunes\",\"lunet\",\"lunge\",\"lungi\",\"lungs\",\"lunks\",\"lunts\",\"lupin\",\"lupus\",\"lurch\",\"lured\",\"lurer\",\"lures\",\"lurex\",\"lurgi\",\"lurgy\",\"lurid\",\"lurks\",\"lurry\",\"lurve\",\"luser\",\"lushy\",\"lusks\",\"lusts\",\"lusty\",\"lusus\",\"lutea\",\"luted\",\"luter\",\"lutes\",\"luvvy\",\"luxed\",\"luxer\",\"luxes\",\"lweis\",\"lyams\",\"lyard\",\"lyart\",\"lyase\",\"lycea\",\"lycee\",\"lycra\",\"lying\",\"lymes\",\"lymph\",\"lynch\",\"lynes\",\"lyres\",\"lyric\",\"lysed\",\"lyses\",\"lysin\",\"lysis\",\"lysol\",\"lyssa\",\"lyted\",\"lytes\",\"lythe\",\"lytic\",\"lytta\",\"maaed\",\"maare\",\"maars\",\"mabes\",\"macas\",\"macaw\",\"maced\",\"macer\",\"maces\",\"mache\",\"machi\",\"macho\",\"machs\",\"macks\",\"macle\",\"macon\",\"macro\",\"madam\",\"madge\",\"madid\",\"madly\",\"madre\",\"maerl\",\"mafia\",\"mafic\",\"mages\",\"maggs\",\"magic\",\"magma\",\"magot\",\"magus\",\"mahoe\",\"mahua\",\"mahwa\",\"maids\",\"maiko\",\"maiks\",\"maile\",\"maill\",\"mails\",\"maims\",\"mains\",\"maire\",\"mairs\",\"maise\",\"maist\",\"maize\",\"major\",\"makar\",\"maker\",\"makes\",\"makis\",\"makos\",\"malam\",\"malar\",\"malas\",\"malax\",\"males\",\"malic\",\"malik\",\"malis\",\"malls\",\"malms\",\"malmy\",\"malts\",\"malty\",\"malus\",\"malva\",\"malwa\",\"mamas\",\"mamba\",\"mambo\",\"mamee\",\"mamey\",\"mamie\",\"mamma\",\"mammy\",\"manas\",\"manat\",\"mandi\",\"maneb\",\"maned\",\"maneh\",\"manes\",\"manet\",\"manga\",\"mange\",\"mango\",\"mangs\",\"mangy\",\"mania\",\"manic\",\"manis\",\"manky\",\"manly\",\"manna\",\"manor\",\"manos\",\"manse\",\"manta\",\"manto\",\"manty\",\"manul\",\"manus\",\"mapau\",\"maple\",\"maqui\",\"marae\",\"marah\",\"maras\",\"march\",\"marcs\",\"mardy\",\"mares\",\"marge\",\"margs\",\"maria\",\"marid\",\"marka\",\"marks\",\"marle\",\"marls\",\"marly\",\"marms\",\"maron\",\"maror\",\"marra\",\"marri\",\"marry\",\"marse\",\"marsh\",\"marts\",\"marvy\",\"masas\",\"mased\",\"maser\",\"mases\",\"mashy\",\"masks\",\"mason\",\"massa\",\"masse\",\"massy\",\"masts\",\"masty\",\"masus\",\"matai\",\"match\",\"mated\",\"mater\",\"mates\",\"matey\",\"maths\",\"matin\",\"matlo\",\"matte\",\"matts\",\"matza\",\"matzo\",\"mauby\",\"mauds\",\"mauls\",\"maund\",\"mauri\",\"mausy\",\"mauts\",\"mauve\",\"mauzy\",\"maven\",\"mavie\",\"mavin\",\"mavis\",\"mawed\",\"mawks\",\"mawky\",\"mawns\",\"mawrs\",\"maxed\",\"maxes\",\"maxim\",\"maxis\",\"mayan\",\"mayas\",\"maybe\",\"mayed\",\"mayor\",\"mayos\",\"mayst\",\"mazed\",\"mazer\",\"mazes\",\"mazey\",\"mazut\",\"mbira\",\"meads\",\"meals\",\"mealy\",\"meane\",\"means\",\"meant\",\"meany\",\"meare\",\"mease\",\"meath\",\"meats\",\"meaty\",\"mebos\",\"mecca\",\"mechs\",\"mecks\",\"medal\",\"media\",\"medic\",\"medii\",\"medle\",\"meeds\",\"meers\",\"meets\",\"meffs\",\"meins\",\"meint\",\"meiny\",\"meith\",\"mekka\",\"melas\",\"melba\",\"melds\",\"melee\",\"melic\",\"melik\",\"mells\",\"melon\",\"melts\",\"melty\",\"memes\",\"memos\",\"menad\",\"mends\",\"mened\",\"menes\",\"menge\",\"mengs\",\"mensa\",\"mense\",\"mensh\",\"menta\",\"mento\",\"menus\",\"meous\",\"meows\",\"merch\",\"mercs\",\"mercy\",\"merde\",\"mered\",\"merel\",\"merer\",\"meres\",\"merge\",\"meril\",\"meris\",\"merit\",\"merks\",\"merle\",\"merls\",\"merry\",\"merse\",\"mesal\",\"mesas\",\"mesel\",\"meses\",\"meshy\",\"mesic\",\"mesne\",\"meson\",\"messy\",\"mesto\",\"metal\",\"meted\",\"meter\",\"metes\",\"metho\",\"meths\",\"metic\",\"metif\",\"metis\",\"metol\",\"metre\",\"metro\",\"meuse\",\"meved\",\"meves\",\"mewed\",\"mewls\",\"meynt\",\"mezes\",\"mezze\",\"mezzo\",\"mhorr\",\"miaou\",\"miaow\",\"miasm\",\"miaul\",\"micas\",\"miche\",\"micht\",\"micks\",\"micky\",\"micos\",\"micra\",\"micro\",\"middy\",\"midge\",\"midgy\",\"midis\",\"midst\",\"miens\",\"mieve\",\"miffs\",\"miffy\",\"mifty\",\"miggs\",\"might\",\"mihas\",\"mihis\",\"miked\",\"mikes\",\"mikra\",\"mikva\",\"milch\",\"milds\",\"miler\",\"miles\",\"milfs\",\"milia\",\"milko\",\"milks\",\"milky\",\"mille\",\"mills\",\"milor\",\"milos\",\"milpa\",\"milts\",\"milty\",\"miltz\",\"mimed\",\"mimeo\",\"mimer\",\"mimes\",\"mimic\",\"mimsy\",\"minae\",\"minar\",\"minas\",\"mince\",\"mincy\",\"minds\",\"mined\",\"miner\",\"mines\",\"minge\",\"mings\",\"mingy\",\"minim\",\"minis\",\"minke\",\"minks\",\"minny\",\"minor\",\"minos\",\"mints\",\"minty\",\"minus\",\"mired\",\"mires\",\"mirex\",\"mirid\",\"mirin\",\"mirks\",\"mirky\",\"mirly\",\"miros\",\"mirth\",\"mirvs\",\"mirza\",\"misch\",\"misdo\",\"miser\",\"mises\",\"misgo\",\"misos\",\"missa\",\"missy\",\"mists\",\"misty\",\"mitch\",\"miter\",\"mites\",\"mitis\",\"mitre\",\"mitts\",\"mixed\",\"mixen\",\"mixer\",\"mixes\",\"mixte\",\"mixup\",\"mizen\",\"mizzy\",\"mneme\",\"moans\",\"moats\",\"mobby\",\"mobes\",\"mobey\",\"mobie\",\"moble\",\"mocha\",\"mochi\",\"mochs\",\"mochy\",\"mocks\",\"modal\",\"model\",\"modem\",\"moder\",\"modes\",\"modge\",\"modii\",\"modus\",\"moers\",\"mofos\",\"moggy\",\"mogul\",\"mohel\",\"mohos\",\"mohrs\",\"mohua\",\"mohur\",\"moile\",\"moils\",\"moira\",\"moire\",\"moist\",\"moits\",\"mojos\",\"mokes\",\"mokis\",\"mokos\",\"molal\",\"molar\",\"molas\",\"molds\",\"moldy\",\"moled\",\"moles\",\"molla\",\"molls\",\"molly\",\"molto\",\"molts\",\"molys\",\"momes\",\"momma\",\"mommy\",\"momus\",\"monad\",\"monal\",\"monas\",\"monde\",\"mondo\",\"moner\",\"money\",\"mongo\",\"mongs\",\"monic\",\"monie\",\"monks\",\"monos\",\"monte\",\"month\",\"monty\",\"moobs\",\"mooch\",\"moods\",\"moody\",\"mooed\",\"mooks\",\"moola\",\"mooli\",\"mools\",\"mooly\",\"moong\",\"moons\",\"moony\",\"moops\",\"moors\",\"moory\",\"moose\",\"moots\",\"moove\",\"moped\",\"moper\",\"mopes\",\"mopey\",\"moppy\",\"mopsy\",\"mopus\",\"morae\",\"moral\",\"moras\",\"morat\",\"moray\",\"morel\",\"mores\",\"moria\",\"morne\",\"morns\",\"moron\",\"morph\",\"morra\",\"morro\",\"morse\",\"morts\",\"mosed\",\"moses\",\"mosey\",\"mosks\",\"mosso\",\"mossy\",\"moste\",\"mosts\",\"moted\",\"motel\",\"moten\",\"motes\",\"motet\",\"motey\",\"moths\",\"mothy\",\"motif\",\"motis\",\"motor\",\"motte\",\"motto\",\"motts\",\"motty\",\"motus\",\"motza\",\"mouch\",\"moues\",\"mould\",\"mouls\",\"moult\",\"mound\",\"mount\",\"moups\",\"mourn\",\"mouse\",\"moust\",\"mousy\",\"mouth\",\"moved\",\"mover\",\"moves\",\"movie\",\"mowas\",\"mowed\",\"mower\",\"mowra\",\"moxas\",\"moxie\",\"moyas\",\"moyle\",\"moyls\",\"mozed\",\"mozes\",\"mozos\",\"mpret\",\"mucho\",\"mucic\",\"mucid\",\"mucin\",\"mucks\",\"mucky\",\"mucor\",\"mucro\",\"mucus\",\"muddy\",\"mudge\",\"mudir\",\"mudra\",\"muffs\",\"mufti\",\"mugga\",\"muggs\",\"muggy\",\"muhly\",\"muids\",\"muils\",\"muirs\",\"muist\",\"mujik\",\"mulch\",\"mulct\",\"muled\",\"mules\",\"muley\",\"mulga\",\"mulie\",\"mulla\",\"mulls\",\"mulse\",\"mulsh\",\"mumms\",\"mummy\",\"mumps\",\"mumsy\",\"mumus\",\"munch\",\"munga\",\"munge\",\"mungo\",\"mungs\",\"munis\",\"munts\",\"muntu\",\"muons\",\"mural\",\"muras\",\"mured\",\"mures\",\"murex\",\"murid\",\"murks\",\"murky\",\"murls\",\"murly\",\"murra\",\"murre\",\"murri\",\"murrs\",\"murry\",\"murti\",\"murva\",\"musar\",\"musca\",\"mused\",\"muser\",\"muses\",\"muset\",\"musha\",\"mushy\",\"music\",\"musit\",\"musks\",\"musky\",\"musos\",\"musse\",\"mussy\",\"musth\",\"musts\",\"musty\",\"mutch\",\"muted\",\"muter\",\"mutes\",\"mutha\",\"mutis\",\"muton\",\"mutts\",\"muxed\",\"muxes\",\"muzak\",\"muzzy\",\"mvule\",\"myall\",\"mylar\",\"mynah\",\"mynas\",\"myoid\",\"myoma\",\"myope\",\"myops\",\"myopy\",\"myrrh\",\"mysid\",\"mythi\",\"myths\",\"mythy\",\"myxos\",\"mzees\",\"naams\",\"naans\",\"nabes\",\"nabis\",\"nabks\",\"nabla\",\"nabob\",\"nache\",\"nacho\",\"nacre\",\"nadas\",\"nadir\",\"naeve\",\"naevi\",\"naffs\",\"nagas\",\"naggy\",\"nagor\",\"nahal\",\"naiad\",\"naifs\",\"naiks\",\"nails\",\"naira\",\"nairu\",\"naive\",\"naked\",\"naker\",\"nakfa\",\"nalas\",\"naled\",\"nalla\",\"named\",\"namer\",\"names\",\"namma\",\"namus\",\"nanas\",\"nance\",\"nancy\",\"nandu\",\"nanna\",\"nanny\",\"nanos\",\"nanua\",\"napas\",\"naped\",\"napes\",\"napoo\",\"nappa\",\"nappe\",\"nappy\",\"naras\",\"narco\",\"narcs\",\"nards\",\"nares\",\"naric\",\"naris\",\"narks\",\"narky\",\"narre\",\"nasal\",\"nashi\",\"nasty\",\"natal\",\"natch\",\"nates\",\"natis\",\"natty\",\"nauch\",\"naunt\",\"naval\",\"navar\",\"navel\",\"naves\",\"navew\",\"navvy\",\"nawab\",\"nazes\",\"nazir\",\"nazis\",\"nduja\",\"neafe\",\"neals\",\"neaps\",\"nears\",\"neath\",\"neats\",\"nebek\",\"nebel\",\"necks\",\"neddy\",\"needs\",\"needy\",\"neeld\",\"neele\",\"neemb\",\"neems\",\"neeps\",\"neese\",\"neeze\",\"negro\",\"negus\",\"neifs\",\"neigh\",\"neist\",\"neive\",\"nelis\",\"nelly\",\"nemas\",\"nemns\",\"nempt\",\"nenes\",\"neons\",\"neper\",\"nepit\",\"neral\",\"nerds\",\"nerdy\",\"nerka\",\"nerks\",\"nerol\",\"nerts\",\"nertz\",\"nerve\",\"nervy\",\"nests\",\"netes\",\"netop\",\"netts\",\"netty\",\"neuks\",\"neume\",\"neums\",\"nevel\",\"never\",\"neves\",\"nevus\",\"newbs\",\"newed\",\"newel\",\"newer\",\"newie\",\"newly\",\"newsy\",\"newts\",\"nexts\",\"nexus\",\"ngaio\",\"ngana\",\"ngati\",\"ngoma\",\"ngwee\",\"nicad\",\"nicer\",\"niche\",\"nicht\",\"nicks\",\"nicol\",\"nidal\",\"nided\",\"nides\",\"nidor\",\"nidus\",\"niece\",\"niefs\",\"nieve\",\"nifes\",\"niffs\",\"niffy\",\"nifty\",\"niger\",\"nighs\",\"night\",\"nihil\",\"nikab\",\"nikah\",\"nikau\",\"nills\",\"nimbi\",\"nimbs\",\"nimps\",\"niner\",\"nines\",\"ninja\",\"ninny\",\"ninon\",\"ninth\",\"nipas\",\"nippy\",\"niqab\",\"nirls\",\"nirly\",\"nisei\",\"nisse\",\"nisus\",\"niter\",\"nites\",\"nitid\",\"niton\",\"nitre\",\"nitro\",\"nitry\",\"nitty\",\"nival\",\"nixed\",\"nixer\",\"nixes\",\"nixie\",\"nizam\",\"nkosi\",\"noahs\",\"nobby\",\"noble\",\"nobly\",\"nocks\",\"nodal\",\"noddy\",\"nodes\",\"nodus\",\"noels\",\"noggs\",\"nohow\",\"noils\",\"noily\",\"noint\",\"noirs\",\"noise\",\"noisy\",\"noles\",\"nolls\",\"nolos\",\"nomad\",\"nomas\",\"nomen\",\"nomes\",\"nomic\",\"nomoi\",\"nomos\",\"nonas\",\"nonce\",\"nones\",\"nonet\",\"nongs\",\"nonis\",\"nonny\",\"nonyl\",\"noobs\",\"nooit\",\"nooks\",\"nooky\",\"noons\",\"noops\",\"noose\",\"nopal\",\"noria\",\"noris\",\"norks\",\"norma\",\"norms\",\"north\",\"nosed\",\"noser\",\"noses\",\"nosey\",\"notal\",\"notch\",\"noted\",\"noter\",\"notes\",\"notum\",\"nould\",\"noule\",\"nouls\",\"nouns\",\"nouny\",\"noups\",\"novae\",\"novas\",\"novel\",\"novum\",\"noway\",\"nowed\",\"nowls\",\"nowts\",\"nowty\",\"noxal\",\"noxes\",\"noyau\",\"noyed\",\"noyes\",\"nubby\",\"nubia\",\"nucha\",\"nuddy\",\"nuder\",\"nudes\",\"nudge\",\"nudie\",\"nudzh\",\"nuffs\",\"nugae\",\"nuked\",\"nukes\",\"nulla\",\"nulls\",\"numbs\",\"numen\",\"nummy\",\"nunny\",\"nurds\",\"nurdy\",\"nurls\",\"nurrs\",\"nurse\",\"nutso\",\"nutsy\",\"nutty\",\"nyaff\",\"nyala\",\"nying\",\"nylon\",\"nymph\",\"nyssa\",\"oaked\",\"oaken\",\"oaker\",\"oakum\",\"oared\",\"oases\",\"oasis\",\"oasts\",\"oaten\",\"oater\",\"oaths\",\"oaves\",\"obang\",\"obeah\",\"obeli\",\"obese\",\"obeys\",\"obias\",\"obied\",\"obiit\",\"obits\",\"objet\",\"oboes\",\"obole\",\"oboli\",\"obols\",\"occam\",\"occur\",\"ocean\",\"ocher\",\"oches\",\"ochre\",\"ochry\",\"ocker\",\"ocrea\",\"octad\",\"octal\",\"octan\",\"octas\",\"octet\",\"octyl\",\"oculi\",\"odahs\",\"odals\",\"odder\",\"oddly\",\"odeon\",\"odeum\",\"odism\",\"odist\",\"odium\",\"odors\",\"odour\",\"odyle\",\"odyls\",\"ofays\",\"offal\",\"offed\",\"offer\",\"offie\",\"oflag\",\"often\",\"ofter\",\"ogams\",\"ogeed\",\"ogees\",\"oggin\",\"ogham\",\"ogive\",\"ogled\",\"ogler\",\"ogles\",\"ogmic\",\"ogres\",\"ohias\",\"ohing\",\"ohmic\",\"ohone\",\"oidia\",\"oiled\",\"oiler\",\"oinks\",\"oints\",\"ojime\",\"okapi\",\"okays\",\"okehs\",\"okras\",\"oktas\",\"olden\",\"older\",\"oldie\",\"oleic\",\"olein\",\"olent\",\"oleos\",\"oleum\",\"olios\",\"olive\",\"ollas\",\"ollav\",\"oller\",\"ollie\",\"ology\",\"olpae\",\"olpes\",\"omasa\",\"omber\",\"ombre\",\"ombus\",\"omega\",\"omens\",\"omers\",\"omits\",\"omlah\",\"omovs\",\"omrah\",\"oncer\",\"onces\",\"oncet\",\"oncus\",\"onely\",\"oners\",\"onery\",\"onion\",\"onium\",\"onkus\",\"onlay\",\"onned\",\"onset\",\"ontic\",\"oobit\",\"oohed\",\"oomph\",\"oonts\",\"ooped\",\"oorie\",\"ooses\",\"ootid\",\"oozed\",\"oozes\",\"opahs\",\"opals\",\"opens\",\"opepe\",\"opera\",\"opine\",\"oping\",\"opium\",\"oppos\",\"opsin\",\"opted\",\"opter\",\"optic\",\"orach\",\"oracy\",\"orals\",\"orang\",\"orant\",\"orate\",\"orbed\",\"orbit\",\"orcas\",\"orcin\",\"order\",\"ordos\",\"oread\",\"orfes\",\"organ\",\"orgia\",\"orgic\",\"orgue\",\"oribi\",\"oriel\",\"orixa\",\"orles\",\"orlon\",\"orlop\",\"ormer\",\"ornis\",\"orpin\",\"orris\",\"ortho\",\"orval\",\"orzos\",\"oscar\",\"oshac\",\"osier\",\"osmic\",\"osmol\",\"ossia\",\"ostia\",\"otaku\",\"otary\",\"other\",\"ottar\",\"otter\",\"ottos\",\"oubit\",\"oucht\",\"ouens\",\"ought\",\"ouija\",\"oulks\",\"oumas\",\"ounce\",\"oundy\",\"oupas\",\"ouped\",\"ouphe\",\"ouphs\",\"ourie\",\"ousel\",\"ousts\",\"outby\",\"outdo\",\"outed\",\"outer\",\"outgo\",\"outre\",\"outro\",\"outta\",\"ouzel\",\"ouzos\",\"ovals\",\"ovary\",\"ovate\",\"ovels\",\"ovens\",\"overs\",\"overt\",\"ovine\",\"ovist\",\"ovoid\",\"ovoli\",\"ovolo\",\"ovule\",\"owche\",\"owies\",\"owing\",\"owled\",\"owler\",\"owlet\",\"owned\",\"owner\",\"owres\",\"owrie\",\"owsen\",\"oxbow\",\"oxers\",\"oxeye\",\"oxide\",\"oxids\",\"oxies\",\"oxime\",\"oxims\",\"oxlip\",\"oxter\",\"oyers\",\"ozeki\",\"ozone\",\"ozzie\",\"paals\",\"paans\",\"pacas\",\"paced\",\"pacer\",\"paces\",\"pacey\",\"pacha\",\"packs\",\"pacos\",\"pacta\",\"pacts\",\"paddy\",\"padis\",\"padle\",\"padma\",\"padre\",\"padri\",\"paean\",\"paedo\",\"paeon\",\"pagan\",\"paged\",\"pager\",\"pages\",\"pagle\",\"pagod\",\"pagri\",\"paiks\",\"pails\",\"pains\",\"paint\",\"paire\",\"pairs\",\"paisa\",\"paise\",\"pakka\",\"palas\",\"palay\",\"palea\",\"paled\",\"paler\",\"pales\",\"palet\",\"palis\",\"palki\",\"palla\",\"palls\",\"pally\",\"palms\",\"palmy\",\"palpi\",\"palps\",\"palsa\",\"palsy\",\"pampa\",\"panax\",\"pance\",\"panda\",\"pands\",\"pandy\",\"paned\",\"panel\",\"panes\",\"panga\",\"pangs\",\"panic\",\"panim\",\"panko\",\"panne\",\"panni\",\"pansy\",\"panto\",\"pants\",\"panty\",\"paoli\",\"paolo\",\"papal\",\"papas\",\"papaw\",\"paper\",\"papes\",\"pappi\",\"pappy\",\"parae\",\"paras\",\"parch\",\"pardi\",\"pards\",\"pardy\",\"pared\",\"paren\",\"pareo\",\"parer\",\"pares\",\"pareu\",\"parev\",\"parge\",\"pargo\",\"paris\",\"parka\",\"parki\",\"parks\",\"parky\",\"parle\",\"parly\",\"parma\",\"parol\",\"parps\",\"parra\",\"parrs\",\"parry\",\"parse\",\"parti\",\"parts\",\"party\",\"parve\",\"parvo\",\"paseo\",\"pases\",\"pasha\",\"pashm\",\"paska\",\"paspy\",\"passe\",\"pasta\",\"paste\",\"pasts\",\"pasty\",\"patch\",\"pated\",\"paten\",\"pater\",\"pates\",\"paths\",\"patin\",\"patio\",\"patka\",\"patly\",\"patsy\",\"patte\",\"patty\",\"patus\",\"pauas\",\"pauls\",\"pause\",\"pavan\",\"paved\",\"paven\",\"paver\",\"paves\",\"pavid\",\"pavin\",\"pavis\",\"pawas\",\"pawaw\",\"pawed\",\"pawer\",\"pawks\",\"pawky\",\"pawls\",\"pawns\",\"paxes\",\"payed\",\"payee\",\"payer\",\"payor\",\"paysd\",\"peace\",\"peach\",\"peage\",\"peags\",\"peaks\",\"peaky\",\"peals\",\"peans\",\"peare\",\"pearl\",\"pears\",\"peart\",\"pease\",\"peats\",\"peaty\",\"peavy\",\"peaze\",\"pebas\",\"pecan\",\"pechs\",\"pecke\",\"pecks\",\"pecky\",\"pedal\",\"pedes\",\"pedis\",\"pedro\",\"peece\",\"peeks\",\"peels\",\"peens\",\"peeoy\",\"peepe\",\"peeps\",\"peers\",\"peery\",\"peeve\",\"peggy\",\"peghs\",\"peins\",\"peise\",\"peize\",\"pekan\",\"pekes\",\"pekin\",\"pekoe\",\"pelas\",\"pelau\",\"peles\",\"pelfs\",\"pells\",\"pelma\",\"pelon\",\"pelta\",\"pelts\",\"penal\",\"pence\",\"pends\",\"pendu\",\"pened\",\"penes\",\"pengo\",\"penie\",\"penis\",\"penks\",\"penna\",\"penne\",\"penni\",\"penny\",\"pents\",\"peons\",\"peony\",\"pepla\",\"pepos\",\"peppy\",\"pepsi\",\"perai\",\"perce\",\"perch\",\"percs\",\"perdu\",\"perdy\",\"perea\",\"peres\",\"peril\",\"peris\",\"perks\",\"perky\",\"perms\",\"perns\",\"perog\",\"perps\",\"perry\",\"perse\",\"perst\",\"perts\",\"perve\",\"pervo\",\"pervs\",\"pervy\",\"pesky\",\"pesos\",\"pesto\",\"pests\",\"pesty\",\"petal\",\"petar\",\"peter\",\"petit\",\"petre\",\"petri\",\"petti\",\"petto\",\"petty\",\"pewee\",\"pewit\",\"peyse\",\"phage\",\"phang\",\"phare\",\"pharm\",\"phase\",\"pheer\",\"phene\",\"pheon\",\"phese\",\"phial\",\"phish\",\"phizz\",\"phlox\",\"phoca\",\"phone\",\"phono\",\"phons\",\"phony\",\"photo\",\"phots\",\"phpht\",\"phuts\",\"phyla\",\"phyle\",\"piani\",\"piano\",\"pians\",\"pibal\",\"pical\",\"picas\",\"piccy\",\"picks\",\"picky\",\"picot\",\"picra\",\"picul\",\"piece\",\"piend\",\"piers\",\"piert\",\"pieta\",\"piets\",\"piety\",\"piezo\",\"piggy\",\"pight\",\"pigmy\",\"piing\",\"pikas\",\"pikau\",\"piked\",\"piker\",\"pikes\",\"pikey\",\"pikis\",\"pikul\",\"pilae\",\"pilaf\",\"pilao\",\"pilar\",\"pilau\",\"pilaw\",\"pilch\",\"pilea\",\"piled\",\"pilei\",\"piler\",\"piles\",\"pilis\",\"pills\",\"pilot\",\"pilow\",\"pilum\",\"pilus\",\"pimas\",\"pimps\",\"pinas\",\"pinch\",\"pined\",\"pines\",\"piney\",\"pingo\",\"pings\",\"pinko\",\"pinks\",\"pinky\",\"pinna\",\"pinny\",\"pinon\",\"pinot\",\"pinta\",\"pinto\",\"pints\",\"pinup\",\"pions\",\"piony\",\"pious\",\"pioye\",\"pioys\",\"pipal\",\"pipas\",\"piped\",\"piper\",\"pipes\",\"pipet\",\"pipis\",\"pipit\",\"pippy\",\"pipul\",\"pique\",\"pirai\",\"pirls\",\"pirns\",\"pirog\",\"pisco\",\"pises\",\"pisky\",\"pisos\",\"pissy\",\"piste\",\"pitas\",\"pitch\",\"piths\",\"pithy\",\"piton\",\"pitot\",\"pitta\",\"piums\",\"pivot\",\"pixel\",\"pixes\",\"pixie\",\"pized\",\"pizes\",\"pizza\",\"plaas\",\"place\",\"plack\",\"plage\",\"plaid\",\"plain\",\"plait\",\"plane\",\"plank\",\"plans\",\"plant\",\"plaps\",\"plash\",\"plasm\",\"plast\",\"plate\",\"plats\",\"platt\",\"platy\",\"playa\",\"plays\",\"plaza\",\"plead\",\"pleas\",\"pleat\",\"plebe\",\"plebs\",\"plena\",\"pleon\",\"plesh\",\"plews\",\"plica\",\"plied\",\"plier\",\"plies\",\"plims\",\"pling\",\"plink\",\"ploat\",\"plods\",\"plong\",\"plonk\",\"plook\",\"plops\",\"plots\",\"plotz\",\"plouk\",\"plows\",\"ploye\",\"ploys\",\"pluck\",\"plues\",\"pluff\",\"plugs\",\"plumb\",\"plume\",\"plump\",\"plums\",\"plumy\",\"plunk\",\"pluot\",\"plush\",\"pluto\",\"plyer\",\"poach\",\"poaka\",\"poake\",\"poboy\",\"pocks\",\"pocky\",\"podal\",\"poddy\",\"podex\",\"podge\",\"podgy\",\"podia\",\"poems\",\"poeps\",\"poesy\",\"poets\",\"pogey\",\"pogge\",\"pogos\",\"pohed\",\"poilu\",\"poind\",\"point\",\"poise\",\"pokal\",\"poked\",\"poker\",\"pokes\",\"pokey\",\"pokie\",\"polar\",\"poled\",\"poler\",\"poles\",\"poley\",\"polio\",\"polis\",\"polje\",\"polka\",\"polks\",\"polls\",\"polly\",\"polos\",\"polts\",\"polyp\",\"polys\",\"pombe\",\"pomes\",\"pommy\",\"pomos\",\"pomps\",\"ponce\",\"poncy\",\"ponds\",\"pones\",\"poney\",\"ponga\",\"pongo\",\"pongs\",\"pongy\",\"ponks\",\"ponts\",\"ponty\",\"ponzu\",\"pooch\",\"poods\",\"pooed\",\"poofs\",\"poofy\",\"poohs\",\"pooja\",\"pooka\",\"pooks\",\"pools\",\"poons\",\"poops\",\"poopy\",\"poori\",\"poort\",\"poots\",\"poove\",\"poovy\",\"popes\",\"poppa\",\"poppy\",\"popsy\",\"porae\",\"poral\",\"porch\",\"pored\",\"porer\",\"pores\",\"porge\",\"porgy\",\"porin\",\"porks\",\"porky\",\"porno\",\"porns\",\"porny\",\"porta\",\"ports\",\"porty\",\"posed\",\"poser\",\"poses\",\"posey\",\"posho\",\"posit\",\"posse\",\"posts\",\"potae\",\"potch\",\"poted\",\"potes\",\"potin\",\"potoo\",\"potsy\",\"potto\",\"potts\",\"potty\",\"pouch\",\"pouff\",\"poufs\",\"pouke\",\"pouks\",\"poule\",\"poulp\",\"poult\",\"pound\",\"poupe\",\"poupt\",\"pours\",\"pouts\",\"pouty\",\"powan\",\"power\",\"powin\",\"pownd\",\"powns\",\"powny\",\"powre\",\"poxed\",\"poxes\",\"poynt\",\"poyou\",\"poyse\",\"pozzy\",\"praam\",\"prads\",\"prahu\",\"prams\",\"prana\",\"prang\",\"prank\",\"praos\",\"prase\",\"prate\",\"prats\",\"pratt\",\"praty\",\"praus\",\"prawn\",\"prays\",\"predy\",\"preed\",\"preen\",\"prees\",\"preif\",\"prems\",\"premy\",\"prent\",\"preon\",\"preop\",\"preps\",\"presa\",\"prese\",\"press\",\"prest\",\"preve\",\"prexy\",\"preys\",\"prial\",\"price\",\"prick\",\"pricy\",\"pride\",\"pried\",\"prief\",\"prier\",\"pries\",\"prigs\",\"prill\",\"prima\",\"prime\",\"primi\",\"primo\",\"primp\",\"prims\",\"primy\",\"prink\",\"print\",\"prion\",\"prior\",\"prise\",\"prism\",\"priss\",\"privy\",\"prize\",\"proas\",\"probe\",\"probs\",\"prods\",\"proem\",\"profs\",\"progs\",\"proin\",\"proke\",\"prole\",\"proll\",\"promo\",\"proms\",\"prone\",\"prong\",\"pronk\",\"proof\",\"props\",\"prore\",\"prose\",\"proso\",\"pross\",\"prost\",\"prosy\",\"proto\",\"proud\",\"proul\",\"prove\",\"prowl\",\"prows\",\"proxy\",\"proyn\",\"prude\",\"prune\",\"prunt\",\"pruta\",\"pryer\",\"pryse\",\"psalm\",\"pseud\",\"pshaw\",\"psion\",\"psoae\",\"psoai\",\"psoas\",\"psora\",\"psych\",\"psyop\",\"pubco\",\"pubes\",\"pubic\",\"pubis\",\"pucan\",\"pucer\",\"puces\",\"pucka\",\"pucks\",\"puddy\",\"pudge\",\"pudgy\",\"pudic\",\"pudor\",\"pudsy\",\"pudus\",\"puers\",\"puffa\",\"puffs\",\"puffy\",\"puggy\",\"pugil\",\"puhas\",\"pujah\",\"pujas\",\"pukas\",\"puked\",\"puker\",\"pukes\",\"pukey\",\"pukka\",\"pukus\",\"pulao\",\"pulas\",\"puled\",\"puler\",\"pules\",\"pulik\",\"pulis\",\"pulka\",\"pulks\",\"pulli\",\"pulls\",\"pully\",\"pulmo\",\"pulps\",\"pulpy\",\"pulse\",\"pulus\",\"pumas\",\"pumie\",\"pumps\",\"punas\",\"punce\",\"punch\",\"punga\",\"pungs\",\"punji\",\"punka\",\"punks\",\"punky\",\"punny\",\"punto\",\"punts\",\"punty\",\"pupae\",\"pupal\",\"pupas\",\"pupil\",\"puppy\",\"pupus\",\"purda\",\"pured\",\"puree\",\"purer\",\"pures\",\"purge\",\"purin\",\"puris\",\"purls\",\"purpy\",\"purrs\",\"purse\",\"pursy\",\"purty\",\"puses\",\"pushy\",\"pusle\",\"pussy\",\"putid\",\"puton\",\"putti\",\"putto\",\"putts\",\"putty\",\"puzel\",\"pwned\",\"pyats\",\"pyets\",\"pygal\",\"pygmy\",\"pyins\",\"pylon\",\"pyned\",\"pynes\",\"pyoid\",\"pyots\",\"pyral\",\"pyran\",\"pyres\",\"pyrex\",\"pyric\",\"pyros\",\"pyxed\",\"pyxes\",\"pyxie\",\"pyxis\",\"pzazz\",\"qadis\",\"qaids\",\"qajaq\",\"qanat\",\"qapik\",\"qibla\",\"qophs\",\"qorma\",\"quack\",\"quads\",\"quaff\",\"quags\",\"quail\",\"quair\",\"quais\",\"quake\",\"quaky\",\"quale\",\"qualm\",\"quant\",\"quare\",\"quark\",\"quart\",\"quash\",\"quasi\",\"quass\",\"quate\",\"quats\",\"quayd\",\"quays\",\"qubit\",\"quean\",\"queen\",\"queer\",\"quell\",\"queme\",\"quena\",\"quern\",\"query\",\"quest\",\"queue\",\"queyn\",\"queys\",\"quich\",\"quick\",\"quids\",\"quiet\",\"quiff\",\"quill\",\"quilt\",\"quims\",\"quina\",\"quine\",\"quino\",\"quins\",\"quint\",\"quipo\",\"quips\",\"quipu\",\"quire\",\"quirk\",\"quirt\",\"quist\",\"quite\",\"quits\",\"quoad\",\"quods\",\"quoif\",\"quoin\",\"quoit\",\"quoll\",\"quonk\",\"quops\",\"quota\",\"quote\",\"quoth\",\"qursh\",\"quyte\",\"rabat\",\"rabbi\",\"rabic\",\"rabid\",\"rabis\",\"raced\",\"racer\",\"races\",\"rache\",\"racks\",\"racon\",\"radar\",\"radge\",\"radii\",\"radio\",\"radix\",\"radon\",\"raffs\",\"rafts\",\"ragas\",\"ragde\",\"raged\",\"ragee\",\"rager\",\"rages\",\"ragga\",\"raggs\",\"raggy\",\"ragis\",\"ragus\",\"rahed\",\"rahui\",\"raias\",\"raids\",\"raiks\",\"raile\",\"rails\",\"raine\",\"rains\",\"rainy\",\"raird\",\"raise\",\"raita\",\"raits\",\"rajah\",\"rajas\",\"rajes\",\"raked\",\"rakee\",\"raker\",\"rakes\",\"rakia\",\"rakis\",\"rakus\",\"rales\",\"rally\",\"ralph\",\"ramal\",\"ramee\",\"ramen\",\"ramet\",\"ramie\",\"ramin\",\"ramis\",\"rammy\",\"ramps\",\"ramus\",\"ranas\",\"rance\",\"ranch\",\"rands\",\"randy\",\"ranee\",\"ranga\",\"range\",\"rangi\",\"rangs\",\"rangy\",\"ranid\",\"ranis\",\"ranke\",\"ranks\",\"rants\",\"raped\",\"raper\",\"rapes\",\"raphe\",\"rapid\",\"rappe\",\"rared\",\"raree\",\"rarer\",\"rares\",\"rarks\",\"rased\",\"raser\",\"rases\",\"rasps\",\"raspy\",\"rasse\",\"rasta\",\"ratal\",\"ratan\",\"ratas\",\"ratch\",\"rated\",\"ratel\",\"rater\",\"rates\",\"ratha\",\"rathe\",\"raths\",\"ratio\",\"ratoo\",\"ratos\",\"ratty\",\"ratus\",\"rauns\",\"raupo\",\"raved\",\"ravel\",\"raven\",\"raver\",\"raves\",\"ravey\",\"ravin\",\"rawer\",\"rawin\",\"rawly\",\"rawns\",\"raxed\",\"raxes\",\"rayah\",\"rayas\",\"rayed\",\"rayle\",\"rayne\",\"rayon\",\"razed\",\"razee\",\"razer\",\"razes\",\"razoo\",\"razor\",\"reach\",\"react\",\"readd\",\"reads\",\"ready\",\"reais\",\"reaks\",\"realm\",\"realo\",\"reals\",\"reame\",\"reams\",\"reamy\",\"reans\",\"reaps\",\"rearm\",\"rears\",\"reast\",\"reata\",\"reate\",\"reave\",\"rebar\",\"rebbe\",\"rebec\",\"rebel\",\"rebid\",\"rebit\",\"rebop\",\"rebus\",\"rebut\",\"rebuy\",\"recal\",\"recap\",\"recce\",\"recco\",\"reccy\",\"recit\",\"recks\",\"recon\",\"recta\",\"recti\",\"recto\",\"recur\",\"recut\",\"redan\",\"redds\",\"reddy\",\"reded\",\"redes\",\"redia\",\"redid\",\"redip\",\"redly\",\"redon\",\"redos\",\"redox\",\"redry\",\"redub\",\"redux\",\"redye\",\"reech\",\"reede\",\"reeds\",\"reedy\",\"reefs\",\"reefy\",\"reeks\",\"reeky\",\"reels\",\"reens\",\"reest\",\"reeve\",\"refed\",\"refel\",\"refer\",\"reffo\",\"refis\",\"refit\",\"refix\",\"refly\",\"refry\",\"regal\",\"regar\",\"reges\",\"reggo\",\"regie\",\"regma\",\"regna\",\"regos\",\"regur\",\"rehab\",\"rehem\",\"reifs\",\"reify\",\"reign\",\"reiki\",\"reiks\",\"reink\",\"reins\",\"reird\",\"reist\",\"reive\",\"rejig\",\"rejon\",\"reked\",\"rekes\",\"rekey\",\"relax\",\"relay\",\"relet\",\"relic\",\"relie\",\"relit\",\"rello\",\"reman\",\"remap\",\"remen\",\"remet\",\"remex\",\"remit\",\"remix\",\"renal\",\"renay\",\"rends\",\"renew\",\"reney\",\"renga\",\"renig\",\"renin\",\"renne\",\"renos\",\"rente\",\"rents\",\"reoil\",\"reorg\",\"repay\",\"repeg\",\"repel\",\"repin\",\"repla\",\"reply\",\"repos\",\"repot\",\"repps\",\"repro\",\"reran\",\"rerig\",\"rerun\",\"resat\",\"resaw\",\"resay\",\"resee\",\"reses\",\"reset\",\"resew\",\"resid\",\"resin\",\"resit\",\"resod\",\"resow\",\"resto\",\"rests\",\"resty\",\"resus\",\"retag\",\"retax\",\"retch\",\"retem\",\"retia\",\"retie\",\"retox\",\"retro\",\"retry\",\"reuse\",\"revel\",\"revet\",\"revie\",\"revue\",\"rewan\",\"rewax\",\"rewed\",\"rewet\",\"rewin\",\"rewon\",\"rewth\",\"rexes\",\"rezes\",\"rheas\",\"rheme\",\"rheum\",\"rhies\",\"rhime\",\"rhine\",\"rhino\",\"rhody\",\"rhomb\",\"rhone\",\"rhumb\",\"rhyme\",\"rhyne\",\"rhyta\",\"riads\",\"rials\",\"riant\",\"riata\",\"ribas\",\"ribby\",\"ribes\",\"riced\",\"ricer\",\"rices\",\"ricey\",\"richt\",\"ricin\",\"ricks\",\"rider\",\"rides\",\"ridge\",\"ridgy\",\"ridic\",\"riels\",\"riems\",\"rieve\",\"rifer\",\"riffs\",\"rifle\",\"rifte\",\"rifts\",\"rifty\",\"riggs\",\"right\",\"rigid\",\"rigol\",\"rigor\",\"riled\",\"riles\",\"riley\",\"rille\",\"rills\",\"rimae\",\"rimed\",\"rimer\",\"rimes\",\"rimus\",\"rinds\",\"rindy\",\"rines\",\"rings\",\"rinks\",\"rinse\",\"rioja\",\"riots\",\"riped\",\"ripen\",\"riper\",\"ripes\",\"ripps\",\"risen\",\"riser\",\"rises\",\"rishi\",\"risks\",\"risky\",\"risps\",\"risus\",\"rites\",\"ritts\",\"ritzy\",\"rival\",\"rivas\",\"rived\",\"rivel\",\"riven\",\"river\",\"rives\",\"rivet\",\"riyal\",\"rizas\",\"roach\",\"roads\",\"roams\",\"roans\",\"roars\",\"roary\",\"roast\",\"roate\",\"robed\",\"robes\",\"robin\",\"roble\",\"robot\",\"rocks\",\"rocky\",\"roded\",\"rodeo\",\"rodes\",\"roger\",\"rogue\",\"roguy\",\"rohes\",\"roids\",\"roils\",\"roily\",\"roins\",\"roist\",\"rojak\",\"rojis\",\"roked\",\"roker\",\"rokes\",\"rolag\",\"roles\",\"rolfs\",\"rolls\",\"romal\",\"roman\",\"romeo\",\"romps\",\"ronde\",\"rondo\",\"roneo\",\"rones\",\"ronin\",\"ronne\",\"ronte\",\"ronts\",\"roods\",\"roofs\",\"roofy\",\"rooks\",\"rooky\",\"rooms\",\"roomy\",\"roons\",\"roops\",\"roopy\",\"roosa\",\"roose\",\"roost\",\"roots\",\"rooty\",\"roped\",\"roper\",\"ropes\",\"ropey\",\"roque\",\"roral\",\"rores\",\"roric\",\"rorid\",\"rorie\",\"rorts\",\"rorty\",\"rosed\",\"roses\",\"roset\",\"roshi\",\"rosin\",\"rosit\",\"rosti\",\"rosts\",\"rotal\",\"rotan\",\"rotas\",\"rotch\",\"roted\",\"rotes\",\"rotis\",\"rotls\",\"roton\",\"rotor\",\"rotos\",\"rotte\",\"rouen\",\"roues\",\"rouge\",\"rough\",\"roule\",\"rouls\",\"roums\",\"round\",\"roups\",\"roupy\",\"rouse\",\"roust\",\"route\",\"routh\",\"routs\",\"roved\",\"roven\",\"rover\",\"roves\",\"rowan\",\"rowdy\",\"rowed\",\"rowel\",\"rowen\",\"rower\",\"rowie\",\"rowme\",\"rownd\",\"rowth\",\"rowts\",\"royal\",\"royne\",\"royst\",\"rozet\",\"rozit\",\"ruana\",\"rubai\",\"rubby\",\"rubel\",\"rubes\",\"rubin\",\"ruble\",\"rubli\",\"rubus\",\"ruche\",\"rucks\",\"rudas\",\"rudds\",\"ruddy\",\"ruder\",\"rudes\",\"rudie\",\"rudis\",\"rueda\",\"ruers\",\"ruffe\",\"ruffs\",\"rugae\",\"rugal\",\"rugby\",\"ruggy\",\"ruing\",\"ruins\",\"rukhs\",\"ruled\",\"ruler\",\"rules\",\"rumal\",\"rumba\",\"rumbo\",\"rumen\",\"rumes\",\"rumly\",\"rummy\",\"rumor\",\"rumpo\",\"rumps\",\"rumpy\",\"runch\",\"runds\",\"runed\",\"runes\",\"rungs\",\"runic\",\"runny\",\"runts\",\"runty\",\"rupee\",\"rupia\",\"rural\",\"rurps\",\"rurus\",\"rusas\",\"ruses\",\"rushy\",\"rusks\",\"rusma\",\"russe\",\"rusts\",\"rusty\",\"ruths\",\"rutin\",\"rutty\",\"ryals\",\"rybat\",\"ryked\",\"rykes\",\"rymme\",\"rynds\",\"ryots\",\"ryper\",\"saags\",\"sabal\",\"sabed\",\"saber\",\"sabes\",\"sabha\",\"sabin\",\"sabir\",\"sable\",\"sabot\",\"sabra\",\"sabre\",\"sacks\",\"sacra\",\"saddo\",\"sades\",\"sadhe\",\"sadhu\",\"sadis\",\"sadly\",\"sados\",\"sadza\",\"safed\",\"safer\",\"safes\",\"sagas\",\"sager\",\"sages\",\"saggy\",\"sagos\",\"sagum\",\"saheb\",\"sahib\",\"saice\",\"saick\",\"saics\",\"saids\",\"saiga\",\"sails\",\"saims\",\"saine\",\"sains\",\"saint\",\"sairs\",\"saist\",\"saith\",\"sajou\",\"sakai\",\"saker\",\"sakes\",\"sakia\",\"sakis\",\"sakti\",\"salad\",\"salal\",\"salat\",\"salep\",\"sales\",\"salet\",\"salic\",\"salix\",\"salle\",\"sally\",\"salmi\",\"salol\",\"salon\",\"salop\",\"salpa\",\"salps\",\"salsa\",\"salse\",\"salto\",\"salts\",\"salty\",\"salue\",\"salut\",\"salve\",\"salvo\",\"saman\",\"samas\",\"samba\",\"sambo\",\"samek\",\"samel\",\"samen\",\"sames\",\"samey\",\"samfu\",\"sammy\",\"sampi\",\"samps\",\"sands\",\"sandy\",\"saned\",\"saner\",\"sanes\",\"sanga\",\"sangh\",\"sango\",\"sangs\",\"sanko\",\"sansa\",\"santo\",\"sants\",\"saola\",\"sapan\",\"sapid\",\"sapor\",\"sappy\",\"saran\",\"sards\",\"sared\",\"saree\",\"sarge\",\"sargo\",\"sarin\",\"saris\",\"sarks\",\"sarky\",\"sarod\",\"saros\",\"sarus\",\"saser\",\"sasin\",\"sasse\",\"sassy\",\"satai\",\"satay\",\"sated\",\"satem\",\"sates\",\"satin\",\"satis\",\"satyr\",\"sauba\",\"sauce\",\"sauch\",\"saucy\",\"saugh\",\"sauls\",\"sault\",\"sauna\",\"saunt\",\"saury\",\"saute\",\"sauts\",\"saved\",\"saver\",\"saves\",\"savey\",\"savin\",\"savor\",\"savoy\",\"savvy\",\"sawah\",\"sawed\",\"sawer\",\"saxes\",\"sayed\",\"sayer\",\"sayid\",\"sayne\",\"sayon\",\"sayst\",\"sazes\",\"scabs\",\"scads\",\"scaff\",\"scags\",\"scail\",\"scala\",\"scald\",\"scale\",\"scall\",\"scalp\",\"scaly\",\"scamp\",\"scams\",\"scand\",\"scans\",\"scant\",\"scapa\",\"scape\",\"scapi\",\"scare\",\"scarf\",\"scarp\",\"scars\",\"scart\",\"scary\",\"scath\",\"scats\",\"scatt\",\"scaud\",\"scaup\",\"scaur\",\"scaws\",\"sceat\",\"scena\",\"scend\",\"scene\",\"scent\",\"schav\",\"schmo\",\"schul\",\"schwa\",\"scion\",\"sclim\",\"scody\",\"scoff\",\"scogs\",\"scold\",\"scone\",\"scoog\",\"scoop\",\"scoot\",\"scopa\",\"scope\",\"scops\",\"score\",\"scorn\",\"scots\",\"scoug\",\"scoup\",\"scour\",\"scout\",\"scowl\",\"scowp\",\"scows\",\"scrab\",\"scrae\",\"scrag\",\"scram\",\"scran\",\"scrap\",\"scrat\",\"scraw\",\"scray\",\"scree\",\"screw\",\"scrim\",\"scrip\",\"scrob\",\"scrod\",\"scrog\",\"scrow\",\"scrub\",\"scrum\",\"scuba\",\"scudi\",\"scudo\",\"scuds\",\"scuff\",\"scuft\",\"scugs\",\"sculk\",\"scull\",\"sculp\",\"sculs\",\"scums\",\"scups\",\"scurf\",\"scurs\",\"scuse\",\"scuta\",\"scute\",\"scuts\",\"scuzz\",\"scyes\",\"sdayn\",\"sdein\",\"seals\",\"seame\",\"seams\",\"seamy\",\"seans\",\"seare\",\"sears\",\"sease\",\"seats\",\"seaze\",\"sebum\",\"secco\",\"sechs\",\"sects\",\"sedan\",\"seder\",\"sedes\",\"sedge\",\"sedgy\",\"sedum\",\"seeds\",\"seedy\",\"seeks\",\"seeld\",\"seels\",\"seely\",\"seems\",\"seeps\",\"seepy\",\"seers\",\"sefer\",\"segar\",\"segni\",\"segno\",\"segol\",\"segos\",\"segue\",\"sehri\",\"seifs\",\"seils\",\"seine\",\"seirs\",\"seise\",\"seism\",\"seity\",\"seiza\",\"seize\",\"sekos\",\"sekts\",\"selah\",\"seles\",\"selfs\",\"sella\",\"selle\",\"sells\",\"selva\",\"semee\",\"semen\",\"semes\",\"semie\",\"semis\",\"senas\",\"sends\",\"senes\",\"sengi\",\"senna\",\"senor\",\"sensa\",\"sense\",\"sensi\",\"sente\",\"senti\",\"sents\",\"senvy\",\"senza\",\"sepad\",\"sepal\",\"sepia\",\"sepic\",\"sepoy\",\"septa\",\"septs\",\"serac\",\"serai\",\"seral\",\"sered\",\"serer\",\"seres\",\"serfs\",\"serge\",\"seric\",\"serif\",\"serin\",\"serks\",\"seron\",\"serow\",\"serra\",\"serre\",\"serrs\",\"serry\",\"serum\",\"serve\",\"servo\",\"sesey\",\"sessa\",\"setae\",\"setal\",\"seton\",\"setts\",\"setup\",\"seven\",\"sever\",\"sewan\",\"sewar\",\"sewed\",\"sewel\",\"sewen\",\"sewer\",\"sewin\",\"sexed\",\"sexer\",\"sexes\",\"sexto\",\"sexts\",\"seyen\",\"shack\",\"shade\",\"shads\",\"shady\",\"shaft\",\"shags\",\"shahs\",\"shake\",\"shako\",\"shakt\",\"shaky\",\"shale\",\"shall\",\"shalm\",\"shalt\",\"shaly\",\"shama\",\"shame\",\"shams\",\"shand\",\"shank\",\"shans\",\"shape\",\"shaps\",\"shard\",\"share\",\"shark\",\"sharn\",\"sharp\",\"shash\",\"shaul\",\"shave\",\"shawl\",\"shawm\",\"shawn\",\"shaws\",\"shaya\",\"shays\",\"shchi\",\"sheaf\",\"sheal\",\"shear\",\"sheas\",\"sheds\",\"sheel\",\"sheen\",\"sheep\",\"sheer\",\"sheet\",\"sheik\",\"shelf\",\"shell\",\"shend\",\"shent\",\"sheol\",\"sherd\",\"shere\",\"shero\",\"shets\",\"sheva\",\"shewn\",\"shews\",\"shiai\",\"shied\",\"shiel\",\"shier\",\"shies\",\"shift\",\"shill\",\"shily\",\"shims\",\"shine\",\"shins\",\"shiny\",\"ships\",\"shire\",\"shirk\",\"shirr\",\"shirs\",\"shirt\",\"shish\",\"shiso\",\"shist\",\"shite\",\"shits\",\"shiur\",\"shiva\",\"shive\",\"shivs\",\"shlep\",\"shlub\",\"shmek\",\"shmoe\",\"shoal\",\"shoat\",\"shock\",\"shoed\",\"shoer\",\"shoes\",\"shogi\",\"shogs\",\"shoji\",\"shojo\",\"shola\",\"shone\",\"shook\",\"shool\",\"shoon\",\"shoos\",\"shoot\",\"shope\",\"shops\",\"shore\",\"shorl\",\"shorn\",\"short\",\"shote\",\"shots\",\"shott\",\"shout\",\"shove\",\"showd\",\"shown\",\"shows\",\"showy\",\"shoyu\",\"shred\",\"shrew\",\"shris\",\"shrow\",\"shrub\",\"shrug\",\"shtik\",\"shtum\",\"shtup\",\"shuck\",\"shule\",\"shuln\",\"shuls\",\"shuns\",\"shunt\",\"shura\",\"shush\",\"shute\",\"shuts\",\"shwas\",\"shyer\",\"shyly\",\"sials\",\"sibbs\",\"sibyl\",\"sices\",\"sicht\",\"sicko\",\"sicks\",\"sicky\",\"sidas\",\"sided\",\"sider\",\"sides\",\"sidha\",\"sidhe\",\"sidle\",\"siege\",\"sield\",\"siens\",\"sient\",\"sieth\",\"sieur\",\"sieve\",\"sifts\",\"sighs\",\"sight\",\"sigil\",\"sigla\",\"sigma\",\"signa\",\"signs\",\"sijos\",\"sikas\",\"siker\",\"sikes\",\"silds\",\"siled\",\"silen\",\"siler\",\"siles\",\"silex\",\"silks\",\"silky\",\"sills\",\"silly\",\"silos\",\"silts\",\"silty\",\"silva\",\"simar\",\"simas\",\"simba\",\"simis\",\"simps\",\"simul\",\"since\",\"sinds\",\"sined\",\"sines\",\"sinew\",\"singe\",\"sings\",\"sinhs\",\"sinks\",\"sinky\",\"sinus\",\"siped\",\"sipes\",\"sippy\",\"sired\",\"siree\",\"siren\",\"sires\",\"sirih\",\"siris\",\"siroc\",\"sirra\",\"sirup\",\"sisal\",\"sises\",\"sissy\",\"sista\",\"sists\",\"sitar\",\"sited\",\"sites\",\"sithe\",\"sitka\",\"situp\",\"situs\",\"siver\",\"sixer\",\"sixes\",\"sixmo\",\"sixte\",\"sixth\",\"sixty\",\"sizar\",\"sized\",\"sizel\",\"sizer\",\"sizes\",\"skags\",\"skail\",\"skald\",\"skank\",\"skart\",\"skate\",\"skats\",\"skatt\",\"skaws\",\"skean\",\"skear\",\"skeds\",\"skeed\",\"skeef\",\"skeen\",\"skeer\",\"skees\",\"skeet\",\"skegg\",\"skegs\",\"skein\",\"skelf\",\"skell\",\"skelm\",\"skelp\",\"skene\",\"skens\",\"skeos\",\"skeps\",\"skers\",\"skets\",\"skews\",\"skids\",\"skied\",\"skier\",\"skies\",\"skiey\",\"skiff\",\"skill\",\"skimo\",\"skimp\",\"skims\",\"skink\",\"skins\",\"skint\",\"skios\",\"skips\",\"skirl\",\"skirr\",\"skirt\",\"skite\",\"skits\",\"skive\",\"skivy\",\"sklim\",\"skoal\",\"skody\",\"skoff\",\"skogs\",\"skols\",\"skool\",\"skort\",\"skosh\",\"skran\",\"skrik\",\"skuas\",\"skugs\",\"skulk\",\"skull\",\"skunk\",\"skyed\",\"skyer\",\"skyey\",\"skyfs\",\"skyre\",\"skyrs\",\"skyte\",\"slabs\",\"slack\",\"slade\",\"slaes\",\"slags\",\"slaid\",\"slain\",\"slake\",\"slams\",\"slane\",\"slang\",\"slank\",\"slant\",\"slaps\",\"slart\",\"slash\",\"slate\",\"slats\",\"slaty\",\"slave\",\"slaws\",\"slays\",\"slebs\",\"sleds\",\"sleek\",\"sleep\",\"sleer\",\"sleet\",\"slept\",\"slews\",\"sleys\",\"slice\",\"slick\",\"slide\",\"slier\",\"slily\",\"slime\",\"slims\",\"slimy\",\"sling\",\"slink\",\"slipe\",\"slips\",\"slipt\",\"slish\",\"slits\",\"slive\",\"sloan\",\"slobs\",\"sloes\",\"slogs\",\"sloid\",\"slojd\",\"slomo\",\"sloom\",\"sloop\",\"sloot\",\"slope\",\"slops\",\"slopy\",\"slorm\",\"slosh\",\"sloth\",\"slots\",\"slove\",\"slows\",\"sloyd\",\"slubb\",\"slubs\",\"slued\",\"slues\",\"sluff\",\"slugs\",\"sluit\",\"slump\",\"slums\",\"slung\",\"slunk\",\"slurb\",\"slurp\",\"slurs\",\"sluse\",\"slush\",\"sluts\",\"slyer\",\"slyly\",\"slype\",\"smaak\",\"smack\",\"smaik\",\"small\",\"smalm\",\"smalt\",\"smarm\",\"smart\",\"smash\",\"smaze\",\"smear\",\"smeek\",\"smees\",\"smeik\",\"smeke\",\"smell\",\"smelt\",\"smerk\",\"smews\",\"smile\",\"smirk\",\"smirr\",\"smirs\",\"smite\",\"smith\",\"smits\",\"smock\",\"smogs\",\"smoke\",\"smoko\",\"smoky\",\"smolt\",\"smoor\",\"smoot\",\"smore\",\"smorg\",\"smote\",\"smout\",\"smowt\",\"smugs\",\"smurs\",\"smush\",\"smuts\",\"snabs\",\"snack\",\"snafu\",\"snags\",\"snail\",\"snake\",\"snaky\",\"snaps\",\"snare\",\"snarf\",\"snark\",\"snarl\",\"snars\",\"snary\",\"snash\",\"snath\",\"snaws\",\"snead\",\"sneak\",\"sneap\",\"snebs\",\"sneck\",\"sneds\",\"sneed\",\"sneer\",\"snees\",\"snell\",\"snibs\",\"snick\",\"snide\",\"snies\",\"sniff\",\"snift\",\"snigs\",\"snipe\",\"snips\",\"snipy\",\"snirt\",\"snits\",\"snobs\",\"snods\",\"snoek\",\"snoep\",\"snogs\",\"snoke\",\"snood\",\"snook\",\"snool\",\"snoop\",\"snoot\",\"snore\",\"snort\",\"snots\",\"snout\",\"snowk\",\"snows\",\"snowy\",\"snubs\",\"snuck\",\"snuff\",\"snugs\",\"snush\",\"snyes\",\"soaks\",\"soaps\",\"soapy\",\"soare\",\"soars\",\"soave\",\"sobas\",\"sober\",\"socas\",\"soces\",\"socko\",\"socks\",\"socle\",\"sodas\",\"soddy\",\"sodic\",\"sodom\",\"sofar\",\"sofas\",\"softa\",\"softs\",\"softy\",\"soger\",\"soggy\",\"sohur\",\"soils\",\"soily\",\"sojas\",\"sojus\",\"sokah\",\"soken\",\"sokes\",\"sokol\",\"solah\",\"solan\",\"solar\",\"solas\",\"solde\",\"soldi\",\"soldo\",\"solds\",\"soled\",\"solei\",\"soler\",\"soles\",\"solid\",\"solon\",\"solos\",\"solum\",\"solus\",\"solve\",\"soman\",\"somas\",\"sonar\",\"sonce\",\"sonde\",\"sones\",\"songs\",\"sonic\",\"sonly\",\"sonne\",\"sonny\",\"sonse\",\"sonsy\",\"sooey\",\"sooks\",\"sooky\",\"soole\",\"sools\",\"sooms\",\"soops\",\"soote\",\"sooth\",\"soots\",\"sooty\",\"sophs\",\"sophy\",\"sopor\",\"soppy\",\"sopra\",\"soral\",\"soras\",\"sorbo\",\"sorbs\",\"sorda\",\"sordo\",\"sords\",\"sored\",\"soree\",\"sorel\",\"sorer\",\"sores\",\"sorex\",\"sorgo\",\"sorns\",\"sorra\",\"sorry\",\"sorta\",\"sorts\",\"sorus\",\"soths\",\"sotol\",\"souce\",\"souct\",\"sough\",\"souks\",\"souls\",\"soums\",\"sound\",\"soups\",\"soupy\",\"sours\",\"souse\",\"south\",\"souts\",\"sowar\",\"sowce\",\"sowed\",\"sower\",\"sowff\",\"sowfs\",\"sowle\",\"sowls\",\"sowms\",\"sownd\",\"sowne\",\"sowps\",\"sowse\",\"sowth\",\"soyas\",\"soyle\",\"soyuz\",\"sozin\",\"space\",\"spacy\",\"spade\",\"spado\",\"spaed\",\"spaer\",\"spaes\",\"spags\",\"spahi\",\"spail\",\"spain\",\"spait\",\"spake\",\"spald\",\"spale\",\"spall\",\"spalt\",\"spams\",\"spane\",\"spang\",\"spank\",\"spans\",\"spard\",\"spare\",\"spark\",\"spars\",\"spart\",\"spasm\",\"spate\",\"spats\",\"spaul\",\"spawl\",\"spawn\",\"spaws\",\"spayd\",\"spays\",\"spaza\",\"spazz\",\"speak\",\"speal\",\"spean\",\"spear\",\"speat\",\"speck\",\"specs\",\"spect\",\"speed\",\"speel\",\"speer\",\"speil\",\"speir\",\"speks\",\"speld\",\"spelk\",\"spell\",\"spelt\",\"spend\",\"spent\",\"speos\",\"sperm\",\"spets\",\"speug\",\"spews\",\"spewy\",\"spial\",\"spica\",\"spice\",\"spick\",\"spics\",\"spicy\",\"spide\",\"spied\",\"spiel\",\"spier\",\"spies\",\"spiff\",\"spifs\",\"spike\",\"spiks\",\"spiky\",\"spile\",\"spill\",\"spilt\",\"spims\",\"spina\",\"spine\",\"spink\",\"spins\",\"spiny\",\"spire\",\"spirt\",\"spiry\",\"spite\",\"spits\",\"spitz\",\"spivs\",\"splat\",\"splay\",\"split\",\"splog\",\"spode\",\"spods\",\"spoil\",\"spoke\",\"spoof\",\"spook\",\"spool\",\"spoom\",\"spoon\",\"spoor\",\"spoot\",\"spore\",\"spork\",\"sport\",\"sposh\",\"spots\",\"spout\",\"sprad\",\"sprag\",\"sprat\",\"spray\",\"spred\",\"spree\",\"sprew\",\"sprig\",\"sprit\",\"sprod\",\"sprog\",\"sprue\",\"sprug\",\"spuds\",\"spued\",\"spuer\",\"spues\",\"spugs\",\"spule\",\"spume\",\"spumy\",\"spunk\",\"spurn\",\"spurs\",\"spurt\",\"sputa\",\"spyal\",\"spyre\",\"squab\",\"squad\",\"squat\",\"squaw\",\"squeg\",\"squib\",\"squid\",\"squit\",\"squiz\",\"stabs\",\"stack\",\"stade\",\"staff\",\"stage\",\"stags\",\"stagy\",\"staid\",\"staig\",\"stain\",\"stair\",\"stake\",\"stale\",\"stalk\",\"stall\",\"stamp\",\"stand\",\"stane\",\"stang\",\"stank\",\"staph\",\"staps\",\"stare\",\"stark\",\"starn\",\"starr\",\"stars\",\"start\",\"stash\",\"state\",\"stats\",\"staun\",\"stave\",\"staws\",\"stays\",\"stead\",\"steak\",\"steal\",\"steam\",\"stean\",\"stear\",\"stedd\",\"stede\",\"steds\",\"steed\",\"steek\",\"steel\",\"steem\",\"steen\",\"steep\",\"steer\",\"steil\",\"stein\",\"stela\",\"stele\",\"stell\",\"steme\",\"stems\",\"stend\",\"steno\",\"stens\",\"stent\",\"steps\",\"stept\",\"stere\",\"stern\",\"stets\",\"stews\",\"stewy\",\"steys\",\"stich\",\"stick\",\"stied\",\"sties\",\"stiff\",\"stilb\",\"stile\",\"still\",\"stilt\",\"stime\",\"stims\",\"stimy\",\"sting\",\"stink\",\"stint\",\"stipa\",\"stipe\",\"stire\",\"stirk\",\"stirp\",\"stirs\",\"stive\",\"stivy\",\"stoae\",\"stoai\",\"stoas\",\"stoat\",\"stobs\",\"stock\",\"stoep\",\"stogy\",\"stoic\",\"stoit\",\"stoke\",\"stole\",\"stoln\",\"stoma\",\"stomp\",\"stond\",\"stone\",\"stong\",\"stonk\",\"stonn\",\"stony\",\"stood\",\"stook\",\"stool\",\"stoop\",\"stoor\",\"stope\",\"stops\",\"stopt\",\"store\",\"stork\",\"storm\",\"story\",\"stoss\",\"stots\",\"stott\",\"stoun\",\"stoup\",\"stour\",\"stout\",\"stove\",\"stown\",\"stowp\",\"stows\",\"strad\",\"strae\",\"strag\",\"strak\",\"strap\",\"straw\",\"stray\",\"strep\",\"strew\",\"stria\",\"strig\",\"strim\",\"strip\",\"strop\",\"strow\",\"stroy\",\"strum\",\"strut\",\"stubs\",\"stuck\",\"stude\",\"studs\",\"study\",\"stuff\",\"stull\",\"stulm\",\"stumm\",\"stump\",\"stums\",\"stung\",\"stunk\",\"stuns\",\"stunt\",\"stupa\",\"stupe\",\"sture\",\"sturt\",\"styed\",\"styes\",\"style\",\"styli\",\"stylo\",\"styme\",\"stymy\",\"styre\",\"styte\",\"suave\",\"subah\",\"subas\",\"subby\",\"suber\",\"subha\",\"succi\",\"sucks\",\"sucky\",\"sucre\",\"sudds\",\"sudor\",\"sudsy\",\"suede\",\"suent\",\"suers\",\"suete\",\"suets\",\"suety\",\"sugan\",\"sugar\",\"sughs\",\"sugos\",\"suhur\",\"suids\",\"suing\",\"suint\",\"suite\",\"suits\",\"sujee\",\"sukhs\",\"sukuk\",\"sulci\",\"sulfa\",\"sulfo\",\"sulks\",\"sulky\",\"sully\",\"sulph\",\"sulus\",\"sumac\",\"sumis\",\"summa\",\"sumos\",\"sumph\",\"sumps\",\"sunis\",\"sunks\",\"sunna\",\"sunns\",\"sunny\",\"sunup\",\"super\",\"supes\",\"supra\",\"surah\",\"sural\",\"suras\",\"surat\",\"surds\",\"sured\",\"surer\",\"sures\",\"surfs\",\"surfy\",\"surge\",\"surgy\",\"surly\",\"surra\",\"sused\",\"suses\",\"sushi\",\"susus\",\"sutor\",\"sutra\",\"sutta\",\"swabs\",\"swack\",\"swads\",\"swage\",\"swags\",\"swail\",\"swain\",\"swale\",\"swaly\",\"swami\",\"swamp\",\"swamy\",\"swang\",\"swank\",\"swans\",\"swaps\",\"swapt\",\"sward\",\"sware\",\"swarf\",\"swarm\",\"swart\",\"swash\",\"swath\",\"swats\",\"swayl\",\"sways\",\"sweal\",\"swear\",\"sweat\",\"swede\",\"sweed\",\"sweel\",\"sweep\",\"sweer\",\"swees\",\"sweet\",\"sweir\",\"swell\",\"swelt\",\"swept\",\"swerf\",\"sweys\",\"swies\",\"swift\",\"swigs\",\"swile\",\"swill\",\"swims\",\"swine\",\"swing\",\"swink\",\"swipe\",\"swire\",\"swirl\",\"swish\",\"swiss\",\"swith\",\"swits\",\"swive\",\"swizz\",\"swobs\",\"swole\",\"swoln\",\"swoon\",\"swoop\",\"swops\",\"swopt\",\"sword\",\"swore\",\"sworn\",\"swots\",\"swoun\",\"swung\",\"sybbe\",\"sybil\",\"syboe\",\"sybow\",\"sycee\",\"syces\",\"sycon\",\"syens\",\"syker\",\"sykes\",\"sylis\",\"sylph\",\"sylva\",\"symar\",\"synch\",\"syncs\",\"synds\",\"syned\",\"synes\",\"synod\",\"synth\",\"syped\",\"sypes\",\"syphs\",\"syrah\",\"syren\",\"syrup\",\"sysop\",\"sythe\",\"syver\",\"taals\",\"taata\",\"tabby\",\"taber\",\"tabes\",\"tabid\",\"tabis\",\"tabla\",\"table\",\"taboo\",\"tabor\",\"tabun\",\"tabus\",\"tacan\",\"taces\",\"tacet\",\"tache\",\"tacho\",\"tachs\",\"tacit\",\"tacks\",\"tacky\",\"tacos\",\"tacts\",\"taels\",\"taffy\",\"tafia\",\"taggy\",\"tagma\",\"tahas\",\"tahrs\",\"taiga\",\"taigs\",\"taiko\",\"tails\",\"tains\",\"taint\",\"taira\",\"taish\",\"taits\",\"tajes\",\"takas\",\"taken\",\"taker\",\"takes\",\"takhi\",\"takin\",\"takis\",\"takky\",\"talak\",\"talaq\",\"talar\",\"talas\",\"talcs\",\"talcy\",\"talea\",\"taler\",\"tales\",\"talks\",\"talky\",\"talls\",\"tally\",\"talma\",\"talon\",\"talpa\",\"taluk\",\"talus\",\"tamal\",\"tamed\",\"tamer\",\"tames\",\"tamin\",\"tamis\",\"tammy\",\"tamps\",\"tanas\",\"tanga\",\"tangi\",\"tango\",\"tangs\",\"tangy\",\"tanhs\",\"tanka\",\"tanks\",\"tanky\",\"tanna\",\"tansy\",\"tanti\",\"tanto\",\"tanty\",\"tapas\",\"taped\",\"tapen\",\"taper\",\"tapes\",\"tapet\",\"tapir\",\"tapis\",\"tappa\",\"tapus\",\"taras\",\"tardo\",\"tardy\",\"tared\",\"tares\",\"targa\",\"targe\",\"tarns\",\"taroc\",\"tarok\",\"taros\",\"tarot\",\"tarps\",\"tarre\",\"tarry\",\"tarsi\",\"tarts\",\"tarty\",\"tasar\",\"tased\",\"taser\",\"tases\",\"tasks\",\"tassa\",\"tasse\",\"tasso\",\"taste\",\"tasty\",\"tatar\",\"tater\",\"tates\",\"taths\",\"tatie\",\"tatou\",\"tatts\",\"tatty\",\"tatus\",\"taube\",\"tauld\",\"taunt\",\"tauon\",\"taupe\",\"tauts\",\"tavah\",\"tavas\",\"taver\",\"tawai\",\"tawas\",\"tawed\",\"tawer\",\"tawie\",\"tawny\",\"tawse\",\"tawts\",\"taxed\",\"taxer\",\"taxes\",\"taxis\",\"taxol\",\"taxon\",\"taxor\",\"taxus\",\"tayra\",\"tazza\",\"tazze\",\"teach\",\"teade\",\"teads\",\"teaed\",\"teaks\",\"teals\",\"teams\",\"tears\",\"teary\",\"tease\",\"teats\",\"teaze\",\"techs\",\"techy\",\"tecta\",\"teddy\",\"teels\",\"teems\",\"teend\",\"teene\",\"teens\",\"teeny\",\"teers\",\"teeth\",\"teffs\",\"teggs\",\"tegua\",\"tegus\",\"tehrs\",\"teiid\",\"teils\",\"teind\",\"teins\",\"telae\",\"telco\",\"teles\",\"telex\",\"telia\",\"telic\",\"tells\",\"telly\",\"teloi\",\"telos\",\"temed\",\"temes\",\"tempi\",\"tempo\",\"temps\",\"tempt\",\"temse\",\"tench\",\"tends\",\"tendu\",\"tenes\",\"tenet\",\"tenge\",\"tenia\",\"tenne\",\"tenno\",\"tenny\",\"tenon\",\"tenor\",\"tense\",\"tenth\",\"tents\",\"tenty\",\"tenue\",\"tepal\",\"tepas\",\"tepee\",\"tepid\",\"tepoy\",\"terai\",\"teras\",\"terce\",\"terek\",\"teres\",\"terfe\",\"terfs\",\"terga\",\"terms\",\"terne\",\"terns\",\"terra\",\"terry\",\"terse\",\"terts\",\"tesla\",\"testa\",\"teste\",\"tests\",\"testy\",\"tetes\",\"teths\",\"tetra\",\"tetri\",\"teuch\",\"teugh\",\"tewed\",\"tewel\",\"tewit\",\"texas\",\"texes\",\"texts\",\"thack\",\"thagi\",\"thaim\",\"thale\",\"thali\",\"thana\",\"thane\",\"thang\",\"thank\",\"thans\",\"thanx\",\"tharm\",\"thars\",\"thaws\",\"thawy\",\"thebe\",\"theca\",\"theed\",\"theek\",\"thees\",\"theft\",\"thegn\",\"theic\",\"thein\",\"their\",\"thelf\",\"thema\",\"theme\",\"thens\",\"theow\",\"there\",\"therm\",\"these\",\"thesp\",\"theta\",\"thete\",\"thews\",\"thewy\",\"thick\",\"thief\",\"thigh\",\"thigs\",\"thilk\",\"thill\",\"thine\",\"thing\",\"think\",\"thins\",\"thiol\",\"third\",\"thirl\",\"thoft\",\"thole\",\"tholi\",\"thong\",\"thorn\",\"thoro\",\"thorp\",\"those\",\"thous\",\"thowl\",\"thrae\",\"thraw\",\"three\",\"threw\",\"thrid\",\"thrip\",\"throb\",\"throe\",\"throw\",\"thrum\",\"thuds\",\"thugs\",\"thuja\",\"thumb\",\"thump\",\"thunk\",\"thurl\",\"thuya\",\"thyme\",\"thymi\",\"thymy\",\"tians\",\"tiara\",\"tiars\",\"tibia\",\"tical\",\"ticca\",\"ticed\",\"tices\",\"tichy\",\"ticks\",\"ticky\",\"tidal\",\"tiddy\",\"tided\",\"tides\",\"tiers\",\"tiffs\",\"tifos\",\"tifts\",\"tiger\",\"tiges\",\"tight\",\"tigon\",\"tikas\",\"tikes\",\"tikis\",\"tikka\",\"tilak\",\"tilde\",\"tiled\",\"tiler\",\"tiles\",\"tills\",\"tilly\",\"tilth\",\"tilts\",\"timbo\",\"timed\",\"timer\",\"times\",\"timid\",\"timon\",\"timps\",\"tinas\",\"tinct\",\"tinds\",\"tinea\",\"tined\",\"tines\",\"tinge\",\"tings\",\"tinks\",\"tinny\",\"tints\",\"tinty\",\"tipis\",\"tippy\",\"tipsy\",\"tired\",\"tires\",\"tirls\",\"tiros\",\"tirrs\",\"titan\",\"titch\",\"titer\",\"tithe\",\"titis\",\"title\",\"titre\",\"titty\",\"titup\",\"tiyin\",\"tiyns\",\"tizes\",\"tizzy\",\"toads\",\"toady\",\"toast\",\"toaze\",\"tocks\",\"tocky\",\"tocos\",\"today\",\"todde\",\"toddy\",\"toeas\",\"toffs\",\"toffy\",\"tofts\",\"tofus\",\"togae\",\"togas\",\"toged\",\"toges\",\"togue\",\"tohos\",\"toile\",\"toils\",\"toing\",\"toise\",\"toits\",\"tokay\",\"toked\",\"token\",\"toker\",\"tokes\",\"tokos\",\"tolan\",\"tolar\",\"tolas\",\"toled\",\"toles\",\"tolls\",\"tolly\",\"tolts\",\"tolus\",\"tolyl\",\"toman\",\"tombs\",\"tomes\",\"tomia\",\"tommy\",\"tomos\",\"tonal\",\"tondi\",\"tondo\",\"toned\",\"toner\",\"tones\",\"toney\",\"tonga\",\"tongs\",\"tonic\",\"tonka\",\"tonks\",\"tonne\",\"tonus\",\"tools\",\"tooms\",\"toons\",\"tooth\",\"toots\",\"topaz\",\"toped\",\"topee\",\"topek\",\"toper\",\"topes\",\"tophe\",\"tophi\",\"tophs\",\"topic\",\"topis\",\"topoi\",\"topos\",\"toppy\",\"toque\",\"torah\",\"toran\",\"toras\",\"torch\",\"torcs\",\"tores\",\"toric\",\"torii\",\"toros\",\"torot\",\"torrs\",\"torse\",\"torsi\",\"torsk\",\"torso\",\"torta\",\"torte\",\"torts\",\"torus\",\"tosas\",\"tosed\",\"toses\",\"toshy\",\"tossy\",\"total\",\"toted\",\"totem\",\"toter\",\"totes\",\"totty\",\"touch\",\"tough\",\"touks\",\"touns\",\"tours\",\"touse\",\"tousy\",\"touts\",\"touze\",\"touzy\",\"towed\",\"towel\",\"tower\",\"towie\",\"towns\",\"towny\",\"towse\",\"towsy\",\"towts\",\"towze\",\"towzy\",\"toxic\",\"toxin\",\"toyed\",\"toyer\",\"toyon\",\"toyos\",\"tozed\",\"tozes\",\"tozie\",\"trabs\",\"trace\",\"track\",\"tract\",\"trade\",\"trads\",\"tragi\",\"traik\",\"trail\",\"train\",\"trait\",\"tramp\",\"trams\",\"trank\",\"tranq\",\"trans\",\"trant\",\"trape\",\"traps\",\"trapt\",\"trash\",\"trass\",\"trats\",\"tratt\",\"trave\",\"trawl\",\"trayf\",\"trays\",\"tread\",\"treat\",\"treck\",\"treed\",\"treen\",\"trees\",\"trefa\",\"treif\",\"treks\",\"trema\",\"trems\",\"trend\",\"tress\",\"trest\",\"trets\",\"trews\",\"treyf\",\"treys\",\"triac\",\"triad\",\"trial\",\"tribe\",\"trice\",\"trick\",\"tride\",\"tried\",\"trier\",\"tries\",\"triff\",\"trigo\",\"trigs\",\"trike\",\"trild\",\"trill\",\"trims\",\"trine\",\"trins\",\"triol\",\"trior\",\"trios\",\"tripe\",\"trips\",\"tripy\",\"trist\",\"trite\",\"troad\",\"troak\",\"troat\",\"trock\",\"trode\",\"trods\",\"trogs\",\"trois\",\"troke\",\"troll\",\"tromp\",\"trona\",\"tronc\",\"trone\",\"tronk\",\"trons\",\"troop\",\"trooz\",\"trope\",\"troth\",\"trots\",\"trout\",\"trove\",\"trows\",\"troys\",\"truce\",\"truck\",\"trued\",\"truer\",\"trues\",\"trugo\",\"trugs\",\"trull\",\"truly\",\"trump\",\"trunk\",\"truss\",\"trust\",\"truth\",\"tryer\",\"tryke\",\"tryma\",\"tryps\",\"tryst\",\"tsade\",\"tsadi\",\"tsars\",\"tsked\",\"tsuba\",\"tsubo\",\"tuans\",\"tuart\",\"tuath\",\"tubae\",\"tubal\",\"tubar\",\"tubas\",\"tubby\",\"tubed\",\"tuber\",\"tubes\",\"tucks\",\"tufas\",\"tuffe\",\"tuffs\",\"tufts\",\"tufty\",\"tugra\",\"tuile\",\"tuina\",\"tuism\",\"tuktu\",\"tules\",\"tulip\",\"tulle\",\"tulpa\",\"tulsi\",\"tumid\",\"tummy\",\"tumor\",\"tumps\",\"tumpy\",\"tunas\",\"tunds\",\"tuned\",\"tuner\",\"tunes\",\"tungs\",\"tunic\",\"tunny\",\"tupek\",\"tupik\",\"tuple\",\"tuque\",\"turbo\",\"turds\",\"turfs\",\"turfy\",\"turks\",\"turme\",\"turms\",\"turns\",\"turnt\",\"turps\",\"turrs\",\"tushy\",\"tusks\",\"tusky\",\"tutee\",\"tutor\",\"tutti\",\"tutty\",\"tutus\",\"tuxes\",\"tuyer\",\"twaes\",\"twain\",\"twals\",\"twang\",\"twank\",\"twats\",\"tways\",\"tweak\",\"tweed\",\"tweel\",\"tween\",\"tweep\",\"tweer\",\"tweet\",\"twerk\",\"twerp\",\"twice\",\"twier\",\"twigs\",\"twill\",\"twilt\",\"twine\",\"twink\",\"twins\",\"twiny\",\"twire\",\"twirl\",\"twirp\",\"twist\",\"twite\",\"twits\",\"twixt\",\"twoer\",\"twyer\",\"tyees\",\"tyers\",\"tying\",\"tyiyn\",\"tykes\",\"tyler\",\"tymps\",\"tynde\",\"tyned\",\"tynes\",\"typal\",\"typed\",\"types\",\"typey\",\"typic\",\"typos\",\"typps\",\"typto\",\"tyran\",\"tyred\",\"tyres\",\"tyros\",\"tythe\",\"tzars\",\"udals\",\"udder\",\"udons\",\"ugali\",\"ugged\",\"uhlan\",\"uhuru\",\"ukase\",\"ulama\",\"ulans\",\"ulcer\",\"ulema\",\"ulmin\",\"ulnad\",\"ulnae\",\"ulnar\",\"ulnas\",\"ulpan\",\"ultra\",\"ulvas\",\"ulyie\",\"ulzie\",\"umami\",\"umbel\",\"umber\",\"umble\",\"umbos\",\"umbra\",\"umbre\",\"umiac\",\"umiak\",\"umiaq\",\"ummah\",\"ummas\",\"ummed\",\"umped\",\"umphs\",\"umpie\",\"umpty\",\"umrah\",\"umras\",\"unais\",\"unapt\",\"unarm\",\"unary\",\"unaus\",\"unbag\",\"unban\",\"unbar\",\"unbed\",\"unbid\",\"unbox\",\"uncap\",\"unces\",\"uncia\",\"uncle\",\"uncos\",\"uncoy\",\"uncus\",\"uncut\",\"undam\",\"undee\",\"under\",\"undid\",\"undos\",\"undue\",\"undug\",\"uneth\",\"unfed\",\"unfit\",\"unfix\",\"ungag\",\"unget\",\"ungod\",\"ungot\",\"ungum\",\"unhat\",\"unhip\",\"unica\",\"unify\",\"union\",\"unite\",\"units\",\"unity\",\"unjam\",\"unked\",\"unket\",\"unkid\",\"unlaw\",\"unlay\",\"unled\",\"unlet\",\"unlid\",\"unlit\",\"unman\",\"unmet\",\"unmew\",\"unmix\",\"unpay\",\"unpeg\",\"unpen\",\"unpin\",\"unred\",\"unrid\",\"unrig\",\"unrip\",\"unsaw\",\"unsay\",\"unsee\",\"unset\",\"unsew\",\"unsex\",\"unsod\",\"untax\",\"untie\",\"until\",\"untin\",\"unwed\",\"unwet\",\"unwit\",\"unwon\",\"unzip\",\"upbow\",\"upbye\",\"updos\",\"updry\",\"upend\",\"upjet\",\"uplay\",\"upled\",\"uplit\",\"upped\",\"upper\",\"upran\",\"uprun\",\"upsee\",\"upset\",\"upsey\",\"uptak\",\"upter\",\"uptie\",\"uraei\",\"urali\",\"uraos\",\"urare\",\"urari\",\"urase\",\"urate\",\"urban\",\"urbex\",\"urbia\",\"urdee\",\"ureal\",\"ureas\",\"uredo\",\"ureic\",\"urena\",\"urent\",\"urged\",\"urger\",\"urges\",\"urial\",\"urine\",\"urite\",\"urman\",\"urnal\",\"urned\",\"urped\",\"ursae\",\"ursid\",\"urson\",\"urubu\",\"urvas\",\"usage\",\"users\",\"usher\",\"using\",\"usnea\",\"usque\",\"usual\",\"usure\",\"usurp\",\"usury\",\"uteri\",\"utile\",\"utter\",\"uveal\",\"uveas\",\"uvula\",\"vacua\",\"vaded\",\"vades\",\"vagal\",\"vague\",\"vagus\",\"vails\",\"vaire\",\"vairs\",\"vairy\",\"vakas\",\"vakil\",\"vales\",\"valet\",\"valid\",\"valis\",\"valor\",\"valse\",\"value\",\"valve\",\"vamps\",\"vampy\",\"vanda\",\"vaned\",\"vanes\",\"vangs\",\"vants\",\"vaped\",\"vaper\",\"vapes\",\"vapid\",\"vapor\",\"varan\",\"varas\",\"vardy\",\"varec\",\"vares\",\"varia\",\"varix\",\"varna\",\"varus\",\"varve\",\"vasal\",\"vases\",\"vasts\",\"vasty\",\"vatic\",\"vatus\",\"vauch\",\"vault\",\"vaunt\",\"vaute\",\"vauts\",\"vawte\",\"vaxes\",\"veale\",\"veals\",\"vealy\",\"veena\",\"veeps\",\"veers\",\"veery\",\"vegan\",\"vegas\",\"veges\",\"vegie\",\"vegos\",\"vehme\",\"veils\",\"veily\",\"veins\",\"veiny\",\"velar\",\"velds\",\"veldt\",\"veles\",\"vells\",\"velum\",\"venae\",\"venal\",\"vends\",\"vendu\",\"veney\",\"venge\",\"venin\",\"venom\",\"vents\",\"venue\",\"venus\",\"verbs\",\"verge\",\"verra\",\"verry\",\"verse\",\"verso\",\"verst\",\"verts\",\"vertu\",\"verve\",\"vespa\",\"vesta\",\"vests\",\"vetch\",\"vexed\",\"vexer\",\"vexes\",\"vexil\",\"vezir\",\"vials\",\"viand\",\"vibes\",\"vibex\",\"vibey\",\"vicar\",\"viced\",\"vices\",\"vichy\",\"video\",\"viers\",\"views\",\"viewy\",\"vifda\",\"viffs\",\"vigas\",\"vigia\",\"vigil\",\"vigor\",\"vilde\",\"viler\",\"villa\",\"villi\",\"vills\",\"vimen\",\"vinal\",\"vinas\",\"vinca\",\"vined\",\"viner\",\"vines\",\"vinew\",\"vinic\",\"vinos\",\"vints\",\"vinyl\",\"viola\",\"viold\",\"viols\",\"viper\",\"viral\",\"vired\",\"vireo\",\"vires\",\"virga\",\"virge\",\"virid\",\"virls\",\"virtu\",\"virus\",\"visas\",\"vised\",\"vises\",\"visie\",\"visit\",\"visne\",\"vison\",\"visor\",\"vista\",\"visto\",\"vitae\",\"vital\",\"vitas\",\"vitex\",\"vitro\",\"vitta\",\"vivas\",\"vivat\",\"vivda\",\"viver\",\"vives\",\"vivid\",\"vixen\",\"vizir\",\"vizor\",\"vleis\",\"vlies\",\"vlogs\",\"voars\",\"vocab\",\"vocal\",\"voces\",\"voddy\",\"vodka\",\"vodou\",\"vodun\",\"voema\",\"vogie\",\"vogue\",\"voice\",\"voids\",\"voila\",\"voile\",\"voips\",\"volae\",\"volar\",\"voled\",\"voles\",\"volet\",\"volks\",\"volta\",\"volte\",\"volti\",\"volts\",\"volva\",\"volve\",\"vomer\",\"vomit\",\"voted\",\"voter\",\"votes\",\"vouch\",\"vouge\",\"voulu\",\"vowed\",\"vowel\",\"vower\",\"voxel\",\"vozhd\",\"vraic\",\"vrils\",\"vroom\",\"vrous\",\"vrouw\",\"vrows\",\"vuggs\",\"vuggy\",\"vughs\",\"vughy\",\"vulgo\",\"vulns\",\"vulva\",\"vutty\",\"vying\",\"waacs\",\"wacke\",\"wacko\",\"wacks\",\"wacky\",\"wadds\",\"waddy\",\"waded\",\"wader\",\"wades\",\"wadge\",\"wadis\",\"wadts\",\"wafer\",\"waffs\",\"wafts\",\"waged\",\"wager\",\"wages\",\"wagga\",\"wagon\",\"wagyu\",\"wahoo\",\"waide\",\"waifs\",\"waift\",\"wails\",\"wains\",\"wairs\",\"waist\",\"waite\",\"waits\",\"waive\",\"wakas\",\"waked\",\"waken\",\"waker\",\"wakes\",\"wakfs\",\"waldo\",\"walds\",\"waled\",\"waler\",\"wales\",\"walie\",\"walis\",\"walks\",\"walla\",\"walls\",\"wally\",\"walty\",\"waltz\",\"wamed\",\"wames\",\"wamus\",\"wands\",\"waned\",\"wanes\",\"waney\",\"wangs\",\"wanks\",\"wanky\",\"wanle\",\"wanly\",\"wanna\",\"wants\",\"wanty\",\"wanze\",\"waqfs\",\"warbs\",\"warby\",\"wards\",\"wared\",\"wares\",\"warez\",\"warks\",\"warms\",\"warns\",\"warps\",\"warre\",\"warst\",\"warts\",\"warty\",\"wases\",\"washy\",\"wasms\",\"wasps\",\"waspy\",\"waste\",\"wasts\",\"watap\",\"watch\",\"water\",\"watts\",\"wauff\",\"waugh\",\"wauks\",\"waulk\",\"wauls\",\"waurs\",\"waved\",\"waver\",\"waves\",\"wavey\",\"wawas\",\"wawes\",\"wawls\",\"waxed\",\"waxen\",\"waxer\",\"waxes\",\"wayed\",\"wazir\",\"wazoo\",\"weald\",\"weals\",\"weamb\",\"weans\",\"wears\",\"weary\",\"weave\",\"webby\",\"weber\",\"wecht\",\"wedel\",\"wedge\",\"wedgy\",\"weeds\",\"weedy\",\"weeke\",\"weeks\",\"weels\",\"weems\",\"weens\",\"weeny\",\"weeps\",\"weepy\",\"weest\",\"weete\",\"weets\",\"wefte\",\"wefts\",\"weids\",\"weigh\",\"weils\",\"weird\",\"weirs\",\"weise\",\"weize\",\"wekas\",\"welch\",\"welds\",\"welke\",\"welks\",\"welkt\",\"wells\",\"welly\",\"welsh\",\"welts\",\"wembs\",\"wench\",\"wends\",\"wenge\",\"wenny\",\"wents\",\"weros\",\"wersh\",\"wests\",\"wetas\",\"wetly\",\"wexed\",\"wexes\",\"whack\",\"whale\",\"whamo\",\"whams\",\"whang\",\"whaps\",\"whare\",\"wharf\",\"whata\",\"whats\",\"whaup\",\"whaur\",\"wheal\",\"whear\",\"wheat\",\"wheel\",\"wheen\",\"wheep\",\"wheft\",\"whelk\",\"whelm\",\"whelp\",\"whens\",\"where\",\"whets\",\"whews\",\"wheys\",\"which\",\"whids\",\"whiff\",\"whift\",\"whigs\",\"while\",\"whilk\",\"whims\",\"whine\",\"whins\",\"whiny\",\"whios\",\"whips\",\"whipt\",\"whirl\",\"whirr\",\"whirs\",\"whish\",\"whisk\",\"whiss\",\"whist\",\"white\",\"whits\",\"whity\",\"whizz\",\"whole\",\"whomp\",\"whoof\",\"whoop\",\"whoot\",\"whops\",\"whore\",\"whorl\",\"whort\",\"whose\",\"whoso\",\"whows\",\"whump\",\"whups\",\"whyda\",\"wicca\",\"wicks\",\"wicky\",\"widdy\",\"widen\",\"wider\",\"wides\",\"widow\",\"width\",\"wield\",\"wiels\",\"wifed\",\"wifes\",\"wifey\",\"wifie\",\"wifty\",\"wigan\",\"wigga\",\"wiggy\",\"wight\",\"wikis\",\"wilco\",\"wilds\",\"wiled\",\"wiles\",\"wilga\",\"wilis\",\"wilja\",\"wills\",\"willy\",\"wilts\",\"wimps\",\"wimpy\",\"wince\",\"winch\",\"winds\",\"windy\",\"wined\",\"wines\",\"winey\",\"winge\",\"wings\",\"wingy\",\"winks\",\"winna\",\"winns\",\"winos\",\"winze\",\"wiped\",\"wiper\",\"wipes\",\"wired\",\"wirer\",\"wires\",\"wirra\",\"wised\",\"wiser\",\"wises\",\"wisha\",\"wisht\",\"wisps\",\"wispy\",\"wists\",\"witan\",\"witch\",\"wited\",\"wites\",\"withe\",\"withs\",\"withy\",\"witty\",\"wived\",\"wiver\",\"wives\",\"wizen\",\"wizes\",\"woads\",\"woald\",\"wocks\",\"wodge\",\"woful\",\"wojus\",\"woken\",\"woker\",\"wokka\",\"wolds\",\"wolfs\",\"wolly\",\"wolve\",\"woman\",\"wombs\",\"womby\",\"women\",\"womyn\",\"wonga\",\"wongi\",\"wonks\",\"wonky\",\"wonts\",\"woods\",\"woody\",\"wooed\",\"wooer\",\"woofs\",\"woofy\",\"woold\",\"wools\",\"wooly\",\"woons\",\"woops\",\"woopy\",\"woose\",\"woosh\",\"wootz\",\"woozy\",\"words\",\"wordy\",\"works\",\"world\",\"worms\",\"wormy\",\"worry\",\"worse\",\"worst\",\"worth\",\"worts\",\"would\",\"wound\",\"woven\",\"wowed\",\"wowee\",\"woxen\",\"wrack\",\"wrang\",\"wraps\",\"wrapt\",\"wrast\",\"wrate\",\"wrath\",\"wrawl\",\"wreak\",\"wreck\",\"wrens\",\"wrest\",\"wrick\",\"wried\",\"wrier\",\"wries\",\"wring\",\"wrist\",\"write\",\"writs\",\"wroke\",\"wrong\",\"wroot\",\"wrote\",\"wroth\",\"wrung\",\"wryer\",\"wryly\",\"wuddy\",\"wudus\",\"wulls\",\"wurst\",\"wuses\",\"wushu\",\"wussy\",\"wuxia\",\"wyled\",\"wyles\",\"wynds\",\"wynns\",\"wyted\",\"wytes\",\"xebec\",\"xenia\",\"xenic\",\"xenon\",\"xeric\",\"xerox\",\"xerus\",\"xoana\",\"xrays\",\"xylan\",\"xylem\",\"xylic\",\"xylol\",\"xylyl\",\"xysti\",\"xysts\",\"yaars\",\"yabas\",\"yabba\",\"yabby\",\"yacca\",\"yacht\",\"yacka\",\"yacks\",\"yaffs\",\"yager\",\"yages\",\"yagis\",\"yahoo\",\"yaird\",\"yakka\",\"yakow\",\"yales\",\"yamen\",\"yampy\",\"yamun\",\"yangs\",\"yanks\",\"yapok\",\"yapon\",\"yapps\",\"yappy\",\"yarak\",\"yarco\",\"yards\",\"yarer\",\"yarfa\",\"yarks\",\"yarns\",\"yarrs\",\"yarta\",\"yarto\",\"yates\",\"yauds\",\"yauld\",\"yaups\",\"yawed\",\"yawey\",\"yawls\",\"yawns\",\"yawny\",\"yawps\",\"ybore\",\"yclad\",\"ycled\",\"ycond\",\"ydrad\",\"ydred\",\"yeads\",\"yeahs\",\"yealm\",\"yeans\",\"yeard\",\"yearn\",\"years\",\"yeast\",\"yecch\",\"yechs\",\"yechy\",\"yedes\",\"yeeds\",\"yeesh\",\"yeggs\",\"yelks\",\"yells\",\"yelms\",\"yelps\",\"yelts\",\"yenta\",\"yente\",\"yerba\",\"yerds\",\"yerks\",\"yeses\",\"yesks\",\"yests\",\"yesty\",\"yetis\",\"yetts\",\"yeuks\",\"yeuky\",\"yeven\",\"yeves\",\"yewen\",\"yexed\",\"yexes\",\"yfere\",\"yield\",\"yiked\",\"yikes\",\"yills\",\"yince\",\"yipes\",\"yippy\",\"yirds\",\"yirks\",\"yirrs\",\"yirth\",\"yites\",\"yitie\",\"ylems\",\"ylike\",\"ylkes\",\"ymolt\",\"ympes\",\"yobbo\",\"yobby\",\"yocks\",\"yodel\",\"yodhs\",\"yodle\",\"yogas\",\"yogee\",\"yoghs\",\"yogic\",\"yogin\",\"yogis\",\"yoick\",\"yojan\",\"yoked\",\"yokel\",\"yoker\",\"yokes\",\"yokul\",\"yolks\",\"yolky\",\"yomim\",\"yomps\",\"yonic\",\"yonis\",\"yonks\",\"yoofs\",\"yoops\",\"yores\",\"yorks\",\"yorps\",\"youks\",\"young\",\"yourn\",\"yours\",\"yourt\",\"youse\",\"youth\",\"yowed\",\"yowes\",\"yowie\",\"yowls\",\"yowza\",\"yrapt\",\"yrent\",\"yrivd\",\"yrneh\",\"ysame\",\"ytost\",\"yuans\",\"yucas\",\"yucca\",\"yucch\",\"yucko\",\"yucks\",\"yucky\",\"yufts\",\"yugas\",\"yuked\",\"yukes\",\"yukky\",\"yukos\",\"yulan\",\"yules\",\"yummo\",\"yummy\",\"yumps\",\"yupon\",\"yuppy\",\"yurta\",\"yurts\",\"yuzus\",\"zabra\",\"zacks\",\"zaida\",\"zaidy\",\"zaire\",\"zakat\",\"zaman\",\"zambo\",\"zamia\",\"zanja\",\"zante\",\"zanza\",\"zanze\",\"zappy\",\"zarfs\",\"zaris\",\"zatis\",\"zaxes\",\"zayin\",\"zazen\",\"zeals\",\"zebec\",\"zebra\",\"zebub\",\"zebus\",\"zedas\",\"zeins\",\"zendo\",\"zerda\",\"zerks\",\"zeros\",\"zests\",\"zesty\",\"zetas\",\"zexes\",\"zezes\",\"zhomo\",\"zibet\",\"ziffs\",\"zigan\",\"zilas\",\"zilch\",\"zilla\",\"zills\",\"zimbi\",\"zimbs\",\"zinco\",\"zincs\",\"zincy\",\"zineb\",\"zines\",\"zings\",\"zingy\",\"zinke\",\"zinky\",\"zippo\",\"zippy\",\"ziram\",\"zitis\",\"zizel\",\"zizit\",\"zlote\",\"zloty\",\"zoaea\",\"zobos\",\"zobus\",\"zocco\",\"zoeae\",\"zoeal\",\"zoeas\",\"zoism\",\"zoist\",\"zombi\",\"zonae\",\"zonal\",\"zonda\",\"zoned\",\"zoner\",\"zones\",\"zonks\",\"zooea\",\"zooey\",\"zooid\",\"zooks\",\"zooms\",\"zoons\",\"zooty\",\"zoppa\",\"zoppo\",\"zoril\",\"zoris\",\"zorro\",\"zouks\",\"zowee\",\"zowie\",\"zulus\",\"zupan\",\"zupas\",\"zuppa\",\"zurfs\",\"zuzim\",\"zygal\",\"zygon\",\"zymes\",\"zymic\" ]; ","<script>\n\timport manager from './constraintManager.js';\n\timport Guess from './Guess.svelte';\n\timport GuessRecord from './GuessRecord.svelte';\n\timport longList from './longWordList.js';\n\n\tlet m = manager(longList);\n\n\tlet possibilities, untried;\n\tlet guessCount = 0;\n\tlet currentGuess = ''\n\tlet guessHistory = [];\n\t$:{\n\t\tguessCount = guessCount; // use this to trigger the reactive block (is there a better way?)\n\t\tpossibilities = m.rankedList();\n\t\tuntried = m.disjunct();\n\t}\n\n\tfunction submitGuess(e){\n\t\tconsole.log('submit', e.detail);\n\t\tguessHistory.push(e.detail);\n\t\tguessHistory=guessHistory;\n\t\tm.setWordleResult(e.detail);\n\t\tguessCount++;\n\t\tcurrentGuess = '';\n\t}\n\n\tfunction tryWord(w){\n\t\tcurrentGuess = w;\n\t}\n\n\t</script>\n\n\t<article>\n\t<h1 id=\"top\">Wordle <span class=\"strike\">helper</span> ruiner v1</h1>\n\t<p><a href=\"#about\">About this page</a></p>\n\t<section class=\"input\">\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tGuess: \n\t\t\t\t<input type=\"text\" bind:value={currentGuess} maxlength={5} />\n\t\t\t</p>\n\t\t\t<div>\n\t\t\t\t<Guess word={currentGuess} on:submit={submitGuess}/>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"history\">\n\t\t\t{#each guessHistory as guess}\n\t\t\t<GuessRecord guess={guess} />\n\t\t\t{/each}\n\t\t</div>\n\t</section>\n\t<section class=\"suggestions\">\n\t\t<div>\n\t\t\t<h2>Suggestions ({possibilities.length})</h2>\n\t\t\t<div class=\"possibility-list\">\n\t\t\t{#each possibilities as possibility}\n\t\t\t<a href=\"#top\" on:click={()=>tryWord(possibility.word)} class=\"suggestion\"> {possibility.word}<sub>{possibility.value}</sub> </a>\n\t\t\t{/each}\n\t\t\t</div>\n\t\t</div>\n\t\t<div>\n\t\t\t<h2>Ruled out, not useless ({untried.length}) <a href=\"#ruled-out\"><sup>?</sup></a></h2>\n\t\t\t<div class=\"possibility-list\">\n\t\t\t{#each untried as possibility}\n\t\t\t<a href=\"#top\" on:click={()=>tryWord(possibility.word)} class=\"suggestion\"> {possibility.word}<sub>{possibility.value}</sub> </a>\n\t\t\t{/each}\n\t\t\t</div>\n\t\t</div>\n\t</section>\n\t<section id=\"about\">\n\t\t<h2 class=\"about\">About this</h2>\n\t\t<p><a class=\"up\" href=\"#top\">Back to the top &uarr;</a></p>\n\t\t<p>I've enjoyed playing <a href=\"https://www.powerlanguage.co.uk/wordle/\">Wordle</a>.  I love the way you only get a single word a day, it feels respectful of my time and encourages a thoughful approach to solving each puzzle. Also, it fosters a really nice community vibe as people try to discover the same word as one another each day. It's telling that all the inevitable knockoffs seem to ditch the one puzzle a day rule, the best most interesting part of the whole thing.</p>\n\t\t<p>The puzzle itself is moderartely interesting. There's a gameshow called <a href=\"https://www.itv.com/hub/lingo/10a0540\">Lingo</a> on ITV which uses the same idea but with 4 letters instead of 5, and adds time pressure and direct competition which changes the dynamic and feel of the puzzle in interesting ways.</p>\n\t\t<p>Anyway, I got interested in what the best strategy for solving Wordle puzzles might be e.g. is it better to get as many letters as possible even if you're choosing words you know aren't possible, or is it better to take the <a href=\"https://i.etsystatic.com/9295891/r/il/12309a/1268275533/il_fullxfull.1268275533_hd9h.jpg\">Mastermind</a>-like gradual deduction approach. And what does the possibility space look like? How fast do your options narrow? etc. I guess I'm more interested in understanding the puzzle than solving specific instances of it (c.f. sudoku). Hence this page.</p>\n\t\t<h3>What are those little<sub>subscript</sub> numbers?</h3>\n\t\t<p>The little subscript number next to each possible word is a value score assigned to that word based on how frequently it's letters appear in other words, the idea being that all else being equal choosing the letters that appear frequently is most likely to gain you more information.</p>\n\t\t<h3>Process</h3>\n\t\t<p>Initially I made a Javascript module that progressivley added constraints to filter a list of words and just played around with it on the command line. Once I was reasnoably satisfied that it worked I built a rudimentary UI for it in <a href=\"https://www.svelte.dev\">Svelte</a>. The constraint solving bit and the UI don't fit together too nicely I put this down to being a Svelte novice.</p>\n\t\t<p>I think my approach is OK, though I'm sure someone smarter could do better, there are a few sources of information the system doesn't take into account (e.g.letter position frequency) when ranking the value of a given guess.</p>\n\t\t<p><a href=\"https://github.com/tomgp/wordle-helper\">Please feel free to suggest improvements to/ laugh at the code on GitHub</a></p>\n\t\t<h3 id=\"ruled-out\">What's the \"Not useless\" column about?</h3>\n\t\t<p>Sometimes it's useful to play a word that's technically been ruled out in order to find out some more letters, that's what the words in this second column are for. <a class=\"up\" href=\"#top\">Back to the top &uarr;</a></p>\n\t</section>\n\t</article>\n\t<footer>\n    <p><a href=\"https://www.toffeemilkshake.co.uk\">Tom Pearson</a> Jan 2022</p></footer>\n<style>\n\tsection{\n\t\tborder-bottom: 1px solid black;\n\t}\n\n\t.suggestions, \n\t.input{\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr 1fr;\n\t\tcolumn-gap:1rem;\n\t\tmin-height: 230px;\n\t}\n\t@media(max-width: 700px) {\n\t\t.suggestions, \n\t\t.input{\n\t\t\tgrid-template-columns: 1fr;\n\t\t}\n\t}\n\n\t.suggestions h2{\n\t\theight: 3rem;\n\t\tmargin-bottom: 2rem;\n\t}\n\t.possibility-list{\n\t\tmax-height: 50vh;\n\t\toverflow-y: scroll;\n\t\toverflow-x: hidden;\n\t}\n\tsub{\n\t\tfont-size: xx-small;\n\t\tcolor: lightgrey;\n\t}\n\t.suggestion{\n\t\tbackground: none!important;\n\t\tborder: none;\n\t\tmargin-right: 5px;\n\t\tfont-family: sans-serif;\n\t}\n\t.suggestion:hover{\n\t\tcolor: red;\n\t\tcursor: pointer;\n\t\tborder-bottom: 1px solid red;\n\t}\n\t.strike{\n\t\ttext-decoration: line-through;\n\t}\n</style>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'world'\n\t}\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","current_component","set_current_component","component","createEventDispatcher","Error","get_current_component","type","detail","callbacks","$$","bubbles","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","letters","list","fullList","constraint","knownLetters","checkedLetters","getWordValues","subList","unique","frequencies","console","log","reduce","word","newLetters","split","getLetterFrequency","acc","letter","sort","excludeLetter","letterToRemove","possibleLetters","possibleLetter","excludeLetterAtPosition","position","exclusiveAtPosition","setWordleResult","result","rankedList","disjunct","x","dispatch","wordleResult","cycleLetterState","states","nextState","findIndex","s","valid","undefined","String","toLocaleLowerCase","guess","r","possibilities","untried","manager","longList","guessCount","currentGuess","guessHistory","tryWord","w","possibility","body"],"mappings":"gCAAA,SAASA,KAgBT,SAASC,EAAIC,GACT,OAAOA,IAEX,SAASC,IACL,OAAOC,OAAOC,OAAO,MAEzB,SAASC,EAAQC,GACbA,EAAIC,QAAQP,GAEhB,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,EAElB,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,EAqHhF,SAASE,EAAcC,GACnB,OAAgB,MAATA,EAAgB,GAAKA,EAgKhC,SAASC,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,GAoDvB,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,MAUxC,SAASE,EAAOL,GACZA,EAAKM,WAAWC,YAAYP,GAEhC,SAASQ,EAAaC,EAAYC,GAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAWG,OAAQD,GAAK,EACpCF,EAAWE,IACXF,EAAWE,GAAGE,EAAEH,GAG5B,SAASI,EAAQC,GACb,OAAOC,SAASC,cAAcF,GAoBlC,SAASG,EAAKC,GACV,OAAOH,SAASI,eAAeD,GAEnC,SAASE,IACL,OAAOH,EAAK,KAKhB,SAASI,EAAOtB,EAAMuB,EAAOC,EAASC,GAElC,OADAzB,EAAK0B,iBAAiBH,EAAOC,EAASC,GAC/B,IAAMzB,EAAK2B,oBAAoBJ,EAAOC,EAASC,GA8B1D,SAASG,EAAK5B,EAAM6B,EAAWhC,GACd,MAATA,EACAG,EAAK8B,gBAAgBD,GAChB7B,EAAK+B,aAAaF,KAAehC,GACtCG,EAAKgC,aAAaH,EAAWhC,GAqLrC,SAASoC,EAASf,EAAMC,GACpBA,EAAO,GAAKA,EACRD,EAAKgB,YAAcf,IACnBD,EAAKC,KAAOA,GAEpB,SAASgB,EAAgBC,EAAOvC,GAC5BuC,EAAMvC,MAAiB,MAATA,EAAgB,GAAKA,EA0SvC,IAAIwC,EACJ,SAASC,EAAsBC,GAC3BF,EAAoBE,EAmBxB,SAASC,IACL,MAAMD,EAlBV,WACI,IAAKF,EACD,MAAM,IAAII,MAAM,oDACpB,OAAOJ,EAeWK,GAClB,MAAO,CAACC,EAAMC,KACV,MAAMC,EAAYN,EAAUO,GAAGD,UAAUF,GACzC,GAAIE,EAAW,CAGX,MAAMtB,EA1OlB,SAAsBoB,EAAMC,EAAQG,GAAU,GAC1C,MAAMC,EAAIhC,SAASiC,YAAY,eAE/B,OADAD,EAAEE,gBAAgBP,EAAMI,GAAS,EAAOH,GACjCI,EAuOeG,CAAaR,EAAMC,GACjCC,EAAUO,QAAQ9D,SAAQN,IACtBA,EAAGqE,KAAKd,EAAWhB,QA4BnC,MAAM+B,EAAmB,GAEnBC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAClBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EAWvB,SAASC,EAAoB9E,GACzBwE,EAAiBO,KAAK/E,GAuB1B,MAAMgF,EAAiB,IAAIC,IAC3B,IAAIC,EAAW,EACf,SAASC,IACL,MAAMC,EAAkB/B,EACxB,EAAG,CAGC,KAAO6B,EAAWZ,EAAiB1C,QAAQ,CACvC,MAAM2B,EAAYe,EAAiBY,GACnCA,IACA5B,EAAsBC,GACtB8B,EAAO9B,EAAUO,IAKrB,IAHAR,EAAsB,MACtBgB,EAAiB1C,OAAS,EAC1BsD,EAAW,EACJX,EAAkB3C,QACrB2C,EAAkBe,KAAlBf,GAIJ,IAAK,IAAI5C,EAAI,EAAGA,EAAI6C,EAAiB5C,OAAQD,GAAK,EAAG,CACjD,MAAM4D,EAAWf,EAAiB7C,GAC7BqD,EAAeQ,IAAID,KAEpBP,EAAeS,IAAIF,GACnBA,KAGRf,EAAiB5C,OAAS,QACrB0C,EAAiB1C,QAC1B,KAAO6C,EAAgB7C,QACnB6C,EAAgBa,KAAhBb,GAEJI,GAAmB,EACnBG,EAAeU,QACfpC,EAAsB8B,GAE1B,SAASC,EAAOvB,GACZ,GAAoB,OAAhBA,EAAG6B,SAAmB,CACtB7B,EAAGuB,SACHjF,EAAQ0D,EAAG8B,eACX,MAAMC,EAAQ/B,EAAG+B,MACjB/B,EAAG+B,MAAQ,EAAE,GACb/B,EAAG6B,UAAY7B,EAAG6B,SAASG,EAAEhC,EAAGiC,IAAKF,GACrC/B,EAAGkC,aAAa1F,QAAQwE,IAiBhC,MAAMmB,EAAW,IAAIhB,IACrB,IAAIiB,EAcJ,SAASC,EAAcC,EAAOC,GACtBD,GAASA,EAAMzE,IACfsE,EAASK,OAAOF,GAChBA,EAAMzE,EAAE0E,IAGhB,SAASE,EAAeH,EAAOC,EAAOhF,EAAQkE,GAC1C,GAAIa,GAASA,EAAMI,EAAG,CAClB,GAAIP,EAAST,IAAIY,GACb,OACJH,EAASR,IAAIW,GACbF,EAAOO,EAAE1B,MAAK,KACVkB,EAASK,OAAOF,GACZb,IACIlE,GACA+E,EAAMvE,EAAE,GACZ0D,QAGRa,EAAMI,EAAEH,IAkmBhB,SAASK,EAAiBN,GACtBA,GAASA,EAAMK,IAKnB,SAASE,EAAgBpD,EAAWxC,EAAQI,EAAQyF,GAChD,MAAMjB,SAAEA,EAAQkB,SAAEA,EAAQC,WAAEA,EAAUd,aAAEA,GAAiBzC,EAAUO,GACnE6B,GAAYA,EAASoB,EAAEhG,EAAQI,GAC1ByF,GAED9B,GAAoB,KAChB,MAAMkC,EAAiBH,EAASI,IAAIlH,GAAKmH,OAAO3G,GAC5CuG,EACAA,EAAW/B,QAAQiC,GAKnB5G,EAAQ4G,GAEZzD,EAAUO,GAAG+C,SAAW,MAGhCb,EAAa1F,QAAQwE,GAEzB,SAASqC,EAAkB5D,EAAW7B,GAClC,MAAMoC,EAAKP,EAAUO,GACD,OAAhBA,EAAG6B,WACHvF,EAAQ0D,EAAGgD,YACXhD,EAAG6B,UAAY7B,EAAG6B,SAAS9D,EAAEH,GAG7BoC,EAAGgD,WAAahD,EAAG6B,SAAW,KAC9B7B,EAAGiC,IAAM,IAGjB,SAASqB,EAAW7D,EAAW5B,IACI,IAA3B4B,EAAUO,GAAG+B,MAAM,KACnBvB,EAAiBS,KAAKxB,GA1wBrBsB,IACDA,GAAmB,EACnBH,EAAiB2C,KAAKlC,IA0wBtB5B,EAAUO,GAAG+B,MAAMyB,KAAK,IAE5B/D,EAAUO,GAAG+B,MAAOlE,EAAI,GAAM,IAAO,GAAMA,EAAI,GAEnD,SAAS4F,EAAKhE,EAAWd,EAAS+E,EAAUC,EAAiBC,EAAWC,EAAOC,EAAe/B,EAAQ,EAAE,IACpG,MAAMgC,EAAmBxE,EACzBC,EAAsBC,GACtB,MAAMO,EAAKP,EAAUO,GAAK,CACtB6B,SAAU,KACVI,IAAK,KAEL4B,MAAAA,EACAtC,OAAQvF,EACR4H,UAAAA,EACAI,MAAO7H,IAEP4G,SAAU,GACVC,WAAY,GACZiB,cAAe,GACfnC,cAAe,GACfI,aAAc,GACdgC,QAAS,IAAIC,IAAIxF,EAAQuF,UAAYH,EAAmBA,EAAiB/D,GAAGkE,QAAU,KAEtFnE,UAAW5D,IACX4F,MAAAA,EACAqC,YAAY,EACZC,KAAM1F,EAAQ1B,QAAU8G,EAAiB/D,GAAGqE,MAEhDP,GAAiBA,EAAc9D,EAAGqE,MAClC,IAAIC,GAAQ,EAkBZ,GAjBAtE,EAAGiC,IAAMyB,EACHA,EAASjE,EAAWd,EAAQkF,OAAS,IAAI,CAAChG,EAAG0G,KAAQC,KACnD,MAAMzH,EAAQyH,EAAK1G,OAAS0G,EAAK,GAAKD,EAOtC,OANIvE,EAAGiC,KAAO2B,EAAU5D,EAAGiC,IAAIpE,GAAImC,EAAGiC,IAAIpE,GAAKd,MACtCiD,EAAGoE,YAAcpE,EAAGgE,MAAMnG,IAC3BmC,EAAGgE,MAAMnG,GAAGd,GACZuH,GACAhB,EAAW7D,EAAW5B,IAEvB0G,KAET,GACNvE,EAAGuB,SACH+C,GAAQ,EACRhI,EAAQ0D,EAAG8B,eAEX9B,EAAG6B,WAAW8B,GAAkBA,EAAgB3D,EAAGiC,KAC/CtD,EAAQ1B,OAAQ,CAChB,GAAI0B,EAAQ8F,QAAS,CAEjB,MAAMC,EAzyClB,SAAkB1G,GACd,OAAO2G,MAAMC,KAAK5G,EAAQ6G,YAwyCJC,CAASnG,EAAQ1B,QAE/B+C,EAAG6B,UAAY7B,EAAG6B,SAASkD,EAAEL,GAC7BA,EAAMlI,QAAQe,QAIdyC,EAAG6B,UAAY7B,EAAG6B,SAASc,IAE3BhE,EAAQqG,OACR3C,EAAc5C,EAAUO,GAAG6B,UAC/BgB,EAAgBpD,EAAWd,EAAQ1B,OAAQ0B,EAAQtB,OAAQsB,EAAQmE,eAEnEzB,IAEJ7B,EAAsBuE,GAkD1B,MAAMkB,EACFC,WACI7B,EAAkB8B,KAAM,GACxBA,KAAKD,SAAWlJ,EAEpBoJ,IAAIvF,EAAM4B,GACN,MAAM1B,EAAaoF,KAAKnF,GAAGD,UAAUF,KAAUsF,KAAKnF,GAAGD,UAAUF,GAAQ,IAEzE,OADAE,EAAUkB,KAAKQ,GACR,KACH,MAAM4D,EAAQtF,EAAUuF,QAAQ7D,IACjB,IAAX4D,GACAtF,EAAUwF,OAAOF,EAAO,IAGpCG,KAAKC,GAx0DT,IAAkBC,EAy0DNP,KAAKQ,QAz0DCD,EAy0DkBD,EAx0DG,IAA5BrJ,OAAOwJ,KAAKF,GAAK5H,UAy0DhBqH,KAAKnF,GAAGoE,YAAa,EACrBe,KAAKQ,MAAMF,GACXN,KAAKnF,GAAGoE,YAAa,ICt3DjC,MAAiB,CACfllkB,MAAMyB,EAAU,6BAqHhB,MAnHA,SAAiBC,EAAOC,GACtB,MAAM9C,EAAI,GACV,IAAI+C,EAAa,CAAE,IAAIH,GAAS,IAAIA,GAAS,IAAIA,GAAS,IAAIA,GAAS,IAAIA,IAC3E,MAAMI,EAAe,GACfC,EAAiB,GAevB,SAASC,EAAcC,EAASC,GAAO,GACrC,MAAMC,EAdR,SAA4BF,EAASC,GAAO,GAE1C,OADAE,QAAQC,IAAI,iCAAiCJ,EAAQtI,gBAC9CsI,EAAQK,QAAO,CAACZ,EAASa,KAC9B,IAAIC,EAMJ,OALAA,EAAaN,EAAS,IAAI,IAAIlF,IAAIuF,EAAKE,MAAM,MAAQF,EAAKE,MAAM,IAChED,EAAWnK,SAAQuI,IACbc,EAAQd,KAAKc,EAAQd,GAAG,GAC5Bc,EAAQd,QAEHc,IACN,IAIiBgB,CAAmBT,GAEvC,OADAG,QAAQC,IAAI,uBAAuBJ,EAAQtI,gBACpCsI,EAAQjD,KAAIuD,IACjB,MAAMb,EAAUQ,EAAS,IAAI,IAAIlF,IAAIuF,EAAKE,MAAM,MAAQF,EAAKE,MAAM,IAMnE,MAAO,CAAEF,KAAAA,EAAM3J,MALD8I,EACXY,QAAO,CAACK,EAAKC,IACZD,GAAOR,EAAYS,IAElB,OAGNC,MAAK,CAACpK,EAAEC,IACAA,EAAEE,MAAMH,EAAEG,QAgFrB,OA5EAkG,EAAEgE,cAAgB,SAASC,GACzBlB,EAAaA,EAAW7C,KAAIgE,GACnBA,EAAgB/D,QAAOgE,GAAkBA,GAAkBF,OAItEjE,EAAEoE,wBAA0B,SAASH,EAAgBI,GACnDtB,EAAWsB,GAAYtB,EAAWsB,GAAUlE,QAAOgE,GAAkBA,GAAkBF,KAGzFjE,EAAEsE,oBAAsB,SAASR,EAAQO,GACvCtB,EAAWsB,GAAY,CAACP,IAG1B9D,EAAEuE,gBAAkB,SAASC,GAwB3B,OApBAvB,EAAejF,OACfwG,EAAOjL,SAAQ,CAAC8K,EAASzJ,KAIvB,OAFOyJ,EAASP,OAChBb,EAAejF,KAAKqG,EAASP,QACtBO,EAASvK,OACd,IAAK,QACHkG,EAAEsE,oBAAoBD,EAASP,OAAQlJ,GACvCoI,EAAahF,KAAKqG,EAASP,QAC3B,MACF,IAAK,SACH9D,EAAEoE,wBAAwBC,EAASP,OAAQlJ,GAC3CoI,EAAahF,KAAKqG,EAASP,QAC3B,MACF,IAAK,OACH9D,EAAEgE,cAAcK,EAASP,YAKxB9D,GAGTA,EAAE+C,WAAa,WACb,OAAOA,GAGT/C,EAAEyE,WAAa,WAgBb,OAAOvB,EAdcL,EAAK1C,QAAOsD,IAE/B,IAAI,IAAI7I,EAAE,EAAGA,EAAE6I,EAAK5I,OAAQD,IAC1B,GAAGmI,EAAWnI,GAAGyH,QAAQoB,EAAK7I,IAAM,EAClC,OAAO,EAGX,OAAO,KACNuF,QAAOsD,GACDT,EAAaQ,QAAO,CAACK,EAAKC,IACxBL,EAAKpB,QAAQyB,IAAS,GAAKD,IAClC,OAMN7D,EAAE0E,SAAW,WACX,MAAM/K,EAAI,IAAIuE,IAAI4E,GACZlJ,EAAI,IAAIsE,IAAI8B,EAAEyE,aAAavE,KAAIpF,GAAGA,EAAE2I,QAO1C,OAAOP,EANY,IAAI,IAAIhF,IAAI,IAAIvE,GAAGwG,QAAOwE,IAAM/K,EAAE6E,IAAIkG,OAC5BxE,QAAOsD,GAC3B,IAAIA,GAAMD,QAAO,CAACK,EAAKC,MACnBb,EAAeZ,QAAQyB,IAAS,IAAMD,IAC/C,OAKC7D,gGCvEqIhB,mGAAxHA,KAAaA,OAAKA,KAAaA,OAAGlF,MAAM,kCAA5DK,mEAA4I6E,wCAAxHA,KAAaA,OAAKA,KAAaA,OAAGlF,MAAM,+JAG5DK,2BAAkB6E,ofAGhB7E,kBACAA,mEARK6E,0BAALnE,mCAGGmE,aAGAA,KAAQnE,OAAS,sGAPxBV,+HACS6E,aAALnE,0HAAAA,OAGGmE,2DAGAA,KAAQnE,OAAS,mIAhDb4I,EAAM,YAEXmB,EAAWnI,QAIboI,4BAUKC,EAAiBhB,EAAQlJ,OAC5BmK,GAAU,OAAO,SAAS,SAC9BzB,QAAQC,IAAI,QAASO,EAAQlJ,GACzBiK,EAAajK,GAAGkJ,YAClBe,EAAajK,IACXkJ,OAAAA,EACAhK,MAAO,eAGPkL,GAAaD,EAAOE,WAAUC,GAAGA,GAAGL,EAAajK,GAAGd,QAAO,GAAGiL,EAAOlK,WACzEgK,EAAajK,GAAGd,MAAQiL,EAAOC,UAC/BG,EAAQN,EAAarB,SAAQK,EAAK/I,KAChCwI,QAAQC,IAAIzI,GACOsK,MAAZtK,EAAEgJ,QAAuBD,KAC/B,sFA1BFjB,MAAca,SACd0B,GAAQ,uBA6BTP,EAAS,SAAUC,OACnBA,wBACApB,EAAO,QACP0B,GAAQ,aAM0EL,EAAiBO,OAAOvB,GAAQwB,oBAAqB1K,wJCxC7FoE,KAAO8E,kEAAxB9E,KAAOlF,mCAA9BK,oCAAwC6E,KAAO8E,2CAAxB9E,KAAOlF,kFADzBkF,0BAALnE,gGADJV,kFACS6E,aAALnE,6HAAAA,oEAHS0K,iJCDb,OAAiB,CACfyOC+Cn0qGvG,sFAAAA,oIASyDA,MAAYyE,UAAWzE,MAAYlF,4LAAhHK,gBAA8FJ,wEAAjBiF,MAAYyE,6BAAWzE,MAAYlF,8EAQnCkF,MAAYyE,UAAWzE,MAAYlF,4LAAhHK,gBAA8FJ,wEAAjBiF,MAAYyE,6BAAWzE,MAAYlF,uJAX9FkF,KAAcnE,aAQHmE,KAAQnE,+BAnBvBmE,uBAAyBA,aAIhCA,4BAALnE,oFASKmE,4BAALnE,wCAQKmE,4BAALnE,oQA1BC,0KAgBC,6BAAmC,4FAQnC,wCAAwC,mxGAtBa,8UAP3DV,SACAJ,cACAA,cACAA,OACCA,OACCA,cAECA,WAA+BiF,aAEhCjF,0BAIDA,2DAMDA,OACCA,OACCA,mCACAA,2DAMDA,OACCA,4BAA8CA,cAC9CA,2DAOFA,kBAgBAI,0EA9CkC6E,UAAAA,iCAGlBA,kCAIPA,cAALnE,uHNwhCDsE,EAAS,CACLqG,EAAG,EACH9F,EAAG,GACHX,EAAGI,QM3hCNtE,8BN+hCIsE,EAAOqG,GACRnM,EAAQ8F,EAAOO,GAEnBP,EAASA,EAAOJ,0BM3hCCC,KAAcnE,uCAEzBmE,cAALnE,yIAAAA,+BAM2BmE,KAAQnE,uCAE9BmE,cAALnE,yIAAAA,0DAjBAA,wNAvCA4K,EAAeC,EAFf1F,EAAI2F,EAAQC,IAGZC,EAAa,EACbC,EAAe,GACfC,cAgBKC,EAAQC,OAChBH,EAAeG,8DAdfR,EAAgBzF,EAAEyE,kBAClBiB,EAAU1F,EAAE0E,gCAGQzH,GACpBqG,QAAQC,IAAI,SAAUtG,EAAEJ,QACxBkJ,EAAa/H,KAAKf,EAAEJ,eAEpBmD,EAAEuE,gBAAgBtH,EAAEJ,YACpBgJ,WACAC,EAAe,oBAgBkBA,wBAiBHE,EAAQE,EAAYzC,SAQpBuC,EAAQE,EAAYzC,cC/DxC,kEAAQ,CACnBzJ,OAAQiB,SAASkL,KACjBvF,MAAO,CACN5F,KAAM"}